{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GeekCircle \u6781\u5ba2\u5708 \u00b6 \u63a8\u8350 \u00b6 \u6781\u5ba2\u5154\u5154\u7684\u535a\u5ba2 Star \u00b6 Github - \u673a\u5668\u5b66\u4e60\u7b14\u8bd5Q&A","title":"\u4e3b\u9875"},{"location":"#geekcircle","text":"","title":"GeekCircle \u6781\u5ba2\u5708"},{"location":"#_1","text":"\u6781\u5ba2\u5154\u5154\u7684\u535a\u5ba2","title":"\u63a8\u8350"},{"location":"#star","text":"Github - \u673a\u5668\u5b66\u4e60\u7b14\u8bd5Q&A","title":"Star"},{"location":"machine-learning-interview-qa/","text":"\u673a\u5668\u5b66\u4e60\u9762\u8bd5\u9898 \u00b6 \u5e8f\u8a00 \u00b6 \u6301\u7eed\u6574\u7406\u3001\u66f4\u65b0\u673a\u5668\u5b66\u4e60\u9886\u57df\u7684\u9762\u8bd5\u7b14\u8bd5\u9898\uff0c\u9898\u76ee\u6765\u6e90\u4e3b\u8981\u6765\u6e90\u4e8e \u4f18\u8fbe\u5b66\u57ce \u3001 \u4e03\u6708\u5728\u7ebf \u7b49\u3002 Github \u00b6 Github - \u673a\u5668\u5b66\u4e60\u7b14\u8bd5Q&A \u8d21\u732e\u8005 \u00b6 Dai Jie Xu Ri Tijing Wang","title":"\u5e8f\u8a00"},{"location":"machine-learning-interview-qa/#_1","text":"","title":"\u673a\u5668\u5b66\u4e60\u9762\u8bd5\u9898"},{"location":"machine-learning-interview-qa/#_2","text":"\u6301\u7eed\u6574\u7406\u3001\u66f4\u65b0\u673a\u5668\u5b66\u4e60\u9886\u57df\u7684\u9762\u8bd5\u7b14\u8bd5\u9898\uff0c\u9898\u76ee\u6765\u6e90\u4e3b\u8981\u6765\u6e90\u4e8e \u4f18\u8fbe\u5b66\u57ce \u3001 \u4e03\u6708\u5728\u7ebf \u7b49\u3002","title":"\u5e8f\u8a00"},{"location":"machine-learning-interview-qa/#github","text":"Github - \u673a\u5668\u5b66\u4e60\u7b14\u8bd5Q&A","title":"Github"},{"location":"machine-learning-interview-qa/#_3","text":"Dai Jie Xu Ri Tijing Wang","title":"\u8d21\u732e\u8005"},{"location":"machine-learning-interview-qa/1/","text":"1. \u5982\u4f55\u5904\u7406\u7279\u5f81\u5411\u91cf\u7684\u7f3a\u5931\u503c \u00b6 1) \u7f3a\u5931\u503c\u8f83\u591a \u00b6 \u7f3a\u5931\u503c\u8f83\u591a.\u76f4\u63a5\u5c06\u8be5\u7279\u5f81\u820d\u5f03\u6389\uff0c\u5426\u5219\u53ef\u80fd\u53cd\u5012\u4f1a\u5e26\u5165\u8f83\u5927\u7684\u566a\u58f0\uff0c\u5bf9\u7ed3\u679c\u9020\u6210\u4e0d\u826f\u5f71\u54cd\u3002 2) \u7f3a\u5931\u503c\u8f83\u5c11 \u00b6 \u7f3a\u5931\u503c\u8f83\u5c11\uff0c\u5176\u4f59\u7684\u7279\u5f81\u7f3a\u5931\u503c\u90fd\u572810%\u4ee5\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u5f88\u591a\u7684\u65b9\u5f0f\u6765\u5904\u7406: \u65b9\u5f0f1: \u628aNaN\u76f4\u63a5\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u5047\u8bbe\u75280\u8868\u793a\uff1b data_train . fillna ( 0 ) - \u65b9\u5f0f2: \u7528\u5747\u503c\u586b\u5145\uff1b \u5747\u503c\u586b\u5145\u53ef\u80fd\u9700\u8981\u53d6\u6761\u4ef6\u5747\u503c\uff0c\u4f8b\u5982\u67d0\u8bad\u7ec3\u96c6\u4e2d\u60a3\u764c\u75c7\u548c\u4e0d\u60a3\u764c\u75c7\u7684\u6570\u636e\u4e2d\uff0c\u8be5\u503c\u7684\u5dee\u8ddd\u5f88\u5927\uff0c\u90a3\u4e48\u5c31\u5e94\u5f53\u586b\u5145label\u76f8\u540c\u7684\u6570\u636e\u7684\u5747\u503c\u3002 data_train . fillna ( data_train . mean ()) \u65b9\u5f0f3\uff1a\u7528\u4e0a\u4e0b\u6570\u636e\u8fdb\u884c\u586b\u5145\uff1b # \u4e0a\u4e00\u4e2a\u6570\u636e\u586b\u5145 data_train . fillna ( method = 'pad' ) # \u4e0b\u4e00\u4e2a\u6570\u636e\u586b\u5145 data_train . fillna ( method = 'bfill' ) \u65b9\u5f0f4\uff1a\u63d2\u503c\u6cd5 # \u5373\u4f30\u8ba1\u4e2d\u95f4\u70b9\u7684\u503c data_train . interpolate () - \u65b9\u5f0f5\uff1a\u7528\u968f\u673a\u68ee\u6797\u7b49\u7b97\u6cd5\u62df\u5408 \u5c06\u6570\u636e\u5206\u4e3a\u6709\u503c\u548c\u7f3a\u5931\u503c2\u4efd\uff0c\u5bf9\u6709\u503c\u7684\u6570\u636e\u91c7\u7528\u968f\u673a\u68ee\u6797\u62df\u5408\uff0c\u7136\u540e\u5bf9\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\u8fdb\u884c\u9884\u6d4b\uff0c\u7528\u9884\u6d4b\u7684\u503c\u6765\u586b\u5145\u3002","title":"1.\u5982\u4f55\u5904\u7406\u7279\u5f81\u5411\u91cf\u7684\u7f3a\u5931\u503c"},{"location":"machine-learning-interview-qa/1/#1","text":"","title":"1. \u5982\u4f55\u5904\u7406\u7279\u5f81\u5411\u91cf\u7684\u7f3a\u5931\u503c"},{"location":"machine-learning-interview-qa/1/#1_1","text":"\u7f3a\u5931\u503c\u8f83\u591a.\u76f4\u63a5\u5c06\u8be5\u7279\u5f81\u820d\u5f03\u6389\uff0c\u5426\u5219\u53ef\u80fd\u53cd\u5012\u4f1a\u5e26\u5165\u8f83\u5927\u7684\u566a\u58f0\uff0c\u5bf9\u7ed3\u679c\u9020\u6210\u4e0d\u826f\u5f71\u54cd\u3002","title":"1) \u7f3a\u5931\u503c\u8f83\u591a"},{"location":"machine-learning-interview-qa/1/#2","text":"\u7f3a\u5931\u503c\u8f83\u5c11\uff0c\u5176\u4f59\u7684\u7279\u5f81\u7f3a\u5931\u503c\u90fd\u572810%\u4ee5\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u5f88\u591a\u7684\u65b9\u5f0f\u6765\u5904\u7406: \u65b9\u5f0f1: \u628aNaN\u76f4\u63a5\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u5047\u8bbe\u75280\u8868\u793a\uff1b data_train . fillna ( 0 ) - \u65b9\u5f0f2: \u7528\u5747\u503c\u586b\u5145\uff1b \u5747\u503c\u586b\u5145\u53ef\u80fd\u9700\u8981\u53d6\u6761\u4ef6\u5747\u503c\uff0c\u4f8b\u5982\u67d0\u8bad\u7ec3\u96c6\u4e2d\u60a3\u764c\u75c7\u548c\u4e0d\u60a3\u764c\u75c7\u7684\u6570\u636e\u4e2d\uff0c\u8be5\u503c\u7684\u5dee\u8ddd\u5f88\u5927\uff0c\u90a3\u4e48\u5c31\u5e94\u5f53\u586b\u5145label\u76f8\u540c\u7684\u6570\u636e\u7684\u5747\u503c\u3002 data_train . fillna ( data_train . mean ()) \u65b9\u5f0f3\uff1a\u7528\u4e0a\u4e0b\u6570\u636e\u8fdb\u884c\u586b\u5145\uff1b # \u4e0a\u4e00\u4e2a\u6570\u636e\u586b\u5145 data_train . fillna ( method = 'pad' ) # \u4e0b\u4e00\u4e2a\u6570\u636e\u586b\u5145 data_train . fillna ( method = 'bfill' ) \u65b9\u5f0f4\uff1a\u63d2\u503c\u6cd5 # \u5373\u4f30\u8ba1\u4e2d\u95f4\u70b9\u7684\u503c data_train . interpolate () - \u65b9\u5f0f5\uff1a\u7528\u968f\u673a\u68ee\u6797\u7b49\u7b97\u6cd5\u62df\u5408 \u5c06\u6570\u636e\u5206\u4e3a\u6709\u503c\u548c\u7f3a\u5931\u503c2\u4efd\uff0c\u5bf9\u6709\u503c\u7684\u6570\u636e\u91c7\u7528\u968f\u673a\u68ee\u6797\u62df\u5408\uff0c\u7136\u540e\u5bf9\u6709\u7f3a\u5931\u503c\u7684\u6570\u636e\u8fdb\u884c\u9884\u6d4b\uff0c\u7528\u9884\u6d4b\u7684\u503c\u6765\u586b\u5145\u3002","title":"2) \u7f3a\u5931\u503c\u8f83\u5c11"},{"location":"machine-learning-interview-qa/10/","text":"10. \u652f\u6301\u5411\u91cf\u673a(SVM)\u4e2d\u7684\u652f\u6301\u5411\u91cf\u662f\u4ec0\u4e48\u610f\u601d \u00b6 \u9898\u76ee \u00b6 \u6211\u4eec\u5728\u4e0b\u9762\u7684\u4e8c\u5143\u6807\u7b7e\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u4e00\u4e2a\u7ebf\u6027SVM\u6a21\u578b + \uff1a ( \u2212 1 , 1 ),( 1 , \u2212 1 ),( \u2212 1 , \u2212 1 ) \u2212\uff1a ( 1 , 1 ),( 2 , 0 ),( 2 , 1 ) \u8fd9\u4e2a\u6a21\u578b\u4e2d\u7684\u652f\u6301\u5411\u91cf\u662f\u54ea\u4e9b\uff1f A. (\u22121,1),(1,1),(2,1) B. (\u22121,1),(\u22121,\u22121),(2,1) C. (\u22121,1),(1,\u22121),(1,1),(2,0) \u89e3\u6790 \u00b6 \u5728\u753b\u5206\u5272\u7ebf\u533a\u5206\u7ea2\u7eff\u4e24\u7c7b\u70b9\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u95ee\u81ea\u5df1\u4e00\u4e2a\u95ee\u9898\uff0c\u4f60\u8ba4\u4e0d\u8ba4\u4e3a\u6240\u6709\u7684\u70b9\u5bf9\u4e8e\u5206\u5272\u7ebf\u7684\u4f4d\u7f6e\u90fd\u662f\u8d77\u51b3\u5b9a\u6027\u4f5c\u7528\u7684\uff1f \u5176\u5b9e\u5728\u7279\u522b\u8fdc\u7684\u533a\u57df\uff0c\u54ea\u6015\u4f60\u589e\u52a010000\u4e2a\u6837\u672c\u70b9\uff0c\u5bf9\u4e8e\u5206\u5272\u7ebf\u7684\u4f4d\u7f6e\uff0c\u4e5f\u662f\u6ca1\u6709\u4f5c\u7528\u7684\uff0c\u56e0\u4e3a\u5206\u5272\u7ebf\u662f\u7531\u51e0\u4e2a\u5173\u952e\u70b9\u51b3\u5b9a\u7684\uff08\u56fe\u4e0a\u4e09\u4e2a\uff09\uff0c\u8fd9\u51e0\u4e2a\u5173\u952e\u70b9\u652f\u6491\u8d77\u4e86\u4e00\u4e2a\u5206\u5272\u8d85\u5e73\u9762\uff0c\u6240\u4ee5\u8fd9\u4e9b\u5173\u952e\u70b9\uff0c\u5c31\u662f\u652f\u6301\u5411\u91cf\u3002 \u53c2\u8003\u6587\u6863 \u00b6 \u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u91cc\u7684\u652f\u6301\u5411\u91cf\u662f\u4ec0\u4e48\u610f\u601d - sofasofa \u652f\u6301\u5411\u91cf\u673a(SVM)\u662f\u4ec0\u4e48\u610f\u601d\uff1f- \u77e5\u4e4e \u7b54\u6848 \u00b6 \u5728\u5750\u6807\u7cfb\u4e2d\u753b\u4e00\u4e0b\uff0c\u5373\u53ef\u77e5\u9053C\u662f\u6b63\u786e\u7b54\u6848","title":"10.\u652f\u6301\u5411\u91cf\u673a(SVM)\u4e2d\u7684\u652f\u6301\u5411\u91cf\u662f\u4ec0\u4e48\u610f\u601d"},{"location":"machine-learning-interview-qa/10/#10-svm","text":"","title":"10. \u652f\u6301\u5411\u91cf\u673a(SVM)\u4e2d\u7684\u652f\u6301\u5411\u91cf\u662f\u4ec0\u4e48\u610f\u601d"},{"location":"machine-learning-interview-qa/10/#_1","text":"\u6211\u4eec\u5728\u4e0b\u9762\u7684\u4e8c\u5143\u6807\u7b7e\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u4e00\u4e2a\u7ebf\u6027SVM\u6a21\u578b + \uff1a ( \u2212 1 , 1 ),( 1 , \u2212 1 ),( \u2212 1 , \u2212 1 ) \u2212\uff1a ( 1 , 1 ),( 2 , 0 ),( 2 , 1 ) \u8fd9\u4e2a\u6a21\u578b\u4e2d\u7684\u652f\u6301\u5411\u91cf\u662f\u54ea\u4e9b\uff1f A. (\u22121,1),(1,1),(2,1) B. (\u22121,1),(\u22121,\u22121),(2,1) C. (\u22121,1),(1,\u22121),(1,1),(2,0)","title":"\u9898\u76ee"},{"location":"machine-learning-interview-qa/10/#_2","text":"\u5728\u753b\u5206\u5272\u7ebf\u533a\u5206\u7ea2\u7eff\u4e24\u7c7b\u70b9\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u95ee\u81ea\u5df1\u4e00\u4e2a\u95ee\u9898\uff0c\u4f60\u8ba4\u4e0d\u8ba4\u4e3a\u6240\u6709\u7684\u70b9\u5bf9\u4e8e\u5206\u5272\u7ebf\u7684\u4f4d\u7f6e\u90fd\u662f\u8d77\u51b3\u5b9a\u6027\u4f5c\u7528\u7684\uff1f \u5176\u5b9e\u5728\u7279\u522b\u8fdc\u7684\u533a\u57df\uff0c\u54ea\u6015\u4f60\u589e\u52a010000\u4e2a\u6837\u672c\u70b9\uff0c\u5bf9\u4e8e\u5206\u5272\u7ebf\u7684\u4f4d\u7f6e\uff0c\u4e5f\u662f\u6ca1\u6709\u4f5c\u7528\u7684\uff0c\u56e0\u4e3a\u5206\u5272\u7ebf\u662f\u7531\u51e0\u4e2a\u5173\u952e\u70b9\u51b3\u5b9a\u7684\uff08\u56fe\u4e0a\u4e09\u4e2a\uff09\uff0c\u8fd9\u51e0\u4e2a\u5173\u952e\u70b9\u652f\u6491\u8d77\u4e86\u4e00\u4e2a\u5206\u5272\u8d85\u5e73\u9762\uff0c\u6240\u4ee5\u8fd9\u4e9b\u5173\u952e\u70b9\uff0c\u5c31\u662f\u652f\u6301\u5411\u91cf\u3002","title":"\u89e3\u6790"},{"location":"machine-learning-interview-qa/10/#_3","text":"\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u91cc\u7684\u652f\u6301\u5411\u91cf\u662f\u4ec0\u4e48\u610f\u601d - sofasofa \u652f\u6301\u5411\u91cf\u673a(SVM)\u662f\u4ec0\u4e48\u610f\u601d\uff1f- \u77e5\u4e4e","title":"\u53c2\u8003\u6587\u6863"},{"location":"machine-learning-interview-qa/10/#_4","text":"\u5728\u5750\u6807\u7cfb\u4e2d\u753b\u4e00\u4e0b\uff0c\u5373\u53ef\u77e5\u9053C\u662f\u6b63\u786e\u7b54\u6848","title":"\u7b54\u6848"},{"location":"machine-learning-interview-qa/11/","text":"11. \u7cbe\u786e\u7387(precision)\u548c\u53ec\u56de\u7387(recall) \u00b6 \u6df7\u6dc6\u77e9\u9635 True Positive(\u771f\u6b63, TP)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570. True Negative(\u771f\u8d1f , TN)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570. False Positive(\u5047\u6b63, FP)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570 \u2192 \u8bef\u62a5 (Type I error). False Negative(\u5047\u8d1f , FN)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570 \u2192 \u6f0f\u62a5 (Type II error). \u7cbe\u786e\u7387(precision)\u5b9a\u4e49\u4e3a\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\u7cbe\u786e\u7387(precision)\u548c\u51c6\u786e\u7387(accuracy)\u662f\u4e0d\u4e00\u6837\u7684\uff0c \u5728\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\u4e0b\uff0c\u51c6\u786e\u7387\u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u6709\u5f88\u5927\u7684\u7f3a\u9677\u3002\u6bd4\u5982\u5728\u4e92\u8054\u7f51\u5e7f\u544a\u91cc\u9762\uff0c\u70b9\u51fb\u7684\u6570\u91cf\u662f\u5f88\u5c11\u7684\uff0c\u4e00\u822c\u53ea\u6709\u5343\u5206\u4e4b\u51e0\uff0c\u5982\u679c\u7528acc\uff0c\u5373\u4f7f\u5168\u90e8\u9884\u6d4b\u6210\u8d1f\u7c7b\uff08\u4e0d\u70b9\u51fb\uff09acc \u4e5f\u6709 99% \u4ee5\u4e0a\uff0c\u6ca1\u6709\u610f\u4e49\u3002 \u53ec\u56de\u7387(recall,sensitivity,true positive rate)\u5b9a\u4e49\u4e3a\uff1a \u6b64\u5916\uff0c\u8fd8\u6709 F1 \u503c\uff0c\u662f\u7cbe\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5747\u503c\uff0c \u7cbe\u786e\u7387\u548c\u51c6\u786e\u7387\u90fd\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c F1 \u503c\u4e5f\u4f1a\u9ad8\u3002","title":"11.\u7cbe\u786e\u7387(precision)\u548c\u53ec\u56de\u7387(recall)"},{"location":"machine-learning-interview-qa/11/#11-precisionrecall","text":"\u6df7\u6dc6\u77e9\u9635 True Positive(\u771f\u6b63, TP)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570. True Negative(\u771f\u8d1f , TN)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570. False Positive(\u5047\u6b63, FP)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570 \u2192 \u8bef\u62a5 (Type I error). False Negative(\u5047\u8d1f , FN)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570 \u2192 \u6f0f\u62a5 (Type II error). \u7cbe\u786e\u7387(precision)\u5b9a\u4e49\u4e3a\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\u7cbe\u786e\u7387(precision)\u548c\u51c6\u786e\u7387(accuracy)\u662f\u4e0d\u4e00\u6837\u7684\uff0c \u5728\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\u4e0b\uff0c\u51c6\u786e\u7387\u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u6709\u5f88\u5927\u7684\u7f3a\u9677\u3002\u6bd4\u5982\u5728\u4e92\u8054\u7f51\u5e7f\u544a\u91cc\u9762\uff0c\u70b9\u51fb\u7684\u6570\u91cf\u662f\u5f88\u5c11\u7684\uff0c\u4e00\u822c\u53ea\u6709\u5343\u5206\u4e4b\u51e0\uff0c\u5982\u679c\u7528acc\uff0c\u5373\u4f7f\u5168\u90e8\u9884\u6d4b\u6210\u8d1f\u7c7b\uff08\u4e0d\u70b9\u51fb\uff09acc \u4e5f\u6709 99% \u4ee5\u4e0a\uff0c\u6ca1\u6709\u610f\u4e49\u3002 \u53ec\u56de\u7387(recall,sensitivity,true positive rate)\u5b9a\u4e49\u4e3a\uff1a \u6b64\u5916\uff0c\u8fd8\u6709 F1 \u503c\uff0c\u662f\u7cbe\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5747\u503c\uff0c \u7cbe\u786e\u7387\u548c\u51c6\u786e\u7387\u90fd\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c F1 \u503c\u4e5f\u4f1a\u9ad8\u3002","title":"11. \u7cbe\u786e\u7387(precision)\u548c\u53ec\u56de\u7387(recall)"},{"location":"machine-learning-interview-qa/12/","text":"12. \u6570\u636e\u6316\u6398\u4e2d\u5982\u4f55\u5224\u65ad\u5173\u8054\u89c4\u5219\u6709\u6548\u6027 \u00b6 \u5173\u8054\u89c4\u5219\u7684\u4e09\u4e2a\u5ea6 \u00b6 1.\u652f\u6301\u5ea6\uff08Support\uff09 \u00b6 Support(X\u2192Y) = P(X,Y) / P(I) = P(X\u222aY) / P(I) = num(XUY) / num(I) \u652f\u6301\u5ea6\u8868\u793a\u9879\u96c6{X,Y}\u5728\u603b\u9879\u96c6\u91cc\u51fa\u73b0\u7684\u6982\u7387\u3002 \u5176\u4e2d\uff0cI\u8868\u793a\u603b\u4e8b\u52a1\u96c6\u3002num()\u8868\u793a\u6c42\u4e8b\u52a1\u96c6\u91cc\u7279\u5b9a\u9879\u96c6\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u6bd4\u5982\uff0cnum(I)\u8868\u793a\u603b\u4e8b\u52a1\u96c6\u7684\u4e2a\u6570\uff0cnum(X\u222aY)\u8868\u793a\u542b\u6709{X,Y}\u7684\u4e8b\u52a1\u96c6\u7684\u4e2a\u6570\uff08\u4e2a\u6570\u4e5f\u53eb\u6b21\u6570\uff09\u3002 2.\u7f6e\u4fe1\u5ea6 \uff08Confidence\uff09 \u00b6 Confidence(X\u2192Y) = P(Y|X) = P(X,Y) / P(X) = P(XUY) / P(X) \u7f6e\u4fe1\u5ea6\u8868\u793a\u5728\u5148\u51b3\u6761\u4ef6X\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\uff0c\u7531\u5173\u8054\u89c4\u5219\u201dX\u2192Y\u201c\u63a8\u51faY\u7684\u6982\u7387\u3002\u5373\u5728\u542b\u6709X\u7684\u9879\u96c6\u4e2d\uff0c\u542b\u6709Y\u7684\u53ef\u80fd\u6027\u3002 3.\u63d0\u5347\u5ea6\uff08Lift\uff09 \u00b6 Lift(X\u2192Y) = P(Y|X) / P(Y) \u63d0\u5347\u5ea6\u8868\u793a\u542b\u6709X\u7684\u6761\u4ef6\u4e0b\uff0c\u540c\u65f6\u542b\u6709Y\u7684\u6982\u7387\uff0c\u4e0eY\u603b\u4f53\u53d1\u751f\u7684\u6982\u7387\u4e4b\u6bd4\u3002 \u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u548c\u6700\u5c0f\u7f6e\u4fe1\u5ea6\u7684\u89c4\u5219\uff0c\u53eb\u505a\u201c\u5f3a\u5173\u8054\u89c4\u5219\u201d\u3002 Lift(X\u2192Y)>1\uff0c\u201cX\u2192Y\u201d\u662f\u6709\u6548\u7684\u5f3a\u5173\u8054\u89c4\u5219\u3002 Lift(X\u2192Y) <=1\uff0c\u201cX\u2192Y\u201d\u662f\u65e0\u6548\u7684\u5f3a\u5173\u8054\u89c4\u5219\u3002 \u7279\u522b\u5730\uff0cLift(X\u2192Y) =1\uff0cX\u4e0eY\u76f8\u4e92\u72ec\u7acb\u3002 \u5224\u65ad\u89c4\u5219\u7684\u6709\u6548\u6027 \u00b6 \u9898\u76ee \u00b6 \u5df2\u77e5\u67091000\u540d\u987e\u5ba2\u4e70\u5e74\u8d27\uff0c\u5206\u4e3a\u7532\u4e59\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u5404500\u4eba\uff0c\u5176\u4e2d\u7532\u7ec4\u6709500\u4eba\u4e70\u4e86\u8336\u53f6\uff0c\u540c\u65f6\u53c8\u6709450\u4eba\u4e70\u4e86\u5496\u5561\uff1b\u4e59\u7ec4\u6709450\u4eba\u4e70\u4e86\u5496\u5561\uff0c\u5982\u8868\u6240\u793a\uff0c \u9898\u76ee\uff1a\u8336\u53f6\u2192\u5496\u5561\u662f\u4e00\u6761\u6709\u6548\u7684\u5173\u8054\u89c4\u5219\u5417\uff1f \u7ec4\u6b21 \u4e70\u8336\u53f6\u7684\u4eba\u6570 \u4e70\u5496\u5561\u7684\u4eba\u6570 \u7532\u7ec4(500\u4eba) 500 450 \u5df2\u7ec4(500\u4eba) 0 450 \u7b54\u6848 \u00b6 \u201d\u8336\u53f6\u2192\u5496\u5561\u201c\u7684\u652f\u6301\u5ea6\uff1a Support(X\u2192Y) = 450 / 500 = 90% \"\u8336\u53f6\u2192\u5496\u5561\"\u7684\u7f6e\u4fe1\u5ea6\u4e3a\uff1aConfidence(X\u2192Y) = 450 / 500 = 90% \u201d\u8336\u53f6\u2192\u5496\u5561\u201c\u7684\u63d0\u5347\u5ea6\u4e3a\uff1aLift(X\u2192Y) = Confidence(X\u2192Y) / P(Y) = 90% / ((450+450)/1000) = 1 \u7531\u4e8e\u63d0\u5347\u5ea6Lift(X\u2192Y) =1\uff0c\u8868\u793aX\u4e0eY\u76f8\u4e92\u72ec\u7acb\uff0c\u5373\u662f\u5426\u6709X\uff0c\u5bf9\u4e8eY\u7684\u51fa\u73b0\u65e0\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u662f\u5426\u8d2d\u4e70\u5496\u5561\uff0c\u4e0e\u6709\u6ca1\u6709\u8d2d\u4e70\u8336\u53f6\u65e0\u5173\u8054\u3002\u5373\u89c4\u5219\u201d\u8336\u53f6\u2192\u5496\u5561\u201c\u4e0d\u6210\u7acb\uff0c\u6216\u8005\u8bf4\u5173\u8054\u6027\u5f88\u5c0f\uff0c\u51e0\u4e4e\u6ca1\u6709\uff0c\u867d\u7136\u5b83\u7684\u652f\u6301\u5ea6\u548c\u7f6e\u4fe1\u5ea6\u90fd\u9ad8\u8fbe90%\uff0c\u4f46\u5b83\u4e0d\u662f\u4e00\u6761\u6709\u6548\u7684\u5173\u8054\u89c4\u5219\u3002","title":"12.\u6570\u636e\u6316\u6398\u4e2d\u5982\u4f55\u5224\u65ad\u5173\u8054\u89c4\u5219\u6709\u6548\u6027"},{"location":"machine-learning-interview-qa/12/#12","text":"","title":"12. \u6570\u636e\u6316\u6398\u4e2d\u5982\u4f55\u5224\u65ad\u5173\u8054\u89c4\u5219\u6709\u6548\u6027"},{"location":"machine-learning-interview-qa/12/#_1","text":"","title":"\u5173\u8054\u89c4\u5219\u7684\u4e09\u4e2a\u5ea6"},{"location":"machine-learning-interview-qa/12/#1support","text":"Support(X\u2192Y) = P(X,Y) / P(I) = P(X\u222aY) / P(I) = num(XUY) / num(I) \u652f\u6301\u5ea6\u8868\u793a\u9879\u96c6{X,Y}\u5728\u603b\u9879\u96c6\u91cc\u51fa\u73b0\u7684\u6982\u7387\u3002 \u5176\u4e2d\uff0cI\u8868\u793a\u603b\u4e8b\u52a1\u96c6\u3002num()\u8868\u793a\u6c42\u4e8b\u52a1\u96c6\u91cc\u7279\u5b9a\u9879\u96c6\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u6bd4\u5982\uff0cnum(I)\u8868\u793a\u603b\u4e8b\u52a1\u96c6\u7684\u4e2a\u6570\uff0cnum(X\u222aY)\u8868\u793a\u542b\u6709{X,Y}\u7684\u4e8b\u52a1\u96c6\u7684\u4e2a\u6570\uff08\u4e2a\u6570\u4e5f\u53eb\u6b21\u6570\uff09\u3002","title":"1.\u652f\u6301\u5ea6\uff08Support\uff09"},{"location":"machine-learning-interview-qa/12/#2-confidence","text":"Confidence(X\u2192Y) = P(Y|X) = P(X,Y) / P(X) = P(XUY) / P(X) \u7f6e\u4fe1\u5ea6\u8868\u793a\u5728\u5148\u51b3\u6761\u4ef6X\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\uff0c\u7531\u5173\u8054\u89c4\u5219\u201dX\u2192Y\u201c\u63a8\u51faY\u7684\u6982\u7387\u3002\u5373\u5728\u542b\u6709X\u7684\u9879\u96c6\u4e2d\uff0c\u542b\u6709Y\u7684\u53ef\u80fd\u6027\u3002","title":"2.\u7f6e\u4fe1\u5ea6 \uff08Confidence\uff09"},{"location":"machine-learning-interview-qa/12/#3lift","text":"Lift(X\u2192Y) = P(Y|X) / P(Y) \u63d0\u5347\u5ea6\u8868\u793a\u542b\u6709X\u7684\u6761\u4ef6\u4e0b\uff0c\u540c\u65f6\u542b\u6709Y\u7684\u6982\u7387\uff0c\u4e0eY\u603b\u4f53\u53d1\u751f\u7684\u6982\u7387\u4e4b\u6bd4\u3002 \u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u548c\u6700\u5c0f\u7f6e\u4fe1\u5ea6\u7684\u89c4\u5219\uff0c\u53eb\u505a\u201c\u5f3a\u5173\u8054\u89c4\u5219\u201d\u3002 Lift(X\u2192Y)>1\uff0c\u201cX\u2192Y\u201d\u662f\u6709\u6548\u7684\u5f3a\u5173\u8054\u89c4\u5219\u3002 Lift(X\u2192Y) <=1\uff0c\u201cX\u2192Y\u201d\u662f\u65e0\u6548\u7684\u5f3a\u5173\u8054\u89c4\u5219\u3002 \u7279\u522b\u5730\uff0cLift(X\u2192Y) =1\uff0cX\u4e0eY\u76f8\u4e92\u72ec\u7acb\u3002","title":"3.\u63d0\u5347\u5ea6\uff08Lift\uff09"},{"location":"machine-learning-interview-qa/12/#_2","text":"","title":"\u5224\u65ad\u89c4\u5219\u7684\u6709\u6548\u6027"},{"location":"machine-learning-interview-qa/12/#_3","text":"\u5df2\u77e5\u67091000\u540d\u987e\u5ba2\u4e70\u5e74\u8d27\uff0c\u5206\u4e3a\u7532\u4e59\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u5404500\u4eba\uff0c\u5176\u4e2d\u7532\u7ec4\u6709500\u4eba\u4e70\u4e86\u8336\u53f6\uff0c\u540c\u65f6\u53c8\u6709450\u4eba\u4e70\u4e86\u5496\u5561\uff1b\u4e59\u7ec4\u6709450\u4eba\u4e70\u4e86\u5496\u5561\uff0c\u5982\u8868\u6240\u793a\uff0c \u9898\u76ee\uff1a\u8336\u53f6\u2192\u5496\u5561\u662f\u4e00\u6761\u6709\u6548\u7684\u5173\u8054\u89c4\u5219\u5417\uff1f \u7ec4\u6b21 \u4e70\u8336\u53f6\u7684\u4eba\u6570 \u4e70\u5496\u5561\u7684\u4eba\u6570 \u7532\u7ec4(500\u4eba) 500 450 \u5df2\u7ec4(500\u4eba) 0 450","title":"\u9898\u76ee"},{"location":"machine-learning-interview-qa/12/#_4","text":"\u201d\u8336\u53f6\u2192\u5496\u5561\u201c\u7684\u652f\u6301\u5ea6\uff1a Support(X\u2192Y) = 450 / 500 = 90% \"\u8336\u53f6\u2192\u5496\u5561\"\u7684\u7f6e\u4fe1\u5ea6\u4e3a\uff1aConfidence(X\u2192Y) = 450 / 500 = 90% \u201d\u8336\u53f6\u2192\u5496\u5561\u201c\u7684\u63d0\u5347\u5ea6\u4e3a\uff1aLift(X\u2192Y) = Confidence(X\u2192Y) / P(Y) = 90% / ((450+450)/1000) = 1 \u7531\u4e8e\u63d0\u5347\u5ea6Lift(X\u2192Y) =1\uff0c\u8868\u793aX\u4e0eY\u76f8\u4e92\u72ec\u7acb\uff0c\u5373\u662f\u5426\u6709X\uff0c\u5bf9\u4e8eY\u7684\u51fa\u73b0\u65e0\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u662f\u5426\u8d2d\u4e70\u5496\u5561\uff0c\u4e0e\u6709\u6ca1\u6709\u8d2d\u4e70\u8336\u53f6\u65e0\u5173\u8054\u3002\u5373\u89c4\u5219\u201d\u8336\u53f6\u2192\u5496\u5561\u201c\u4e0d\u6210\u7acb\uff0c\u6216\u8005\u8bf4\u5173\u8054\u6027\u5f88\u5c0f\uff0c\u51e0\u4e4e\u6ca1\u6709\uff0c\u867d\u7136\u5b83\u7684\u652f\u6301\u5ea6\u548c\u7f6e\u4fe1\u5ea6\u90fd\u9ad8\u8fbe90%\uff0c\u4f46\u5b83\u4e0d\u662f\u4e00\u6761\u6709\u6548\u7684\u5173\u8054\u89c4\u5219\u3002","title":"\u7b54\u6848"},{"location":"machine-learning-interview-qa/13/","text":"13. \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u67d0\u4e2a\u7c7b\u522b\u6982\u7387\u4e3a0\u600e\u4e48\u529e \u00b6 \u9898\u76ee \u00b6 A1,A2,A3\u662f\u4e09\u4e2a\u7279\u5f81\uff0cY\u662f\u5206\u7c7b\u7ed3\u679c\u3002A1,A2,A3\u548cY \u5747\u53ea\u67090\u548c1\u4e24\u79cd\u60c5\u51b5\u3002 A1 A2 A3 Y 1 1 0 1 0 1 1 1 1 0 1 0 0 1 0 0 0 0 1 0 1. \u6734\u7d20\u8d1d\u53f6\u65af\uff08Naive Bayes\uff09\u4e3a\u4ec0\u4e48\u6734\u7d20\uff1f \u00b6 \u6734\u7d20\u8d1d\u53f6\u65af\u4e2d\u7684\u201c\u6734\u7d20\u201d\u4e8c\u5b57\u7a81\u51fa\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7b80\u6613\u6027\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u7684\u7b80\u6613\u6027\u8868\u73b0\u8be5\u7b97\u6cd5\u57fa\u4e8e\u4e00\u4e2a\u5f88\u6734\u7d20\u7684\u5047\u8bbe\uff1a\u6240\u6709\u7684\u53d8\u91cf\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u7528\u8d1d\u53f6\u65af\u5b9a\u7406\u53ef\u4ee5\u5199\u6210 \u4f46\u662f\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u53d8\u91cf\u4e24\u4e24\u4e4b\u95f4\u72ec\u7acb\uff0c\u8fd9\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a Y = \u8fd9\u4e2a\u4eba\u662f\u5426\u662f\u4e3e\u91cd\u8fd0\u52a8\u5458\u3002 X1 = \u6027\u522b\uff0cX2 = \u8fd9\u4e2a\u4eba\u80fd\u5426\u4e3e\u8d77100\u516c\u65a4\u7684\u7bb1\u5b50\u3002 \u53d8\u91cfX1\u548cX2\u663e\u7136\u4e0d\u662f\u72ec\u7acb\u7684\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u72ec\u7acb\u6027\u5047\u8bbe\u5f88\u50bb\u5f88\u5929\u771f\uff0c\u6240\u4ee5\u9884\u6d4b\u7cbe\u5ea6\u5f80\u5f80\u4e0d\u662f\u5f88\u9ad8\u3002 2. 1,0,0 \u7684\u5206\u7c7b\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f \u00b6 \u5206\u6bcd\u90fd\u662f\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u8ba1\u7b97\u5206\u5b50\u5373\u53ef\u3002 P ( Y = 0 ) = 3 / 5 P ( Y = 1 ) = 2 / 5 P ( Y = 0 | A1 = 1 , A2 = 0 , A3 = 0 ) = 3 / 5 * 1 / 3 * 2 / 3 * 1 / 3 = 2 / 45 P ( Y = 1 | A1 = 1 , A2 = 0 , A3 = 0 ) = 2 / 5 * 1 / 2 * 1 / 4 * 1 / 2 = 1 / 40 \u7b54\uff1a \u5206\u7c7b\u7ed3\u679c\u4e3a0 \u7ed3\u8bba \u00b6 \u4ece\u4e0a\u9898\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u6bcf\u4e2a\u7c7b\u522b\u672a\u51fa\u73b0\u5bfc\u81f4\u6982\u7387\u4e3a0\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u8d1d\u53f6\u65af\u4f30\u8ba1\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002\u5f53\u8bad\u7ec3\u96c6\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u63a5\u8fd1\u4e8e0\u7684\u6982\u7387\u4ee3\u66ff0\uff0c\u63a5\u8fd1\u4e8ep\u7684\u6982\u7387\u4ee3\u66ffp\uff0c\u51e0\u4e4e\u4e0d\u5f71\u54cd\u539f\u6709\u7684\u5148\u9a8c\u6982\u7387\u5206\u5e03\u3002 \u8d1d\u53f6\u65af\u4f30\u8ba1\u516c\u5f0f\u4e2d\uff0c\u5e38\u53d6\u03bb\u4e3a1\uff0c\u8fd9\u65f6\u79f0\u4e4b\u4e3a\u62c9\u666e\u62c9\u65af\u5e73\u6ed1\uff08Laplace smoothing\uff09\u3002 \u4e0a\u4f8b\u4ec5\u5bf9\u5148\u9a8c\u6982\u7387\u4e3a0\u7684\u7279\u5f81\u91c7\u7528\u4e86\u8d1d\u53f6\u65af\u4f30\u8ba1\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u5bf9\u6240\u6709\u53c2\u4e0e\u8bad\u7ec3\u7684\u7279\u5f81\u90fd\u91c7\u7528\u8d1d\u53f6\u65af\u4f30\u8ba1\u3002","title":"13.\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u67d0\u4e2a\u7c7b\u522b\u6982\u7387\u4e3a0\u600e\u4e48\u529e"},{"location":"machine-learning-interview-qa/13/#13-0","text":"","title":"13. \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u67d0\u4e2a\u7c7b\u522b\u6982\u7387\u4e3a0\u600e\u4e48\u529e"},{"location":"machine-learning-interview-qa/13/#_1","text":"A1,A2,A3\u662f\u4e09\u4e2a\u7279\u5f81\uff0cY\u662f\u5206\u7c7b\u7ed3\u679c\u3002A1,A2,A3\u548cY \u5747\u53ea\u67090\u548c1\u4e24\u79cd\u60c5\u51b5\u3002 A1 A2 A3 Y 1 1 0 1 0 1 1 1 1 0 1 0 0 1 0 0 0 0 1 0","title":"\u9898\u76ee"},{"location":"machine-learning-interview-qa/13/#1-naive-bayes","text":"\u6734\u7d20\u8d1d\u53f6\u65af\u4e2d\u7684\u201c\u6734\u7d20\u201d\u4e8c\u5b57\u7a81\u51fa\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7b80\u6613\u6027\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u7684\u7b80\u6613\u6027\u8868\u73b0\u8be5\u7b97\u6cd5\u57fa\u4e8e\u4e00\u4e2a\u5f88\u6734\u7d20\u7684\u5047\u8bbe\uff1a\u6240\u6709\u7684\u53d8\u91cf\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u7528\u8d1d\u53f6\u65af\u5b9a\u7406\u53ef\u4ee5\u5199\u6210 \u4f46\u662f\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u53d8\u91cf\u4e24\u4e24\u4e4b\u95f4\u72ec\u7acb\uff0c\u8fd9\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a Y = \u8fd9\u4e2a\u4eba\u662f\u5426\u662f\u4e3e\u91cd\u8fd0\u52a8\u5458\u3002 X1 = \u6027\u522b\uff0cX2 = \u8fd9\u4e2a\u4eba\u80fd\u5426\u4e3e\u8d77100\u516c\u65a4\u7684\u7bb1\u5b50\u3002 \u53d8\u91cfX1\u548cX2\u663e\u7136\u4e0d\u662f\u72ec\u7acb\u7684\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u72ec\u7acb\u6027\u5047\u8bbe\u5f88\u50bb\u5f88\u5929\u771f\uff0c\u6240\u4ee5\u9884\u6d4b\u7cbe\u5ea6\u5f80\u5f80\u4e0d\u662f\u5f88\u9ad8\u3002","title":"1. \u6734\u7d20\u8d1d\u53f6\u65af\uff08Naive Bayes\uff09\u4e3a\u4ec0\u4e48\u6734\u7d20\uff1f"},{"location":"machine-learning-interview-qa/13/#2-100","text":"\u5206\u6bcd\u90fd\u662f\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u8ba1\u7b97\u5206\u5b50\u5373\u53ef\u3002 P ( Y = 0 ) = 3 / 5 P ( Y = 1 ) = 2 / 5 P ( Y = 0 | A1 = 1 , A2 = 0 , A3 = 0 ) = 3 / 5 * 1 / 3 * 2 / 3 * 1 / 3 = 2 / 45 P ( Y = 1 | A1 = 1 , A2 = 0 , A3 = 0 ) = 2 / 5 * 1 / 2 * 1 / 4 * 1 / 2 = 1 / 40 \u7b54\uff1a \u5206\u7c7b\u7ed3\u679c\u4e3a0","title":"2. 1,0,0 \u7684\u5206\u7c7b\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f"},{"location":"machine-learning-interview-qa/13/#_2","text":"\u4ece\u4e0a\u9898\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u6bcf\u4e2a\u7c7b\u522b\u672a\u51fa\u73b0\u5bfc\u81f4\u6982\u7387\u4e3a0\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u8d1d\u53f6\u65af\u4f30\u8ba1\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002\u5f53\u8bad\u7ec3\u96c6\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u63a5\u8fd1\u4e8e0\u7684\u6982\u7387\u4ee3\u66ff0\uff0c\u63a5\u8fd1\u4e8ep\u7684\u6982\u7387\u4ee3\u66ffp\uff0c\u51e0\u4e4e\u4e0d\u5f71\u54cd\u539f\u6709\u7684\u5148\u9a8c\u6982\u7387\u5206\u5e03\u3002 \u8d1d\u53f6\u65af\u4f30\u8ba1\u516c\u5f0f\u4e2d\uff0c\u5e38\u53d6\u03bb\u4e3a1\uff0c\u8fd9\u65f6\u79f0\u4e4b\u4e3a\u62c9\u666e\u62c9\u65af\u5e73\u6ed1\uff08Laplace smoothing\uff09\u3002 \u4e0a\u4f8b\u4ec5\u5bf9\u5148\u9a8c\u6982\u7387\u4e3a0\u7684\u7279\u5f81\u91c7\u7528\u4e86\u8d1d\u53f6\u65af\u4f30\u8ba1\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u5bf9\u6240\u6709\u53c2\u4e0e\u8bad\u7ec3\u7684\u7279\u5f81\u90fd\u91c7\u7528\u8d1d\u53f6\u65af\u4f30\u8ba1\u3002","title":"\u7ed3\u8bba"},{"location":"machine-learning-interview-qa/14/","text":"14. \u51b3\u7b56\u6811 \u00b6 \u4ec0\u4e48\u662f\u51b3\u7b56\u6811 \u00b6 \u51b3\u7b56\u6811(decision tree)\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\u3002\u51b3\u7b56\u6811\u662f\u7528\u6837\u672c\u7684\u5c5e\u6027\u4f5c\u4e3a\u7ed3\u70b9\uff0c\u7528\u5c5e\u6027\u7684\u53d6\u503c\u4f5c\u4e3a\u5206\u652f\u7684\u6811\u7ed3\u6784\u3002 \u51b3\u7b56\u6811\u7684\u6839\u7ed3\u70b9\u662f\u6240\u6709\u6837\u672c\u4e2d\u4fe1\u606f\u91cf\u6700\u5927\u7684\u5c5e\u6027\u3002\u6811\u7684\u4e2d\u95f4\u7ed3\u70b9\u662f\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6240\u5305\u542b\u7684\u6837\u672c\u5b50\u96c6\u4e2d\u4fe1\u606f\u91cf\u6700\u5927\u7684\u5c5e\u6027\u3002\u51b3\u7b56\u6811\u7684\u53f6\u7ed3\u70b9\u662f\u6837\u672c\u7684\u7c7b\u522b\u503c\u3002\u51b3\u7b56\u6811\u662f\u4e00\u79cd\u77e5\u8bc6\u8868\u793a\u5f62\u5f0f\uff0c\u5b83\u662f\u5bf9\u6240\u6709\u6837\u672c\u6570\u636e\u7684\u9ad8\u5ea6\u6982\u62ec\u51b3\u7b56\u6811\u80fd\u51c6\u786e\u5730\u8bc6\u522b\u6240\u6709\u6837\u672c\u7684\u7c7b\u522b\uff0c\u4e5f\u80fd\u6709\u6548\u5730\u8bc6\u522b\u65b0\u6837\u672c\u7684\u7c7b\u522b\u3002 \u7279\u5f81\u9009\u62e9 \u00b6 ID \u5e74\u9f84 \u6709\u5de5\u4f5c \u6709\u81ea\u5df1\u7684\u623f\u5b50 \u4fe1\u8d37\u60c5\u51b5 \u7c7b\u522b(\u662f\u5426\u4e2a\u7ed9\u8d37\u6b3e) 1 \u9752\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 2 \u9752\u5e74 \u5426 \u5426 \u597d \u5426 3 \u9752\u5e74 \u662f \u5426 \u597d \u662f 4 \u9752\u5e74 \u662f \u662f \u4e00\u822c \u662f 5 \u9752\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 6 \u4e2d\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 7 \u4e2d\u5e74 \u5426 \u5426 \u597d \u5426 8 \u4e2d\u5e74 \u662f \u662f \u597d \u662f 9 \u4e2d\u5e74 \u5426 \u662f \u975e\u5e38\u597d \u662f 10 \u4e2d\u5e74 \u5426 \u662f \u975e\u5e38\u597d \u662f 11 \u8001\u5e74 \u5426 \u662f \u975e\u5e38\u597d \u662f 12 \u8001\u5e74 \u5426 \u662f \u597d \u662f 13 \u8001\u5e74 \u662f \u5426 \u597d \u662f 14 \u8001\u5e74 \u662f \u5426 \u975e\u5e38\u597d \u662f 15 \u8001\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 \u4fe1\u606f\u71b5\uff08entropy\uff09\u662f\u7528\u6765\u8861\u91cf\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u51fa\u73b0\u7684\u671f\u671b\u503c\u3002\u5982\u679c\u4fe1\u606f\u7684\u4e0d\u786e\u5b9a\u6027\u8d8a\u5927\uff0c\u71b5\u7684\u503c\u4e5f\u5c31\u8d8a\u5927\uff0c\u51fa\u73b0\u7684\u5404\u79cd\u60c5\u51b5\u4e5f\u5c31\u8d8a\u591a\u3002 \u4fe1\u606f\u589e\u76ca\uff08information gain\uff09\u662f\u6307\u4fe1\u606f\u5212\u5206\u524d\u540e\u7684\u71b5\u7684\u53d8\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\u7531\u4e8e\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\u5206\u5272\u6837\u4f8b\u800c\u5bfc\u81f4\u7684\u671f\u671b\u71b5\u964d\u4f4e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4fe1\u606f\u589e\u76ca\u5c31\u662f\u539f\u6709\u4fe1\u606f\u71b5\u4e0e\u5c5e\u6027\u5212\u5206\u540e\u4fe1\u606f\u71b5\uff08\u9700\u8981\u5bf9\u5212\u5206\u540e\u7684\u4fe1\u606f\u71b5\u53d6\u671f\u671b\u503c\uff09\u7684\u5dee\u503c\uff0c\u5177\u4f53\u8ba1\u7b97\u6cd5\u5982\u4e0b\uff1a ID3\u7b97\u6cd5 \u00b6 \u51b3\u7b56\u6811\u7b97\u6cd5ID3\u7684\u57fa\u672c\u601d\u60f3\uff1a \u9996\u5148\u627e\u51fa\u6700\u6709\u5224\u522b\u529b\u7684\u5c5e\u6027\uff0c\u628a\u6837\u4f8b\u5206\u6210\u591a\u4e2a\u5b50\u96c6\uff0c\u6bcf\u4e2a\u5b50\u96c6\u53c8\u9009\u62e9\u6700\u6709\u5224\u522b\u529b\u7684\u5c5e\u6027\u8fdb\u884c\u5212\u5206\uff0c\u4e00\u76f4\u8fdb\u884c\u5230\u6240\u6709\u5b50\u96c6\u4ec5\u5305\u542b\u540c\u4e00\u7c7b\u578b\u7684\u6570\u636e\u4e3a\u6b62\u3002\u6700\u540e\u5f97\u5230\u4e00\u68f5\u51b3\u7b56\u6811\u3002 J.R.Quinlan\u7684\u5de5\u4f5c\u4e3b\u8981\u662f\u5f15\u8fdb\u4e86\u4fe1\u606f\u8bba\u4e2d\u7684\u4fe1\u606f\u589e\u76ca\uff0c\u4ed6\u5c06\u5176\u79f0\u4e3a\u4fe1\u606f\u589e\u76ca\uff08information gain\uff09\uff0c\u4f5c\u4e3a\u5c5e\u6027\u5224\u522b\u80fd\u529b\u7684\u5ea6\u91cf\uff0c\u8bbe\u8ba1\u4e86\u6784\u9020\u51b3\u7b56\u6811\u7684\u9012\u5f52\u7b97\u6cd5\u3002 ID3\u7b97\u6cd5\uff1a 1.\u5bf9\u5f53\u524d\u4f8b\u5b50\u96c6\u5408\uff0c\u8ba1\u7b97\u5404\u5c5e\u6027\u7684\u4fe1\u606f\u589e\u76ca\uff1b 2.\u9009\u62e9\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u5c5e\u6027Ak\uff1b 3.\u628a\u5728Ak\u5904\u53d6\u503c\u76f8\u540c\u7684\u4f8b\u5b50\u5f52\u4e8e\u540c\u4e00\u5b50\u96c6\uff0cAk\u53d6\u51e0\u4e2a\u503c\u5c31\u5f97\u51e0\u4e2a\u5b50\u96c6\uff1b 4.\u5bf9\u65e2\u542b\u6b63\u4f8b\u53c8\u542b\u53cd\u4f8b\u7684\u5b50\u96c6\uff0c\u9012\u5f52\u8c03\u7528\u5efa\u6811\u7b97\u6cd5\uff1b 5.\u82e5\u5b50\u96c6\u4ec5\u542b\u6b63\u4f8b\u6216\u53cd\u4f8b\uff0c\u5bf9\u5e94\u5206\u679d\u6807\u4e0aP\u6216N\uff0c\u8fd4\u56de\u8c03\u7528\u5904\u3002 C4.5\u7b97\u6cd5 \u00b6 C4.5\u7b97\u6cd5\u662fID3\u7b97\u6cd5\u7684\u4e00\u79cd\u6539\u8fdb\u3002 \u6539\u8fdb - \u7528\u4fe1\u606f\u589e\u76ca\u7387\u6765\u9009\u62e9\u5c5e\u6027\uff0c\u514b\u670d\u4e86\u7528\u4fe1\u606f\u589e\u76ca\u9009\u62e9\u5c5e\u6027\u504f\u5411\u9009\u62e9\u591a\u503c\u5c5e\u6027\u7684\u4e0d\u8db3 - \u5728\u6784\u9020\u6811\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u526a\u679d - \u5bf9\u8fde\u7eed\u5c5e\u6027\u8fdb\u884c\u79bb\u6563\u5316 - \u80fd\u591f\u5bf9\u4e0d\u5b8c\u6574\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406 \u4fe1\u606f\u589e\u76ca\u7387 \u8bbe\u6837\u672c\u96c6S\u6309\u79bb\u6563\u5c5e\u6027F\u7684c\u4e2a\u4e0d\u540c\u7684\u53d6\u503c\u5212\u5206\u4e3ac\u4e2a\u5b50\u96c6\uff0c\u5219\u8fd9c\u4e2a\u5b50\u96c6\u7684\u4fe1\u606f\u71b5\u4e3a\uff1a \u4fe1\u606f\u589e\u76ca\u7387\u662f\u4fe1\u606f\u589e\u76ca\u4e0e\u4fe1\u606f\u71b5\u7684\u6bd4\u4f8b\uff0c\u5982\u4e0b\uff1a CART \u00b6","title":"14.\u51b3\u7b56\u6811"},{"location":"machine-learning-interview-qa/14/#14","text":"","title":"14. \u51b3\u7b56\u6811"},{"location":"machine-learning-interview-qa/14/#_1","text":"\u51b3\u7b56\u6811(decision tree)\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\u3002\u51b3\u7b56\u6811\u662f\u7528\u6837\u672c\u7684\u5c5e\u6027\u4f5c\u4e3a\u7ed3\u70b9\uff0c\u7528\u5c5e\u6027\u7684\u53d6\u503c\u4f5c\u4e3a\u5206\u652f\u7684\u6811\u7ed3\u6784\u3002 \u51b3\u7b56\u6811\u7684\u6839\u7ed3\u70b9\u662f\u6240\u6709\u6837\u672c\u4e2d\u4fe1\u606f\u91cf\u6700\u5927\u7684\u5c5e\u6027\u3002\u6811\u7684\u4e2d\u95f4\u7ed3\u70b9\u662f\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6240\u5305\u542b\u7684\u6837\u672c\u5b50\u96c6\u4e2d\u4fe1\u606f\u91cf\u6700\u5927\u7684\u5c5e\u6027\u3002\u51b3\u7b56\u6811\u7684\u53f6\u7ed3\u70b9\u662f\u6837\u672c\u7684\u7c7b\u522b\u503c\u3002\u51b3\u7b56\u6811\u662f\u4e00\u79cd\u77e5\u8bc6\u8868\u793a\u5f62\u5f0f\uff0c\u5b83\u662f\u5bf9\u6240\u6709\u6837\u672c\u6570\u636e\u7684\u9ad8\u5ea6\u6982\u62ec\u51b3\u7b56\u6811\u80fd\u51c6\u786e\u5730\u8bc6\u522b\u6240\u6709\u6837\u672c\u7684\u7c7b\u522b\uff0c\u4e5f\u80fd\u6709\u6548\u5730\u8bc6\u522b\u65b0\u6837\u672c\u7684\u7c7b\u522b\u3002","title":"\u4ec0\u4e48\u662f\u51b3\u7b56\u6811"},{"location":"machine-learning-interview-qa/14/#_2","text":"ID \u5e74\u9f84 \u6709\u5de5\u4f5c \u6709\u81ea\u5df1\u7684\u623f\u5b50 \u4fe1\u8d37\u60c5\u51b5 \u7c7b\u522b(\u662f\u5426\u4e2a\u7ed9\u8d37\u6b3e) 1 \u9752\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 2 \u9752\u5e74 \u5426 \u5426 \u597d \u5426 3 \u9752\u5e74 \u662f \u5426 \u597d \u662f 4 \u9752\u5e74 \u662f \u662f \u4e00\u822c \u662f 5 \u9752\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 6 \u4e2d\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 7 \u4e2d\u5e74 \u5426 \u5426 \u597d \u5426 8 \u4e2d\u5e74 \u662f \u662f \u597d \u662f 9 \u4e2d\u5e74 \u5426 \u662f \u975e\u5e38\u597d \u662f 10 \u4e2d\u5e74 \u5426 \u662f \u975e\u5e38\u597d \u662f 11 \u8001\u5e74 \u5426 \u662f \u975e\u5e38\u597d \u662f 12 \u8001\u5e74 \u5426 \u662f \u597d \u662f 13 \u8001\u5e74 \u662f \u5426 \u597d \u662f 14 \u8001\u5e74 \u662f \u5426 \u975e\u5e38\u597d \u662f 15 \u8001\u5e74 \u5426 \u5426 \u4e00\u822c \u5426 \u4fe1\u606f\u71b5\uff08entropy\uff09\u662f\u7528\u6765\u8861\u91cf\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u51fa\u73b0\u7684\u671f\u671b\u503c\u3002\u5982\u679c\u4fe1\u606f\u7684\u4e0d\u786e\u5b9a\u6027\u8d8a\u5927\uff0c\u71b5\u7684\u503c\u4e5f\u5c31\u8d8a\u5927\uff0c\u51fa\u73b0\u7684\u5404\u79cd\u60c5\u51b5\u4e5f\u5c31\u8d8a\u591a\u3002 \u4fe1\u606f\u589e\u76ca\uff08information gain\uff09\u662f\u6307\u4fe1\u606f\u5212\u5206\u524d\u540e\u7684\u71b5\u7684\u53d8\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\u7531\u4e8e\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\u5206\u5272\u6837\u4f8b\u800c\u5bfc\u81f4\u7684\u671f\u671b\u71b5\u964d\u4f4e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4fe1\u606f\u589e\u76ca\u5c31\u662f\u539f\u6709\u4fe1\u606f\u71b5\u4e0e\u5c5e\u6027\u5212\u5206\u540e\u4fe1\u606f\u71b5\uff08\u9700\u8981\u5bf9\u5212\u5206\u540e\u7684\u4fe1\u606f\u71b5\u53d6\u671f\u671b\u503c\uff09\u7684\u5dee\u503c\uff0c\u5177\u4f53\u8ba1\u7b97\u6cd5\u5982\u4e0b\uff1a","title":"\u7279\u5f81\u9009\u62e9"},{"location":"machine-learning-interview-qa/14/#id3","text":"\u51b3\u7b56\u6811\u7b97\u6cd5ID3\u7684\u57fa\u672c\u601d\u60f3\uff1a \u9996\u5148\u627e\u51fa\u6700\u6709\u5224\u522b\u529b\u7684\u5c5e\u6027\uff0c\u628a\u6837\u4f8b\u5206\u6210\u591a\u4e2a\u5b50\u96c6\uff0c\u6bcf\u4e2a\u5b50\u96c6\u53c8\u9009\u62e9\u6700\u6709\u5224\u522b\u529b\u7684\u5c5e\u6027\u8fdb\u884c\u5212\u5206\uff0c\u4e00\u76f4\u8fdb\u884c\u5230\u6240\u6709\u5b50\u96c6\u4ec5\u5305\u542b\u540c\u4e00\u7c7b\u578b\u7684\u6570\u636e\u4e3a\u6b62\u3002\u6700\u540e\u5f97\u5230\u4e00\u68f5\u51b3\u7b56\u6811\u3002 J.R.Quinlan\u7684\u5de5\u4f5c\u4e3b\u8981\u662f\u5f15\u8fdb\u4e86\u4fe1\u606f\u8bba\u4e2d\u7684\u4fe1\u606f\u589e\u76ca\uff0c\u4ed6\u5c06\u5176\u79f0\u4e3a\u4fe1\u606f\u589e\u76ca\uff08information gain\uff09\uff0c\u4f5c\u4e3a\u5c5e\u6027\u5224\u522b\u80fd\u529b\u7684\u5ea6\u91cf\uff0c\u8bbe\u8ba1\u4e86\u6784\u9020\u51b3\u7b56\u6811\u7684\u9012\u5f52\u7b97\u6cd5\u3002 ID3\u7b97\u6cd5\uff1a 1.\u5bf9\u5f53\u524d\u4f8b\u5b50\u96c6\u5408\uff0c\u8ba1\u7b97\u5404\u5c5e\u6027\u7684\u4fe1\u606f\u589e\u76ca\uff1b 2.\u9009\u62e9\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u5c5e\u6027Ak\uff1b 3.\u628a\u5728Ak\u5904\u53d6\u503c\u76f8\u540c\u7684\u4f8b\u5b50\u5f52\u4e8e\u540c\u4e00\u5b50\u96c6\uff0cAk\u53d6\u51e0\u4e2a\u503c\u5c31\u5f97\u51e0\u4e2a\u5b50\u96c6\uff1b 4.\u5bf9\u65e2\u542b\u6b63\u4f8b\u53c8\u542b\u53cd\u4f8b\u7684\u5b50\u96c6\uff0c\u9012\u5f52\u8c03\u7528\u5efa\u6811\u7b97\u6cd5\uff1b 5.\u82e5\u5b50\u96c6\u4ec5\u542b\u6b63\u4f8b\u6216\u53cd\u4f8b\uff0c\u5bf9\u5e94\u5206\u679d\u6807\u4e0aP\u6216N\uff0c\u8fd4\u56de\u8c03\u7528\u5904\u3002","title":"ID3\u7b97\u6cd5"},{"location":"machine-learning-interview-qa/14/#c45","text":"C4.5\u7b97\u6cd5\u662fID3\u7b97\u6cd5\u7684\u4e00\u79cd\u6539\u8fdb\u3002 \u6539\u8fdb - \u7528\u4fe1\u606f\u589e\u76ca\u7387\u6765\u9009\u62e9\u5c5e\u6027\uff0c\u514b\u670d\u4e86\u7528\u4fe1\u606f\u589e\u76ca\u9009\u62e9\u5c5e\u6027\u504f\u5411\u9009\u62e9\u591a\u503c\u5c5e\u6027\u7684\u4e0d\u8db3 - \u5728\u6784\u9020\u6811\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u526a\u679d - \u5bf9\u8fde\u7eed\u5c5e\u6027\u8fdb\u884c\u79bb\u6563\u5316 - \u80fd\u591f\u5bf9\u4e0d\u5b8c\u6574\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406 \u4fe1\u606f\u589e\u76ca\u7387 \u8bbe\u6837\u672c\u96c6S\u6309\u79bb\u6563\u5c5e\u6027F\u7684c\u4e2a\u4e0d\u540c\u7684\u53d6\u503c\u5212\u5206\u4e3ac\u4e2a\u5b50\u96c6\uff0c\u5219\u8fd9c\u4e2a\u5b50\u96c6\u7684\u4fe1\u606f\u71b5\u4e3a\uff1a \u4fe1\u606f\u589e\u76ca\u7387\u662f\u4fe1\u606f\u589e\u76ca\u4e0e\u4fe1\u606f\u71b5\u7684\u6bd4\u4f8b\uff0c\u5982\u4e0b\uff1a","title":"C4.5\u7b97\u6cd5"},{"location":"machine-learning-interview-qa/14/#cart","text":"","title":"CART"},{"location":"machine-learning-interview-qa/2/","text":"2. \u8bf7\u7b80\u8981\u8bf4\u8bf4\u4e00\u4e2a\u5b8c\u6574\u673a\u5668\u5b66\u4e60\u9879\u76ee\u7684\u6d41\u7a0b \u00b6 1 \u62bd\u8c61\u6210\u6570\u5b66\u95ee\u9898 \u00b6 \u660e\u786e\u95ee\u9898\u662f\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u7684\u7b2c\u4e00\u6b65\u3002\u673a\u5668\u5b66\u4e60\u7684\u8bad\u7ec3\u8fc7\u7a0b\u901a\u5e38\u90fd\u662f\u4e00\u4ef6\u975e\u5e38\u8017\u65f6\u7684\u4e8b\u60c5\uff0c\u80e1\u4e71\u5c1d\u8bd5\u65f6\u95f4\u6210\u672c\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u8fd9\u91cc\u7684\u62bd\u8c61\u6210\u6570\u5b66\u95ee\u9898\uff0c\u6307\u7684\u6211\u4eec\u660e\u786e\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4ec0\u4e48\u6837\u7684\u6570\u636e\uff0c\u76ee\u6807\u662f\u4e00\u4e2a\u5206\u7c7b\u8fd8\u662f\u56de\u5f52\u6216\u8005\u662f\u805a\u7c7b\u7684\u95ee\u9898\uff0c\u5982\u679c\u90fd\u4e0d\u662f\u7684\u8bdd\uff0c\u5982\u679c\u5212\u5f52\u4e3a\u5176\u4e2d\u7684\u67d0\u7c7b\u95ee\u9898\u3002 2 \u83b7\u53d6\u6570\u636e \u00b6 \u6570\u636e\u51b3\u5b9a\u4e86\u673a\u5668\u5b66\u4e60\u7ed3\u679c\u7684\u4e0a\u9650\uff0c\u800c\u7b97\u6cd5\u53ea\u662f\u5c3d\u53ef\u80fd\u903c\u8fd1\u8fd9\u4e2a\u4e0a\u9650\u3002 \u6570\u636e\u8981\u6709\u4ee3\u8868\u6027\uff0c\u5426\u5219\u5fc5\u7136\u4f1a\u8fc7\u62df\u5408\u3002 \u800c\u4e14\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff0c\u6570\u636e\u504f\u659c\u4e0d\u80fd\u8fc7\u4e8e\u4e25\u91cd\uff0c\u4e0d\u540c\u7c7b\u522b\u7684\u6570\u636e\u6570\u91cf\u4e0d\u8981\u6709\u6570\u4e2a\u6570\u91cf\u7ea7\u7684\u5dee\u8ddd\u3002 \u800c\u4e14\u8fd8\u8981\u5bf9\u6570\u636e\u7684\u91cf\u7ea7\u6709\u4e00\u4e2a\u8bc4\u4f30\uff0c\u591a\u5c11\u4e2a\u6837\u672c\uff0c\u591a\u5c11\u4e2a\u7279\u5f81\uff0c\u53ef\u4ee5\u4f30\u7b97\u51fa\u5176\u5bf9\u5185\u5b58\u7684\u6d88\u8017\u7a0b\u5ea6\uff0c\u5224\u65ad\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5185\u5b58\u662f\u5426\u80fd\u591f\u653e\u5f97\u4e0b\u3002\u5982\u679c\u653e\u4e0d\u4e0b\u5c31\u5f97\u8003\u8651\u6539\u8fdb\u7b97\u6cd5\u6216\u8005\u4f7f\u7528\u4e00\u4e9b\u964d\u7ef4\u7684\u6280\u5de7\u4e86\u3002\u5982\u679c\u6570\u636e\u91cf\u5b9e\u5728\u592a\u5927\uff0c\u90a3\u5c31\u8981\u8003\u8651\u5206\u5e03\u5f0f\u4e86\u3002 3 \u7279\u5f81\u9884\u5904\u7406\u4e0e\u7279\u5f81\u9009\u62e9 \u00b6 \u826f\u597d\u7684\u6570\u636e\u8981\u80fd\u591f\u63d0\u53d6\u51fa\u826f\u597d\u7684\u7279\u5f81\u624d\u80fd\u771f\u6b63\u53d1\u6325\u6548\u529b\u3002 \u7279\u5f81\u9884\u5904\u7406\u3001\u6570\u636e\u6e05\u6d17\u662f\u5f88\u5173\u952e\u7684\u6b65\u9aa4\uff0c\u5f80\u5f80\u80fd\u591f\u4f7f\u5f97\u7b97\u6cd5\u7684\u6548\u679c\u548c\u6027\u80fd\u5f97\u5230\u663e\u8457\u63d0\u9ad8\u3002\u5f52\u4e00\u5316\u3001\u79bb\u6563\u5316\u3001\u56e0\u5b50\u5316\u3001\u7f3a\u5931\u503c\u5904\u7406\u3001\u53bb\u9664\u5171\u7ebf\u6027\u7b49\uff0c\u6570\u636e\u6316\u6398\u8fc7\u7a0b\u4e2d\u5f88\u591a\u65f6\u95f4\u5c31\u82b1\u5728\u5b83\u4eec\u4e0a\u9762\u3002\u8fd9\u4e9b\u5de5\u4f5c\u7b80\u5355\u53ef\u590d\u5236\uff0c\u6536\u76ca\u7a33\u5b9a\u53ef\u9884\u671f\uff0c\u662f\u673a\u5668\u5b66\u4e60\u7684\u57fa\u7840\u5fc5\u5907\u6b65\u9aa4\u3002 \u7b5b\u9009\u51fa\u663e\u8457\u7279\u5f81\u3001\u6452\u5f03\u975e\u663e\u8457\u7279\u5f81\uff0c\u9700\u8981\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08\u53cd\u590d\u7406\u89e3\u4e1a\u52a1\u3002\u8fd9\u5bf9\u5f88\u591a\u7ed3\u679c\u6709\u51b3\u5b9a\u6027\u7684\u5f71\u54cd\u3002\u7279\u5f81\u9009\u62e9\u597d\u4e86\uff0c\u975e\u5e38\u7b80\u5355\u7684\u7b97\u6cd5\u4e5f\u80fd\u5f97\u51fa\u826f\u597d\u3001\u7a33\u5b9a\u7684\u7ed3\u679c\u3002\u8fd9\u9700\u8981\u8fd0\u7528\u7279\u5f81\u6709\u6548\u6027\u5206\u6790\u7684\u76f8\u5173\u6280\u672f\uff0c\u5982\u76f8\u5173\u7cfb\u6570\u3001\u5361\u65b9\u68c0\u9a8c\u3001\u5e73\u5747\u4e92\u4fe1\u606f\u3001\u6761\u4ef6\u71b5\u3001\u540e\u9a8c\u6982\u7387\u3001\u903b\u8f91\u56de\u5f52\u6743\u91cd\u7b49\u65b9\u6cd5\u3002 4 \u8bad\u7ec3\u6a21\u578b\u4e0e\u8c03\u4f18 \u00b6 \u76f4\u5230\u8fd9\u4e00\u6b65\u624d\u7528\u5230\u6211\u4eec\u4e0a\u9762\u8bf4\u7684\u7b97\u6cd5\u8fdb\u884c\u8bad\u7ec3\u3002\u73b0\u5728\u5f88\u591a\u7b97\u6cd5\u90fd\u80fd\u591f\u5c01\u88c5\u6210\u9ed1\u76d2\u4f9b\u4eba\u4f7f\u7528\u3002\u4f46\u662f\u771f\u6b63\u8003\u9a8c\u6c34\u5e73\u7684\u662f\u8c03\u6574\u8fd9\u4e9b\u7b97\u6cd5\u7684\uff08\u8d85\uff09\u53c2\u6570\uff0c\u4f7f\u5f97\u7ed3\u679c\u53d8\u5f97\u66f4\u52a0\u4f18\u826f\u3002\u8fd9\u9700\u8981\u6211\u4eec\u5bf9\u7b97\u6cd5\u7684\u539f\u7406\u6709\u6df1\u5165\u7684\u7406\u89e3\u3002\u7406\u89e3\u8d8a\u6df1\u5165\uff0c\u5c31\u8d8a\u80fd\u53d1\u73b0\u95ee\u9898\u7684\u75c7\u7ed3\uff0c\u63d0\u51fa\u826f\u597d\u7684\u8c03\u4f18\u65b9\u6848\u3002 5 \u6a21\u578b\u8bca\u65ad \u00b6 \u5982\u4f55\u786e\u5b9a\u6a21\u578b\u8c03\u4f18\u7684\u65b9\u5411\u4e0e\u601d\u8def\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u5bf9\u6a21\u578b\u8fdb\u884c\u8bca\u65ad\u7684\u6280\u672f\u3002 \u8fc7\u62df\u5408\u3001\u6b20\u62df\u5408 \u5224\u65ad\u662f\u6a21\u578b\u8bca\u65ad\u4e2d\u81f3\u5173\u91cd\u8981\u7684\u4e00\u6b65\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u5982\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u7ed8\u5236\u5b66\u4e60\u66f2\u7ebf\u7b49\u3002\u8fc7\u62df\u5408\u7684\u57fa\u672c\u8c03\u4f18\u601d\u8def\u662f\u589e\u52a0\u6570\u636e\u91cf\uff0c\u964d\u4f4e\u6a21\u578b\u590d\u6742\u5ea6\u3002\u6b20\u62df\u5408\u7684\u57fa\u672c\u8c03\u4f18\u601d\u8def\u662f\u63d0\u9ad8\u7279\u5f81\u6570\u91cf\u548c\u8d28\u91cf\uff0c\u589e\u52a0\u6a21\u578b\u590d\u6742\u5ea6\u3002 \u8bef\u5dee\u5206\u6790 \u4e5f\u662f\u673a\u5668\u5b66\u4e60\u81f3\u5173\u91cd\u8981\u7684\u6b65\u9aa4\u3002\u901a\u8fc7\u89c2\u5bdf\u8bef\u5dee\u6837\u672c\uff0c\u5168\u9762\u5206\u6790\u8bef\u5dee\u4ea7\u751f\u8bef\u5dee\u7684\u539f\u56e0:\u662f\u53c2\u6570\u7684\u95ee\u9898\u8fd8\u662f\u7b97\u6cd5\u9009\u62e9\u7684\u95ee\u9898\uff0c\u662f\u7279\u5f81\u7684\u95ee\u9898\u8fd8\u662f\u6570\u636e\u672c\u8eab\u7684\u95ee\u9898\u2026\u2026 \u8bca\u65ad\u540e\u7684\u6a21\u578b\u9700\u8981\u8fdb\u884c\u8c03\u4f18\uff0c\u8c03\u4f18\u540e\u7684\u65b0\u6a21\u578b\u9700\u8981\u91cd\u65b0\u8fdb\u884c\u8bca\u65ad\uff0c\u8fd9\u662f\u4e00\u4e2a\u53cd\u590d\u8fed\u4ee3\u4e0d\u65ad\u903c\u8fd1\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u4e0d\u65ad\u5730\u5c1d\u8bd5\uff0c \u8fdb\u800c\u8fbe\u5230\u6700\u4f18\u72b6\u6001\u3002 6 \u6a21\u578b\u878d\u5408 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u6a21\u578b\u878d\u5408\u540e\u90fd\u80fd\u4f7f\u5f97\u6548\u679c\u6709\u4e00\u5b9a\u63d0\u5347\u3002\u800c\u4e14\u6548\u679c\u5f88\u597d\u3002 \u5de5\u7a0b\u4e0a\uff0c\u4e3b\u8981\u63d0\u5347\u7b97\u6cd5\u51c6\u786e\u5ea6\u7684\u65b9\u6cd5\u662f\u5206\u522b\u5728\u6a21\u578b\u7684\u524d\u7aef\uff08\u7279\u5f81\u6e05\u6d17\u548c\u9884\u5904\u7406\uff0c\u4e0d\u540c\u7684\u91c7\u6837\u6a21\u5f0f\uff09\u4e0e\u540e\u7aef\uff08\u6a21\u578b\u878d\u5408\uff09\u4e0a\u4e0b\u529f\u592b\u3002\u56e0\u4e3a\u4ed6\u4eec\u6bd4\u8f83\u6807\u51c6\u53ef\u590d\u5236\uff0c\u6548\u679c\u6bd4\u8f83\u7a33\u5b9a\u3002\u800c\u76f4\u63a5\u8c03\u53c2\u7684\u5de5\u4f5c\u4e0d\u4f1a\u5f88\u591a\uff0c\u6bd5\u7adf\u5927\u91cf\u6570\u636e\u8bad\u7ec3\u8d77\u6765\u592a\u6162\u4e86\uff0c\u800c\u4e14\u6548\u679c\u96be\u4ee5\u4fdd\u8bc1\u3002 7 \u4e0a\u7ebf\u8fd0\u884c \u00b6 \u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u4e3b\u8981\u8ddf\u5de5\u7a0b\u5b9e\u73b0\u7684\u76f8\u5173\u6027\u6bd4\u8f83\u5927\u3002\u5de5\u7a0b\u4e0a\u662f\u7ed3\u679c\u5bfc\u5411\uff0c\u6a21\u578b\u5728\u7ebf\u4e0a\u8fd0\u884c\u7684\u6548\u679c\u76f4\u63a5\u51b3\u5b9a\u6a21\u578b\u7684\u6210\u8d25\u3002 \u4e0d\u5355\u7eaf\u5305\u62ec\u5176\u51c6\u786e\u7a0b\u5ea6\u3001\u8bef\u5dee\u7b49\u60c5\u51b5\uff0c\u8fd8\u5305\u62ec\u5176\u8fd0\u884c\u7684\u901f\u5ea6(\u65f6\u95f4\u590d\u6742\u5ea6)\u3001\u8d44\u6e90\u6d88\u8017\u7a0b\u5ea6\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\uff09\u3001\u7a33\u5b9a\u6027\u662f\u5426\u53ef\u63a5\u53d7\u3002 \u8fd9\u4e9b\u5de5\u4f5c\u6d41\u7a0b\u4e3b\u8981\u662f\u5de5\u7a0b\u5b9e\u8df5\u4e0a\u603b\u7ed3\u51fa\u7684\u4e00\u4e9b\u7ecf\u9a8c\u3002\u5e76\u4e0d\u662f\u6bcf\u4e2a\u9879\u76ee\u90fd\u5305\u542b\u5b8c\u6574\u7684\u4e00\u4e2a\u6d41\u7a0b\u3002\u8fd9\u91cc\u7684\u90e8\u5206\u53ea\u662f\u4e00\u4e2a\u6307\u5bfc\u6027\u7684\u8bf4\u660e\uff0c\u53ea\u6709\u5927\u5bb6\u81ea\u5df1\u591a\u5b9e\u8df5\uff0c\u591a\u79ef\u7d2f\u9879\u76ee\u7ecf\u9a8c\uff0c\u624d\u4f1a\u6709\u81ea\u5df1\u66f4\u6df1\u523b\u7684\u8ba4\u8bc6\u3002","title":"2.\u8bf7\u7b80\u8981\u8bf4\u8bf4\u4e00\u4e2a\u5b8c\u6574\u673a\u5668\u5b66\u4e60\u9879\u76ee\u7684\u6d41\u7a0b"},{"location":"machine-learning-interview-qa/2/#2","text":"","title":"2. \u8bf7\u7b80\u8981\u8bf4\u8bf4\u4e00\u4e2a\u5b8c\u6574\u673a\u5668\u5b66\u4e60\u9879\u76ee\u7684\u6d41\u7a0b"},{"location":"machine-learning-interview-qa/2/#1","text":"\u660e\u786e\u95ee\u9898\u662f\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u7684\u7b2c\u4e00\u6b65\u3002\u673a\u5668\u5b66\u4e60\u7684\u8bad\u7ec3\u8fc7\u7a0b\u901a\u5e38\u90fd\u662f\u4e00\u4ef6\u975e\u5e38\u8017\u65f6\u7684\u4e8b\u60c5\uff0c\u80e1\u4e71\u5c1d\u8bd5\u65f6\u95f4\u6210\u672c\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u8fd9\u91cc\u7684\u62bd\u8c61\u6210\u6570\u5b66\u95ee\u9898\uff0c\u6307\u7684\u6211\u4eec\u660e\u786e\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4ec0\u4e48\u6837\u7684\u6570\u636e\uff0c\u76ee\u6807\u662f\u4e00\u4e2a\u5206\u7c7b\u8fd8\u662f\u56de\u5f52\u6216\u8005\u662f\u805a\u7c7b\u7684\u95ee\u9898\uff0c\u5982\u679c\u90fd\u4e0d\u662f\u7684\u8bdd\uff0c\u5982\u679c\u5212\u5f52\u4e3a\u5176\u4e2d\u7684\u67d0\u7c7b\u95ee\u9898\u3002","title":"1 \u62bd\u8c61\u6210\u6570\u5b66\u95ee\u9898"},{"location":"machine-learning-interview-qa/2/#2_1","text":"\u6570\u636e\u51b3\u5b9a\u4e86\u673a\u5668\u5b66\u4e60\u7ed3\u679c\u7684\u4e0a\u9650\uff0c\u800c\u7b97\u6cd5\u53ea\u662f\u5c3d\u53ef\u80fd\u903c\u8fd1\u8fd9\u4e2a\u4e0a\u9650\u3002 \u6570\u636e\u8981\u6709\u4ee3\u8868\u6027\uff0c\u5426\u5219\u5fc5\u7136\u4f1a\u8fc7\u62df\u5408\u3002 \u800c\u4e14\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff0c\u6570\u636e\u504f\u659c\u4e0d\u80fd\u8fc7\u4e8e\u4e25\u91cd\uff0c\u4e0d\u540c\u7c7b\u522b\u7684\u6570\u636e\u6570\u91cf\u4e0d\u8981\u6709\u6570\u4e2a\u6570\u91cf\u7ea7\u7684\u5dee\u8ddd\u3002 \u800c\u4e14\u8fd8\u8981\u5bf9\u6570\u636e\u7684\u91cf\u7ea7\u6709\u4e00\u4e2a\u8bc4\u4f30\uff0c\u591a\u5c11\u4e2a\u6837\u672c\uff0c\u591a\u5c11\u4e2a\u7279\u5f81\uff0c\u53ef\u4ee5\u4f30\u7b97\u51fa\u5176\u5bf9\u5185\u5b58\u7684\u6d88\u8017\u7a0b\u5ea6\uff0c\u5224\u65ad\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5185\u5b58\u662f\u5426\u80fd\u591f\u653e\u5f97\u4e0b\u3002\u5982\u679c\u653e\u4e0d\u4e0b\u5c31\u5f97\u8003\u8651\u6539\u8fdb\u7b97\u6cd5\u6216\u8005\u4f7f\u7528\u4e00\u4e9b\u964d\u7ef4\u7684\u6280\u5de7\u4e86\u3002\u5982\u679c\u6570\u636e\u91cf\u5b9e\u5728\u592a\u5927\uff0c\u90a3\u5c31\u8981\u8003\u8651\u5206\u5e03\u5f0f\u4e86\u3002","title":"2 \u83b7\u53d6\u6570\u636e"},{"location":"machine-learning-interview-qa/2/#3","text":"\u826f\u597d\u7684\u6570\u636e\u8981\u80fd\u591f\u63d0\u53d6\u51fa\u826f\u597d\u7684\u7279\u5f81\u624d\u80fd\u771f\u6b63\u53d1\u6325\u6548\u529b\u3002 \u7279\u5f81\u9884\u5904\u7406\u3001\u6570\u636e\u6e05\u6d17\u662f\u5f88\u5173\u952e\u7684\u6b65\u9aa4\uff0c\u5f80\u5f80\u80fd\u591f\u4f7f\u5f97\u7b97\u6cd5\u7684\u6548\u679c\u548c\u6027\u80fd\u5f97\u5230\u663e\u8457\u63d0\u9ad8\u3002\u5f52\u4e00\u5316\u3001\u79bb\u6563\u5316\u3001\u56e0\u5b50\u5316\u3001\u7f3a\u5931\u503c\u5904\u7406\u3001\u53bb\u9664\u5171\u7ebf\u6027\u7b49\uff0c\u6570\u636e\u6316\u6398\u8fc7\u7a0b\u4e2d\u5f88\u591a\u65f6\u95f4\u5c31\u82b1\u5728\u5b83\u4eec\u4e0a\u9762\u3002\u8fd9\u4e9b\u5de5\u4f5c\u7b80\u5355\u53ef\u590d\u5236\uff0c\u6536\u76ca\u7a33\u5b9a\u53ef\u9884\u671f\uff0c\u662f\u673a\u5668\u5b66\u4e60\u7684\u57fa\u7840\u5fc5\u5907\u6b65\u9aa4\u3002 \u7b5b\u9009\u51fa\u663e\u8457\u7279\u5f81\u3001\u6452\u5f03\u975e\u663e\u8457\u7279\u5f81\uff0c\u9700\u8981\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08\u53cd\u590d\u7406\u89e3\u4e1a\u52a1\u3002\u8fd9\u5bf9\u5f88\u591a\u7ed3\u679c\u6709\u51b3\u5b9a\u6027\u7684\u5f71\u54cd\u3002\u7279\u5f81\u9009\u62e9\u597d\u4e86\uff0c\u975e\u5e38\u7b80\u5355\u7684\u7b97\u6cd5\u4e5f\u80fd\u5f97\u51fa\u826f\u597d\u3001\u7a33\u5b9a\u7684\u7ed3\u679c\u3002\u8fd9\u9700\u8981\u8fd0\u7528\u7279\u5f81\u6709\u6548\u6027\u5206\u6790\u7684\u76f8\u5173\u6280\u672f\uff0c\u5982\u76f8\u5173\u7cfb\u6570\u3001\u5361\u65b9\u68c0\u9a8c\u3001\u5e73\u5747\u4e92\u4fe1\u606f\u3001\u6761\u4ef6\u71b5\u3001\u540e\u9a8c\u6982\u7387\u3001\u903b\u8f91\u56de\u5f52\u6743\u91cd\u7b49\u65b9\u6cd5\u3002","title":"3 \u7279\u5f81\u9884\u5904\u7406\u4e0e\u7279\u5f81\u9009\u62e9"},{"location":"machine-learning-interview-qa/2/#4","text":"\u76f4\u5230\u8fd9\u4e00\u6b65\u624d\u7528\u5230\u6211\u4eec\u4e0a\u9762\u8bf4\u7684\u7b97\u6cd5\u8fdb\u884c\u8bad\u7ec3\u3002\u73b0\u5728\u5f88\u591a\u7b97\u6cd5\u90fd\u80fd\u591f\u5c01\u88c5\u6210\u9ed1\u76d2\u4f9b\u4eba\u4f7f\u7528\u3002\u4f46\u662f\u771f\u6b63\u8003\u9a8c\u6c34\u5e73\u7684\u662f\u8c03\u6574\u8fd9\u4e9b\u7b97\u6cd5\u7684\uff08\u8d85\uff09\u53c2\u6570\uff0c\u4f7f\u5f97\u7ed3\u679c\u53d8\u5f97\u66f4\u52a0\u4f18\u826f\u3002\u8fd9\u9700\u8981\u6211\u4eec\u5bf9\u7b97\u6cd5\u7684\u539f\u7406\u6709\u6df1\u5165\u7684\u7406\u89e3\u3002\u7406\u89e3\u8d8a\u6df1\u5165\uff0c\u5c31\u8d8a\u80fd\u53d1\u73b0\u95ee\u9898\u7684\u75c7\u7ed3\uff0c\u63d0\u51fa\u826f\u597d\u7684\u8c03\u4f18\u65b9\u6848\u3002","title":"4 \u8bad\u7ec3\u6a21\u578b\u4e0e\u8c03\u4f18"},{"location":"machine-learning-interview-qa/2/#5","text":"\u5982\u4f55\u786e\u5b9a\u6a21\u578b\u8c03\u4f18\u7684\u65b9\u5411\u4e0e\u601d\u8def\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u5bf9\u6a21\u578b\u8fdb\u884c\u8bca\u65ad\u7684\u6280\u672f\u3002 \u8fc7\u62df\u5408\u3001\u6b20\u62df\u5408 \u5224\u65ad\u662f\u6a21\u578b\u8bca\u65ad\u4e2d\u81f3\u5173\u91cd\u8981\u7684\u4e00\u6b65\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u5982\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u7ed8\u5236\u5b66\u4e60\u66f2\u7ebf\u7b49\u3002\u8fc7\u62df\u5408\u7684\u57fa\u672c\u8c03\u4f18\u601d\u8def\u662f\u589e\u52a0\u6570\u636e\u91cf\uff0c\u964d\u4f4e\u6a21\u578b\u590d\u6742\u5ea6\u3002\u6b20\u62df\u5408\u7684\u57fa\u672c\u8c03\u4f18\u601d\u8def\u662f\u63d0\u9ad8\u7279\u5f81\u6570\u91cf\u548c\u8d28\u91cf\uff0c\u589e\u52a0\u6a21\u578b\u590d\u6742\u5ea6\u3002 \u8bef\u5dee\u5206\u6790 \u4e5f\u662f\u673a\u5668\u5b66\u4e60\u81f3\u5173\u91cd\u8981\u7684\u6b65\u9aa4\u3002\u901a\u8fc7\u89c2\u5bdf\u8bef\u5dee\u6837\u672c\uff0c\u5168\u9762\u5206\u6790\u8bef\u5dee\u4ea7\u751f\u8bef\u5dee\u7684\u539f\u56e0:\u662f\u53c2\u6570\u7684\u95ee\u9898\u8fd8\u662f\u7b97\u6cd5\u9009\u62e9\u7684\u95ee\u9898\uff0c\u662f\u7279\u5f81\u7684\u95ee\u9898\u8fd8\u662f\u6570\u636e\u672c\u8eab\u7684\u95ee\u9898\u2026\u2026 \u8bca\u65ad\u540e\u7684\u6a21\u578b\u9700\u8981\u8fdb\u884c\u8c03\u4f18\uff0c\u8c03\u4f18\u540e\u7684\u65b0\u6a21\u578b\u9700\u8981\u91cd\u65b0\u8fdb\u884c\u8bca\u65ad\uff0c\u8fd9\u662f\u4e00\u4e2a\u53cd\u590d\u8fed\u4ee3\u4e0d\u65ad\u903c\u8fd1\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u4e0d\u65ad\u5730\u5c1d\u8bd5\uff0c \u8fdb\u800c\u8fbe\u5230\u6700\u4f18\u72b6\u6001\u3002","title":"5 \u6a21\u578b\u8bca\u65ad"},{"location":"machine-learning-interview-qa/2/#6","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u6a21\u578b\u878d\u5408\u540e\u90fd\u80fd\u4f7f\u5f97\u6548\u679c\u6709\u4e00\u5b9a\u63d0\u5347\u3002\u800c\u4e14\u6548\u679c\u5f88\u597d\u3002 \u5de5\u7a0b\u4e0a\uff0c\u4e3b\u8981\u63d0\u5347\u7b97\u6cd5\u51c6\u786e\u5ea6\u7684\u65b9\u6cd5\u662f\u5206\u522b\u5728\u6a21\u578b\u7684\u524d\u7aef\uff08\u7279\u5f81\u6e05\u6d17\u548c\u9884\u5904\u7406\uff0c\u4e0d\u540c\u7684\u91c7\u6837\u6a21\u5f0f\uff09\u4e0e\u540e\u7aef\uff08\u6a21\u578b\u878d\u5408\uff09\u4e0a\u4e0b\u529f\u592b\u3002\u56e0\u4e3a\u4ed6\u4eec\u6bd4\u8f83\u6807\u51c6\u53ef\u590d\u5236\uff0c\u6548\u679c\u6bd4\u8f83\u7a33\u5b9a\u3002\u800c\u76f4\u63a5\u8c03\u53c2\u7684\u5de5\u4f5c\u4e0d\u4f1a\u5f88\u591a\uff0c\u6bd5\u7adf\u5927\u91cf\u6570\u636e\u8bad\u7ec3\u8d77\u6765\u592a\u6162\u4e86\uff0c\u800c\u4e14\u6548\u679c\u96be\u4ee5\u4fdd\u8bc1\u3002","title":"6 \u6a21\u578b\u878d\u5408"},{"location":"machine-learning-interview-qa/2/#7","text":"\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u4e3b\u8981\u8ddf\u5de5\u7a0b\u5b9e\u73b0\u7684\u76f8\u5173\u6027\u6bd4\u8f83\u5927\u3002\u5de5\u7a0b\u4e0a\u662f\u7ed3\u679c\u5bfc\u5411\uff0c\u6a21\u578b\u5728\u7ebf\u4e0a\u8fd0\u884c\u7684\u6548\u679c\u76f4\u63a5\u51b3\u5b9a\u6a21\u578b\u7684\u6210\u8d25\u3002 \u4e0d\u5355\u7eaf\u5305\u62ec\u5176\u51c6\u786e\u7a0b\u5ea6\u3001\u8bef\u5dee\u7b49\u60c5\u51b5\uff0c\u8fd8\u5305\u62ec\u5176\u8fd0\u884c\u7684\u901f\u5ea6(\u65f6\u95f4\u590d\u6742\u5ea6)\u3001\u8d44\u6e90\u6d88\u8017\u7a0b\u5ea6\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\uff09\u3001\u7a33\u5b9a\u6027\u662f\u5426\u53ef\u63a5\u53d7\u3002 \u8fd9\u4e9b\u5de5\u4f5c\u6d41\u7a0b\u4e3b\u8981\u662f\u5de5\u7a0b\u5b9e\u8df5\u4e0a\u603b\u7ed3\u51fa\u7684\u4e00\u4e9b\u7ecf\u9a8c\u3002\u5e76\u4e0d\u662f\u6bcf\u4e2a\u9879\u76ee\u90fd\u5305\u542b\u5b8c\u6574\u7684\u4e00\u4e2a\u6d41\u7a0b\u3002\u8fd9\u91cc\u7684\u90e8\u5206\u53ea\u662f\u4e00\u4e2a\u6307\u5bfc\u6027\u7684\u8bf4\u660e\uff0c\u53ea\u6709\u5927\u5bb6\u81ea\u5df1\u591a\u5b9e\u8df5\uff0c\u591a\u79ef\u7d2f\u9879\u76ee\u7ecf\u9a8c\uff0c\u624d\u4f1a\u6709\u81ea\u5df1\u66f4\u6df1\u523b\u7684\u8ba4\u8bc6\u3002","title":"7 \u4e0a\u7ebf\u8fd0\u884c"},{"location":"machine-learning-interview-qa/3/","text":"3. \u67d0\u8d85\u5e02\u7814\u7a76\u9500\u552e\u8bb0\u5f55\u53d1\u73b0\u4e70\u5564\u9152\u7684\u4eba\u5f88\u5927\u6982\u7387\u4e5f\u4f1a\u4e70\u5c3f\u5e03\uff0c\u8fd9\u5c5e\u4e8e\u6570\u636e\u6316\u6398\u7684\u54ea\u7c7b\u95ee\u9898? \u00b6 A \u5173\u8054\u89c4\u5219\u53d1\u73b0 B \u805a\u7c7b C \u5206\u7c7b D \u81ea\u7136\u8bed\u8a00\u5904\u7406 A \u5173\u8054\u89c4\u5219\u53d1\u73b0 \u00b6 \u5173\u8054\u89c4\u5219\u5c31\u662f\u6709\u5173\u8054\u7684\u89c4\u5219\uff0c\u5f62\u5f0f\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u975e\u7a7a\u96c6\u5408X\u3001Y\uff0c\u5982\u679c\u6709X\u2192Y\uff0c\u5c31\u8bf4X\u2192Y\u662f\u4e00\u6761\u5173\u8054\u89c4\u5219\u3002\u5728\u9898\u76ee\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8d2d\u4e70\u5564\u9152\u5c31\u4e00\u5b9a\u4f1a\u8d2d\u4e70\u5c3f\u5e03\uff0c{\u5564\u9152}\u2192{\u5c3f\u5e03}\u5c31\u662f\u4e00\u6761\u5173\u8054\u89c4\u5219\u3002\u5173\u8054\u89c4\u5219\u7684\u5f3a\u5ea6\u7528\u652f\u6301\u5ea6(support)\u548c\u81ea\u4fe1\u5ea6(confidence)\u6765\u63cf\u8ff0\u3002 \u652f\u6301\u5ea6\u7684\u5b9a\u4e49\uff1asupport(X\u2192Y) = |X\u4ea4Y|/N=\u96c6\u5408X\u4e0e\u96c6\u5408Y\u4e2d\u7684\u9879\u5728\u4e00\u6761\u8bb0\u5f55\u4e2d\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u6570\u636e\u8bb0\u5f55\u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff1asupport({\u5564\u9152}\u2192{\u5c3f\u5e03}) = \u5564\u9152\u548c\u5c3f\u5e03\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u6570\u636e\u8bb0\u5f55\u6570 \u81ea\u4fe1\u5ea6\u7684\u5b9a\u4e49\uff1aconfidence(X\u2192Y) = |X\u4ea4Y|/|X| = \u96c6\u5408X\u4e0e\u96c6\u5408Y\u4e2d\u7684\u9879\u5728\u4e00\u6761\u8bb0\u5f55\u4e2d\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u96c6\u5408X\u51fa\u73b0\u7684\u4e2a\u6570 \u3002\u4f8b\u5982\uff1aconfidence({\u5564\u9152}\u2192{\u5c3f\u5e03}) = \u5564\u9152\u548c\u5c3f\u5e03\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u5564\u9152\u51fa\u73b0\u7684\u6b21\u6570\u3002 confidence({\u5c3f\u5e03}\u2192{\u5564\u9152}) = \u5564\u9152\u548c\u5c3f\u5e03\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u5c3f\u5e03\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u8fd9\u91cc\u5b9a\u4e49\u7684\u652f\u6301\u5ea6\u548c\u81ea\u4fe1\u5ea6\u90fd\u662f\u76f8\u5bf9\u7684\u652f\u6301\u5ea6\u548c\u81ea\u4fe1\u5ea6\uff0c\u4e0d\u662f\u7edd\u5bf9\u652f\u6301\u5ea6\uff0c\u7edd\u5bf9\u652f\u6301\u5ea6abs_support = \u6570\u636e\u8bb0\u5f55\u6570N*support\u3002 \u652f\u6301\u5ea6\u548c\u81ea\u4fe1\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u89c4\u5219\u8d8a\u5f3a\uff0c\u5173\u8054\u89c4\u5219\u6316\u6398\u5c31\u662f\u6316\u6398\u51fa\u6ee1\u8db3\u4e00\u5b9a\u5f3a\u5ea6\u7684\u89c4\u5219\u3002 B \u805a\u7c7b \u00b6 Clustering(\u805a\u7c7b)\uff1a \u7b80\u5355\u5730\u8bf4\u5c31\u662f\u628a\u76f8\u4f3c\u7684\u4e1c\u897f\u5206\u5230\u4e00\u7ec4\uff0c\u805a\u7c7b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u67d0\u4e00\u7c7b\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u76ee\u6807\u53ea\u662f\u628a\u76f8\u4f3c\u7684\u4e1c\u897f\u805a\u5230\u4e00\u8d77\uff0c\u56e0\u6b64\uff0c\u4e00\u4e2a\u805a\u7c7b\u7b97\u6cd5\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u5982\u4f55\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u5c31\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\u4e86\uff0c\u56e0\u6b64 clustering \u901a\u5e38\u5e76\u4e0d\u9700\u8981\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u5b66\u4e60\uff0c\u8fd9\u5728Machine Learning\u4e2d\u88ab\u79f0\u4f5cunsupervised learning (\u65e0\u76d1\u7763\u5b66\u4e60)\u3002\u805a\u7c7b\u5206\u6790\u76ee\u7684\u5728\u4e8e\u5c06\u76f8\u4f3c\u7684\u4e8b\u7269\u5f52\u7c7b\uff0c\u540c\u4e00\u7c7b\u4e2d\u7684\u4e2a\u4f53\u6709\u8f83\u5927\u7684\u76f8\u4f3c\u6027\uff0c\u4e0d\u540c\u7c7b\u7684\u4e2a\u4f53\u5dee\u5f02\u6027\u5f88\u5927\u3002 C \u5206\u7c7b \u00b6 Classification (\u5206\u7c7b)\uff1a \u4e00\u4e2a classifier\u4f1a\u4ece\u5b83\u5f97\u5230\u7684\u8bad\u7ec3\u96c6\u4e2d\u8fdb\u884c\u201c\u5b66\u4e60\u201d\uff0c\u4ece\u800c\u5177\u5907\u5bf9\u672a\u77e5\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u7684\u80fd\u529b\uff0c\u8fd9\u79cd\u63d0\u4f9b\u8bad\u7ec3\u6570\u636e\u7684\u8fc7\u7a0b\u901a\u5e38\u53eb\u505a supervised learning (\u76d1\u7763\u5b66\u4e60)\u3002\u6240\u8c13\u5206\u7c7b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6839\u636e\u6587\u672c\u7684\u7279\u5f81\u6216\u5c5e\u6027\uff0c\u5212\u5206\u5230\u5df2\u6709\u7684\u7c7b\u522b\u4e2d\u3002 \u5e38\u7528\u7684\u5206\u7c7b\u7b97\u6cd5\u5305\u62ec\uff1a\u51b3\u7b56\u6811\u5206\u7c7b\u6cd5\uff0c\u6734\u7d20\u7684\u8d1d\u53f6\u65af\u5206\u7c7b\u7b97\u6cd5(native Bayesian classifier)\u3001\u57fa\u4e8e\u652f\u6301\u5411\u91cf\u673a(SVM)\u7684\u5206\u7c7b\u5668\uff0c\u795e\u7ecf\u7f51\u7edc\u6cd5\uff0ck-\u6700\u8fd1\u90bb\u6cd5(k-nearest neighbor\uff0ckNN)\uff0c\u6a21\u7cca\u5206\u7c7b\u6cd5\u7b49\u3002\u5206\u7c7b\u4f5c\u4e3a\u4e00\u79cd\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\uff0c\u8981\u6c42\u5fc5\u987b\u4e8b\u5148\u660e\u786e\u77e5\u9053\u5404\u4e2a\u7c7b\u522b\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u65ad\u8a00\u6240\u6709\u5f85\u5206\u7c7b\u9879\u90fd\u6709\u4e00\u4e2a\u7c7b\u522b\u4e0e\u4e4b\u5bf9\u5e94\u3002\u4f46\u662f\u5f88\u591a\u65f6\u5019\u4e0a\u8ff0\u6761\u4ef6\u5f97\u4e0d\u5230\u6ee1\u8db3\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u6d77\u91cf\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u901a\u8fc7\u9884\u5904\u7406\u4f7f\u5f97\u6570\u636e\u6ee1\u8db3\u5206\u7c7b\u7b97\u6cd5\u7684\u8981\u6c42\uff0c\u5219\u4ee3\u4ef7\u975e\u5e38\u5927\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u805a\u7c7b\u7b97\u6cd5\u3002 D \u81ea\u7136\u8bed\u8a00\u5904\u7406 \u00b6 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u4e3b\u8981\u5e94\u7528\u8303\u7574\u5305\u62ec\uff1a\u6587\u672c\u6717\u8bfb\uff08Text to speech\uff09/\u8bed\u97f3\u5408\u6210\uff08Speech synthesis\uff09 \u8bed\u97f3\u8bc6\u522b\uff08Speech recognition\uff09 \u4e2d\u6587\u81ea\u52a8\u5206\u8bcd\uff08Chinese word segmentation\uff09 \u8bcd\u6027\u6807\u6ce8\uff08Part-of-speech tagging\uff09 \u53e5\u6cd5\u5206\u6790\uff08Parsing\uff09 \u81ea\u7136\u8bed\u8a00\u751f\u6210\uff08Natural language generation\uff09 \u6587\u672c\u5206\u7c7b\uff08Text categorization\uff09 \u4fe1\u606f\u68c0\u7d22\uff08Information retrieval\uff09 \u4fe1\u606f\u62bd\u53d6\uff08Information extraction\uff09 \u6587\u5b57\u6821\u5bf9\uff08Text-proofing\uff09 \u95ee\u7b54\u7cfb\u7edf\uff08Question answering\uff09\u7b49 \u9009\u62e9A\uff0c\u5173\u8054\u89c4\u5219\u53d1\u73b0","title":"3.\u67d0\u8d85\u5e02\u7814\u7a76\u9500\u552e\u8bb0\u5f55\u53d1\u73b0\u4e70\u5564\u9152\u7684\u4eba\u5f88\u5927\u6982\u7387\u4e5f\u4f1a\u4e70\u5c3f\u5e03\uff0c\u8fd9\u5c5e\u4e8e\u6570\u636e\u6316\u6398\u7684\u54ea\u7c7b\u95ee\u9898"},{"location":"machine-learning-interview-qa/3/#3","text":"A \u5173\u8054\u89c4\u5219\u53d1\u73b0 B \u805a\u7c7b C \u5206\u7c7b D \u81ea\u7136\u8bed\u8a00\u5904\u7406","title":"3. \u67d0\u8d85\u5e02\u7814\u7a76\u9500\u552e\u8bb0\u5f55\u53d1\u73b0\u4e70\u5564\u9152\u7684\u4eba\u5f88\u5927\u6982\u7387\u4e5f\u4f1a\u4e70\u5c3f\u5e03\uff0c\u8fd9\u5c5e\u4e8e\u6570\u636e\u6316\u6398\u7684\u54ea\u7c7b\u95ee\u9898?"},{"location":"machine-learning-interview-qa/3/#a","text":"\u5173\u8054\u89c4\u5219\u5c31\u662f\u6709\u5173\u8054\u7684\u89c4\u5219\uff0c\u5f62\u5f0f\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u975e\u7a7a\u96c6\u5408X\u3001Y\uff0c\u5982\u679c\u6709X\u2192Y\uff0c\u5c31\u8bf4X\u2192Y\u662f\u4e00\u6761\u5173\u8054\u89c4\u5219\u3002\u5728\u9898\u76ee\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8d2d\u4e70\u5564\u9152\u5c31\u4e00\u5b9a\u4f1a\u8d2d\u4e70\u5c3f\u5e03\uff0c{\u5564\u9152}\u2192{\u5c3f\u5e03}\u5c31\u662f\u4e00\u6761\u5173\u8054\u89c4\u5219\u3002\u5173\u8054\u89c4\u5219\u7684\u5f3a\u5ea6\u7528\u652f\u6301\u5ea6(support)\u548c\u81ea\u4fe1\u5ea6(confidence)\u6765\u63cf\u8ff0\u3002 \u652f\u6301\u5ea6\u7684\u5b9a\u4e49\uff1asupport(X\u2192Y) = |X\u4ea4Y|/N=\u96c6\u5408X\u4e0e\u96c6\u5408Y\u4e2d\u7684\u9879\u5728\u4e00\u6761\u8bb0\u5f55\u4e2d\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u6570\u636e\u8bb0\u5f55\u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff1asupport({\u5564\u9152}\u2192{\u5c3f\u5e03}) = \u5564\u9152\u548c\u5c3f\u5e03\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u6570\u636e\u8bb0\u5f55\u6570 \u81ea\u4fe1\u5ea6\u7684\u5b9a\u4e49\uff1aconfidence(X\u2192Y) = |X\u4ea4Y|/|X| = \u96c6\u5408X\u4e0e\u96c6\u5408Y\u4e2d\u7684\u9879\u5728\u4e00\u6761\u8bb0\u5f55\u4e2d\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u96c6\u5408X\u51fa\u73b0\u7684\u4e2a\u6570 \u3002\u4f8b\u5982\uff1aconfidence({\u5564\u9152}\u2192{\u5c3f\u5e03}) = \u5564\u9152\u548c\u5c3f\u5e03\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u5564\u9152\u51fa\u73b0\u7684\u6b21\u6570\u3002 confidence({\u5c3f\u5e03}\u2192{\u5564\u9152}) = \u5564\u9152\u548c\u5c3f\u5e03\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570/\u5c3f\u5e03\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u8fd9\u91cc\u5b9a\u4e49\u7684\u652f\u6301\u5ea6\u548c\u81ea\u4fe1\u5ea6\u90fd\u662f\u76f8\u5bf9\u7684\u652f\u6301\u5ea6\u548c\u81ea\u4fe1\u5ea6\uff0c\u4e0d\u662f\u7edd\u5bf9\u652f\u6301\u5ea6\uff0c\u7edd\u5bf9\u652f\u6301\u5ea6abs_support = \u6570\u636e\u8bb0\u5f55\u6570N*support\u3002 \u652f\u6301\u5ea6\u548c\u81ea\u4fe1\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u89c4\u5219\u8d8a\u5f3a\uff0c\u5173\u8054\u89c4\u5219\u6316\u6398\u5c31\u662f\u6316\u6398\u51fa\u6ee1\u8db3\u4e00\u5b9a\u5f3a\u5ea6\u7684\u89c4\u5219\u3002","title":"A \u5173\u8054\u89c4\u5219\u53d1\u73b0"},{"location":"machine-learning-interview-qa/3/#b","text":"Clustering(\u805a\u7c7b)\uff1a \u7b80\u5355\u5730\u8bf4\u5c31\u662f\u628a\u76f8\u4f3c\u7684\u4e1c\u897f\u5206\u5230\u4e00\u7ec4\uff0c\u805a\u7c7b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u67d0\u4e00\u7c7b\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u76ee\u6807\u53ea\u662f\u628a\u76f8\u4f3c\u7684\u4e1c\u897f\u805a\u5230\u4e00\u8d77\uff0c\u56e0\u6b64\uff0c\u4e00\u4e2a\u805a\u7c7b\u7b97\u6cd5\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u5982\u4f55\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u5c31\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\u4e86\uff0c\u56e0\u6b64 clustering \u901a\u5e38\u5e76\u4e0d\u9700\u8981\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u5b66\u4e60\uff0c\u8fd9\u5728Machine Learning\u4e2d\u88ab\u79f0\u4f5cunsupervised learning (\u65e0\u76d1\u7763\u5b66\u4e60)\u3002\u805a\u7c7b\u5206\u6790\u76ee\u7684\u5728\u4e8e\u5c06\u76f8\u4f3c\u7684\u4e8b\u7269\u5f52\u7c7b\uff0c\u540c\u4e00\u7c7b\u4e2d\u7684\u4e2a\u4f53\u6709\u8f83\u5927\u7684\u76f8\u4f3c\u6027\uff0c\u4e0d\u540c\u7c7b\u7684\u4e2a\u4f53\u5dee\u5f02\u6027\u5f88\u5927\u3002","title":"B \u805a\u7c7b"},{"location":"machine-learning-interview-qa/3/#c","text":"Classification (\u5206\u7c7b)\uff1a \u4e00\u4e2a classifier\u4f1a\u4ece\u5b83\u5f97\u5230\u7684\u8bad\u7ec3\u96c6\u4e2d\u8fdb\u884c\u201c\u5b66\u4e60\u201d\uff0c\u4ece\u800c\u5177\u5907\u5bf9\u672a\u77e5\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u7684\u80fd\u529b\uff0c\u8fd9\u79cd\u63d0\u4f9b\u8bad\u7ec3\u6570\u636e\u7684\u8fc7\u7a0b\u901a\u5e38\u53eb\u505a supervised learning (\u76d1\u7763\u5b66\u4e60)\u3002\u6240\u8c13\u5206\u7c7b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6839\u636e\u6587\u672c\u7684\u7279\u5f81\u6216\u5c5e\u6027\uff0c\u5212\u5206\u5230\u5df2\u6709\u7684\u7c7b\u522b\u4e2d\u3002 \u5e38\u7528\u7684\u5206\u7c7b\u7b97\u6cd5\u5305\u62ec\uff1a\u51b3\u7b56\u6811\u5206\u7c7b\u6cd5\uff0c\u6734\u7d20\u7684\u8d1d\u53f6\u65af\u5206\u7c7b\u7b97\u6cd5(native Bayesian classifier)\u3001\u57fa\u4e8e\u652f\u6301\u5411\u91cf\u673a(SVM)\u7684\u5206\u7c7b\u5668\uff0c\u795e\u7ecf\u7f51\u7edc\u6cd5\uff0ck-\u6700\u8fd1\u90bb\u6cd5(k-nearest neighbor\uff0ckNN)\uff0c\u6a21\u7cca\u5206\u7c7b\u6cd5\u7b49\u3002\u5206\u7c7b\u4f5c\u4e3a\u4e00\u79cd\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\uff0c\u8981\u6c42\u5fc5\u987b\u4e8b\u5148\u660e\u786e\u77e5\u9053\u5404\u4e2a\u7c7b\u522b\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u65ad\u8a00\u6240\u6709\u5f85\u5206\u7c7b\u9879\u90fd\u6709\u4e00\u4e2a\u7c7b\u522b\u4e0e\u4e4b\u5bf9\u5e94\u3002\u4f46\u662f\u5f88\u591a\u65f6\u5019\u4e0a\u8ff0\u6761\u4ef6\u5f97\u4e0d\u5230\u6ee1\u8db3\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u6d77\u91cf\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u901a\u8fc7\u9884\u5904\u7406\u4f7f\u5f97\u6570\u636e\u6ee1\u8db3\u5206\u7c7b\u7b97\u6cd5\u7684\u8981\u6c42\uff0c\u5219\u4ee3\u4ef7\u975e\u5e38\u5927\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u805a\u7c7b\u7b97\u6cd5\u3002","title":"C \u5206\u7c7b"},{"location":"machine-learning-interview-qa/3/#d","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u4e3b\u8981\u5e94\u7528\u8303\u7574\u5305\u62ec\uff1a\u6587\u672c\u6717\u8bfb\uff08Text to speech\uff09/\u8bed\u97f3\u5408\u6210\uff08Speech synthesis\uff09 \u8bed\u97f3\u8bc6\u522b\uff08Speech recognition\uff09 \u4e2d\u6587\u81ea\u52a8\u5206\u8bcd\uff08Chinese word segmentation\uff09 \u8bcd\u6027\u6807\u6ce8\uff08Part-of-speech tagging\uff09 \u53e5\u6cd5\u5206\u6790\uff08Parsing\uff09 \u81ea\u7136\u8bed\u8a00\u751f\u6210\uff08Natural language generation\uff09 \u6587\u672c\u5206\u7c7b\uff08Text categorization\uff09 \u4fe1\u606f\u68c0\u7d22\uff08Information retrieval\uff09 \u4fe1\u606f\u62bd\u53d6\uff08Information extraction\uff09 \u6587\u5b57\u6821\u5bf9\uff08Text-proofing\uff09 \u95ee\u7b54\u7cfb\u7edf\uff08Question answering\uff09\u7b49 \u9009\u62e9A\uff0c\u5173\u8054\u89c4\u5219\u53d1\u73b0","title":"D \u81ea\u7136\u8bed\u8a00\u5904\u7406"},{"location":"machine-learning-interview-qa/4/","text":"4. \u4f59\u5f26\u76f8\u4f3c\u4e0e\u6b27\u6c0f\u8ddd\u79bb\u6709\u4ec0\u4e48\u533a\u522b\u548c\u8054\u7cfb \u00b6 1\uff09\u533a\u522b \u00b6 \u5047\u8bbe 2\u4eba\u5bf9\u4e09\u90e8\u7535\u5f71\u7684\u8bc4\u5206\u5206\u522b\u662f A = [3, 3, 3] \u548c B = [5, 5, 5] \u90a3\u4e482\u4eba\u7684\u6b27\u5f0f\u8ddd\u79bb\u662f \u6839\u53f712 = 3.46\uff0c A\u3001B\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u662f1\uff08\u65b9\u5411\u5b8c\u5168\u4e00\u81f4\uff09\u3002 \u4f59\u5f26\u503c\u7684\u8303\u56f4\u662f[-1, 1], \u8d8a\u63a5\u8fd1\u4e8e1\uff0c\u8bf4\u660e2\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u8d8a\u76f8\u8fd1 \u6b27\u5f0f\u8ddd\u79bb\u548c\u4f59\u5f26\u76f8\u4f3c\u5ea6\u90fd\u80fd\u5ea6\u91cf2\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u4f46\u662f\u6b27\u5f0f\u8ddd\u79bb\u4ece2\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u53bb\u8003\u91cf\uff0c\u4f59\u5f26\u76f8\u4f3c\u4ece2\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u5939\u89d2\u53bb\u8003\u91cf\u3002 \u4ece\u4e0a\u4f8b\u53ef\u4ee5\u53d1\u51fa\uff0c2\u4eba\u5bf9\u4e09\u90e8\u7535\u5f71\u7684\u8bc4\u4ef7\u8d8b\u52bf\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u662f\u6b27\u5f0f\u8ddd\u79bb\u5e76\u4e0d\u80fd\u53cd\u6620\u51fa\u8fd9\u4e00\u70b9\uff0c\u4f59\u5f26\u76f8\u4f3c\u5219\u80fd\u591f\u5f88\u597d\u5730\u53cd\u5e94\u3002\u4f59\u5f26\u76f8\u4f3c\u53ef\u4ee5\u5f88\u597d\u5730\u89c4\u907f\u6307\u6807\u523b\u5ea6\u7684\u5dee\u5f02\uff0c\u6700\u5e38\u89c1\u7684\u5e94\u7528\u662f\u8ba1\u7b97 \u6587\u672c\u7684\u76f8\u4f3c\u5ea6 \u3002 2\uff09\u8054\u7cfb \u00b6 \u4ece\u4e0b\u56fe\u7684\u516c\u5f0f\u53ef\u4ee5\u770b\u51fa\uff0c\u5f52\u4e00\u5316\u540e\u8ba1\u7b97\u7684\u6b27\u5f0f\u8ddd\u79bb\u662f\u5173\u4e8e\u4f59\u5f26\u76f8\u4f3c\u7684\u5355\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5f52\u4e00\u5316\u540e\uff0c\u4f59\u5f26\u76f8\u4f3c\u4e0e\u6b27\u5f0f\u8ddd\u79bb\u6548\u679c\u662f\u4e00\u81f4\u7684\uff08\u6b27\u5f0f\u8ddd\u79bb\u8d8a\u5c0f\u7b49\u4ef7\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\u8d8a\u5927\uff09\u3002 \u56e0\u6b64\u53ef\u4ee5\u5c06 \u6c42\u4f59\u5f26\u76f8\u4f3c\u8f6c\u4e3a\u6c42\u6b27\u5f0f\u8ddd\u79bb \uff0c\u4f59\u5f26\u76f8\u4f3c\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u8f6c\u4e3a\u6c42\u6b27\u5f0f\u8ddd\u79bb\u540e\uff0c\u53ef\u4ee5\u501f\u52a9 KDTree \uff08KNN\u7b97\u6cd5\u7528\u5230\uff09\u6216\u8005 BallTree \uff08\u5bf9\u9ad8\u7ef4\u5411\u91cf\u53cb\u597d\uff09\u6765\u964d\u4f4e\u590d\u6742\u5ea6\u3002 3\uff09\u53c2\u8003\u94fe\u63a5 \u00b6 \u77e5\u4e4e\uff1a\u6b27\u6c0f\u8ddd\u79bb\u548c\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f","title":"4.\u4f59\u5f26\u76f8\u4f3c\u4e0e\u6b27\u6c0f\u8ddd\u79bb\u6709\u4ec0\u4e48\u533a\u522b\u548c\u8054\u7cfb"},{"location":"machine-learning-interview-qa/4/#4","text":"","title":"4. \u4f59\u5f26\u76f8\u4f3c\u4e0e\u6b27\u6c0f\u8ddd\u79bb\u6709\u4ec0\u4e48\u533a\u522b\u548c\u8054\u7cfb"},{"location":"machine-learning-interview-qa/4/#1","text":"\u5047\u8bbe 2\u4eba\u5bf9\u4e09\u90e8\u7535\u5f71\u7684\u8bc4\u5206\u5206\u522b\u662f A = [3, 3, 3] \u548c B = [5, 5, 5] \u90a3\u4e482\u4eba\u7684\u6b27\u5f0f\u8ddd\u79bb\u662f \u6839\u53f712 = 3.46\uff0c A\u3001B\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u662f1\uff08\u65b9\u5411\u5b8c\u5168\u4e00\u81f4\uff09\u3002 \u4f59\u5f26\u503c\u7684\u8303\u56f4\u662f[-1, 1], \u8d8a\u63a5\u8fd1\u4e8e1\uff0c\u8bf4\u660e2\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u8d8a\u76f8\u8fd1 \u6b27\u5f0f\u8ddd\u79bb\u548c\u4f59\u5f26\u76f8\u4f3c\u5ea6\u90fd\u80fd\u5ea6\u91cf2\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u4f46\u662f\u6b27\u5f0f\u8ddd\u79bb\u4ece2\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u53bb\u8003\u91cf\uff0c\u4f59\u5f26\u76f8\u4f3c\u4ece2\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u5939\u89d2\u53bb\u8003\u91cf\u3002 \u4ece\u4e0a\u4f8b\u53ef\u4ee5\u53d1\u51fa\uff0c2\u4eba\u5bf9\u4e09\u90e8\u7535\u5f71\u7684\u8bc4\u4ef7\u8d8b\u52bf\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u662f\u6b27\u5f0f\u8ddd\u79bb\u5e76\u4e0d\u80fd\u53cd\u6620\u51fa\u8fd9\u4e00\u70b9\uff0c\u4f59\u5f26\u76f8\u4f3c\u5219\u80fd\u591f\u5f88\u597d\u5730\u53cd\u5e94\u3002\u4f59\u5f26\u76f8\u4f3c\u53ef\u4ee5\u5f88\u597d\u5730\u89c4\u907f\u6307\u6807\u523b\u5ea6\u7684\u5dee\u5f02\uff0c\u6700\u5e38\u89c1\u7684\u5e94\u7528\u662f\u8ba1\u7b97 \u6587\u672c\u7684\u76f8\u4f3c\u5ea6 \u3002","title":"1\uff09\u533a\u522b"},{"location":"machine-learning-interview-qa/4/#2","text":"\u4ece\u4e0b\u56fe\u7684\u516c\u5f0f\u53ef\u4ee5\u770b\u51fa\uff0c\u5f52\u4e00\u5316\u540e\u8ba1\u7b97\u7684\u6b27\u5f0f\u8ddd\u79bb\u662f\u5173\u4e8e\u4f59\u5f26\u76f8\u4f3c\u7684\u5355\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5f52\u4e00\u5316\u540e\uff0c\u4f59\u5f26\u76f8\u4f3c\u4e0e\u6b27\u5f0f\u8ddd\u79bb\u6548\u679c\u662f\u4e00\u81f4\u7684\uff08\u6b27\u5f0f\u8ddd\u79bb\u8d8a\u5c0f\u7b49\u4ef7\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\u8d8a\u5927\uff09\u3002 \u56e0\u6b64\u53ef\u4ee5\u5c06 \u6c42\u4f59\u5f26\u76f8\u4f3c\u8f6c\u4e3a\u6c42\u6b27\u5f0f\u8ddd\u79bb \uff0c\u4f59\u5f26\u76f8\u4f3c\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u8f6c\u4e3a\u6c42\u6b27\u5f0f\u8ddd\u79bb\u540e\uff0c\u53ef\u4ee5\u501f\u52a9 KDTree \uff08KNN\u7b97\u6cd5\u7528\u5230\uff09\u6216\u8005 BallTree \uff08\u5bf9\u9ad8\u7ef4\u5411\u91cf\u53cb\u597d\uff09\u6765\u964d\u4f4e\u590d\u6742\u5ea6\u3002","title":"2\uff09\u8054\u7cfb"},{"location":"machine-learning-interview-qa/4/#3","text":"\u77e5\u4e4e\uff1a\u6b27\u6c0f\u8ddd\u79bb\u548c\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f","title":"3\uff09\u53c2\u8003\u94fe\u63a5"},{"location":"machine-learning-interview-qa/5/","text":"5. \u4e0b\u9762\u54ea\u4e2a\u4e0d\u5c5e\u4e8e\u6570\u636e\u7684\u5c5e\u6027\u7c7b\u522b \u00b6 A \u6807\u79f0 B \u5e8f\u6570 C \u533a\u95f4 D \u76f8\u5f02 \u5173\u4e8e\u6570\u636e\u7684\u5c5e\u6027\u7c7b\u522b\u7684\u4ecb\u7ecd \u00b6 \u6570\u636e\u96c6\u7531\u6570\u636e\u5bf9\u8c61\u7ec4\u6210\uff0c\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u4ee3\u8868\u4e00\u4e2a\u5b9e\u4f53\u3002\u6570\u636e\u5bf9\u8c61\u53c8\u79f0\u6837\u672c\u3001\u5b9e\u4f8b\u3001\u6570\u636e\u70b9\u6216\u5bf9\u8c61\u3002\u5c5e\u6027\uff08attribute\uff09\u662f\u4e00\u4e2a\u6570\u636e\u5b57\u6bb5\uff0c\u8868\u793a\u6570\u636e\u5bf9\u8c61\u7684\u4e00\u4e2a\u7279\u5f81\u3002\u5c5e\u6027\u5411\u91cf\uff08\u6216\u7279\u5f81\u5411\u91cf\uff09\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u7ed9\u5b9a\u5bf9\u8c61\u7684\u4e00\u7ec4\u5c5e\u6027\u3002\u5c5e\u6027\u6709\u4e0d\u540c\u7c7b\u578b\uff1a\u6807\u79f0\u5c5e\u6027\uff08nominal attribute\uff09\u3001\u4e8c\u5143\u5c5e\u6027\uff08binary attribute\uff09\u3001\u5e8f\u6570\u5c5e\u6027\uff08ordinal attribute\uff09\u3001 \u6570\u503c\u5c5e\u6027\uff08numerical attribute\uff09\u3001\u79bb\u6563\u5c5e\u6027\u4e0e\u8fde\u7eed\u5c5e\u6027\u3002 A\u3001\u6807\u79f0\u5c5e\u6027\uff08nominal attribute\uff09 \u00b6 \u6807\u79f0\u5c5e\u6027\u7684\u503c\u662f\u4e00\u4e9b\u7b26\u53f7\u6216\u5b9e\u7269\u7684\u540d\u79f0\uff0c\u6bcf\u4e2a\u503c\u4ee3\u8868\u67d0\u79cd\u7c7b\u522b\u3001\u7f16\u7801\u6216\u72b6\u6001\uff0c\u6240\u4ee5\u6807\u79f0\u5c5e\u6027\u53c8\u88ab\u770b\u505a\u662f\u5206\u7c7b\u578b\u7684\u5c5e\u6027\uff08categorical\uff09\u3002\u8fd9\u4e9b\u503c\u4e0d\u5fc5\u5177\u6709\u6709\u610f\u4e49\u7684\u5e8f\uff0c\u5e76\u4e14\u4e0d\u662f\u5b9a\u91cf\u7684\u3002 B\u3001\u4e8c\u5143\u5c5e\u6027\uff08binary attribute\uff09 \u00b6 \u4e8c\u5143\u5c5e\u6027\u662f\u4e00\u79cd\u6807\u79f0\u5c5e\u6027\uff0c\u53ea\u6709\u4e24\u4e2a\u7c7b\u522b\u6216\u72b6\u6001\uff1a0\u62161\uff0c\u5176\u4e2d0\u5e38\u8868\u793a\u4e0d\u51fa\u73b0\uff0c1\u8868\u793a\u51fa\u73b0\u3002\u5982\u679c\u5c060\u548c1\u5bf9\u5e94\u4e8efalse\u548ctrue\uff0c\u4e8c\u5143\u5c5e\u6027\u5219\u4e3a\u5e03\u5c14\u5c5e\u6027\u3002 C\u3001\u5e8f\u6570\u5c5e\u6027\uff08ordinal attribute\uff09 \u00b6 \u5e8f\u6570\u5c5e\u6027\u53ef\u80fd\u7684\u53d6\u503c\u4e4b\u95f4\u5177\u6709\u6709\u610f\u4e49\u7684\u5e8f\u6216\u79e9\u8bc4\u5b9a\uff0c\u4f46\u76f8\u7ee7\u503c\u4e4b\u95f4\u7684\u5dee\u662f\u672a\u77e5\u7684\u3002\u4f8b\u5982\uff0c\u5b66\u751f\u7684\u6210\u7ee9\u5c5e\u6027\u53ef\u4ee5\u5206\u4e3a\u4f18\u3001\u826f\u3001\u4e2d\u3001\u5dee\u56db\u4e2a\u7b49\u7ea7\uff1b\u67d0\u5feb\u9910\u5e97\u7684\u996e\u6599\u676f\u5177\u6709\u5927\u3001\u4e2d\u3001\u5c0f\u4e09\u4e2a\u53ef\u80fd\u503c\u3002\u7136\u800c\uff0c\u5177\u4f53\u201c\u5927\u201d\u6bd4\u201c\u4e2d\u201d\u5927\u591a\u5c11\u662f\u672a\u77e5\u7684\u3002 \u5e8f\u6570\u5c5e\u6027\u53ef\u7528\u4e8e\u8bb0\u5f55\u4e0d\u80fd\u5ba2\u89c2\u5ea6\u91cf\u7684\u4e3b\u89c2\u8d28\u91cf\u8bc4\u4f30\u3002\u56e0\u6b64\uff0c\u5e8f\u6570\u5c5e\u6027\u5e38\u7528\u4e8e\u7b49\u7ea7\u8bc4\u5b9a\u8c03\u67e5\u3002\u5982\u67d0\u9500\u552e\u90e8\u95e8\u5ba2\u6237\u670d\u52a1\u8d28\u91cf\u7684\u8bc4\u4f30\uff0c0\u8868\u793a\u5f88\u4e0d\u6ee1\u610f\uff0c1\u4e0d\u592a\u6ee1\u610f\uff0c2\u8868\u793a\u4e2d\u6027\uff0c3\u8868\u793a\u6ee1\u610f\uff0c4\u8868\u793a\u975e\u5e38\u6ee1\u610f\u3002 \u901a\u8fc7\u6570\u636e\u9884\u5904\u7406\u4e2d\u7684\u6570\u636e\u89c4\u7ea6\uff0c\u5e8f\u6570\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u5c06\u6570\u636e\u7684\u503c\u57df\u5212\u5206\u6210\u6709\u9650\u4e2a\u6709\u5e8f\u7c7b\u522b\uff0c\u5c06\u6570\u503c\u5c5e\u6027\u79bb\u6563\u5316\u800c\u5f97\u5230\u3002\u5e94\u6ce8\u610f\u7684\u662f\uff0c\u6807\u79f0\u3001\u4e8c\u5143\u548c\u5e8f\u6570\u5c5e\u6027\u90fd\u662f\u5b9a\u6027\u7684\uff0c\u53ea\u63cf\u8ff0\u6837\u672c\u7684\u7279\u5f81\uff0c\u800c\u4e0d\u7ed9\u51fa\u5b9e\u9645\u5927\u5c0f\u6216\u6570\u91cf\u3002\u4e0b\u9762\u4ecb\u7ecd\u63d0\u4f9b\u6837\u672c\u5b9a\u91cf\u5ea6\u91cf\u7684\u6570\u503c\u5c5e\u6027\u3002 D\u3001\u6570\u503c\u5c5e\u6027\uff08numerical attribute\uff09 \u00b6 \u6570\u503c\u5c5e\u6027\u662f\u53ef\u5ea6\u91cf\u7684\u91cf\uff0c\u7528\u6574\u6570\u6216\u5b9e\u6570\u503c\u8868\u793a\uff0c\u6709\u533a\u95f4\u6807\u5ea6\u548c\u6bd4\u7387\u6807\u5ea6\u4e24\u79cd\u7c7b\u578b\u3002 a) \u533a\u95f4\u6807\u5ea6\uff08interval-scaled\uff09\u5c5e\u6027 \u00b6 \u533a\u95f4\u6807\u5ea6\u5c5e\u6027\u7528\u76f8\u7b49\u7684\u5355\u4f4d\u5c3a\u5ea6\u5ea6\u91cf\u3002\u533a\u95f4\u5c5e\u6027\u7684\u503c\u6709\u5e8f\u3002\u6240\u4ee5\uff0c\u9664\u4e86\u79e9\u8bc4\u5b9a\u4e4b\u5916\uff0c\u8fd9\u79cd\u5c5e\u6027\u5141\u8bb8\u6bd4\u8f83\u548c\u5b9a\u91cf\u8bc4\u4f30\u503c\u4e4b\u95f4\u7684\u5dee\u3002\u4f8b\u5982\uff0c\u8eab\u9ad8\u5c5e\u6027\u662f\u533a\u95f4\u6807\u5ea6\u7684\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u73ed\u5b66\u751f\u7684\u8eab\u9ad8\u7edf\u8ba1\u503c\uff0c\u5c06\u6bcf\u4e00\u4e2a\u4eba\u89c6\u4e3a\u4e00\u4e2a\u6837\u672c\uff0c\u5c06\u8fd9\u4e9b\u5b66\u751f\u8eab\u9ad8\u503c\u6392\u5e8f\uff0c\u53ef\u4ee5\u91cf\u5316\u4e0d\u540c\u503c\u4e4b\u95f4\u7684\u5dee\u3002A\u540c\u5b66\u8eab\u9ad8170cm\u6bd4B\u540c\u5b66165cm\u9ad8\u51fa5cm\u3002 \u5bf9\u4e8e\u6ca1\u6709\u771f\u6b63\u96f6\u70b9\u7684\u6444\u6c0f\u6e29\u5ea6\u548c\u534e\u6c0f\u6e29\u5ea6\uff0c\u5176\u96f6\u503c\u4e0d\u8868\u793a\u6ca1\u6709\u6e29\u5ea6\u3002\u4f8b\u5982\uff0c\u6444\u6c0f\u6e29\u5ea6\u7684\u5ea6\u91cf\u5355\u4f4d\u662f\u6c34\u5728\u6807\u51c6\u5927\u6c14\u538b\u4e0b\u6cb8\u70b9\u6e29\u5ea6\u4e0e\u51b0\u70b9\u6e29\u5ea6\u4e4b\u5dee\u76841/100\u3002\u5c3d\u7ba1\u53ef\u4ee5\u8ba1\u7b97\u6e29\u5ea6\u4e4b\u5dee\uff0c\u4f46\u56e0\u6ca1\u6709\u771f\u6b63\u7684\u96f6\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u8bf410\u2103\u6bd45\u2103\u6e29\u66962\u500d\uff0c\u4e0d\u80fd\u7528\u6bd4\u7387\u63cf\u8ff0\u8fd9\u4e9b\u503c\u3002\u4f46\u6bd4\u7387\u6807\u5ea6\u5c5e\u6027\u5b58\u5728\u771f\u6b63\u7684\u96f6\u70b9\u3002 b) \u6bd4\u7387\u6807\u5ea6\uff08ratio-scaled\uff09\u5c5e\u6027 \u00b6 \u6bd4\u7387\u6807\u5ea6\u5c5e\u6027\u7684\u5ea6\u91cf\u662f\u6bd4\u7387\u7684\uff0c\u53ef\u4ee5\u7528\u6bd4\u7387\u6765\u63cf\u8ff0\u4e24\u4e2a\u503c\uff0c\u5373\u4e00\u4e2a\u503c\u662f\u53e6\u4e00\u4e2a\u503c\u7684\u500d\u6570\uff0c\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u503c\u4e4b\u95f4\u7684\u5dee\u3002\u4f8b\u5982\uff0c\u4e0d\u540c\u4e8e\u6444\u6c0f\u548c\u534e\u6c0f\u6e29\u5ea6\uff0c\u5f00\u6c0f\u6e29\u5ea6\u5177\u6709\u7edd\u5bf9\u96f6\u70b9\u3002\u5728\u96f6\u70b9\uff0c\u6784\u6210\u7269\u8d28\u7684\u7c92\u5b50\u5177\u6709\u96f6\u52a8\u80fd\u3002\u6bd4\u7387\u6807\u5ea6\u5c5e\u6027\u7684\u4f8b\u5b50\u8fd8\u5305\u62ec\u5b57\u6570\u548c\u5de5\u9f84\u7b49\u8ba1\u6570\u5c5e\u6027\uff0c\u4ee5\u53ca\u5ea6\u91cf\u91cd\u91cf\u3001\u9ad8\u5ea6\u3001\u901f\u5ea6\u7684\u5c5e\u6027\u3002 E\u3001\u79bb\u6563\u5c5e\u6027\u4e0e\u8fde\u7eed\u5c5e\u6027 \u00b6 \u524d\u9762\u4ecb\u7ecd\u7684\u56db\u79cd\u5c5e\u6027\u7c7b\u578b\u4e4b\u95f4\u4e0d\u662f\u4e92\u65a5\u7684\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u7528\u8bb8\u591a\u5176\u4ed6\u65b9\u6cd5\u6765\u7ec4\u7ec7\u5c5e\u6027\u7c7b\u578b\uff0c\u4f7f\u7c7b\u578b\u95f4\u4e0d\u4e92\u65a5\u3002\u673a\u5668\u5b66\u4e60\u9886\u57df\u7684\u5206\u7c7b\u7b97\u6cd5\u5e38\u628a\u5c5e\u6027\u5206\u4e3a\u79bb\u6563\u7684\u6216\u8fde\u7eed\u7684\u5c5e\u6027\u3002\u4e0d\u540c\u7c7b\u578b\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u79bb\u6563\u5c5e\u6027\u5177\u6709\u6709\u9650\u6216\u65e0\u9650\u53ef\u6570\u4e2a\u503c\u3002\u5982\u5b66\u751f\u6210\u7ee9\u5c5e\u6027\uff0c\u4f18\u3001\u826f\u3001\u4e2d\u3001\u5dee\uff1b\u4e8c\u5143\u5c5e\u6027\u53d61\u548c0\u4ee5\u53ca\u5e74\u9f84\u5c5e\u6027\u53d60\u5230110\u3002\u5982\u4e00\u4e2a\u5c5e\u6027\u53ef\u80fd\u53d6\u503c\u7684\u503c\u96c6\u5408\u662f\u65e0\u9650\u7684\uff0c\u4f46\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u4e0e\u81ea\u7136\u6570\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u5219\u5176\u4e5f\u662f\u79bb\u6563\u5c5e\u6027\u3002\u5982\u679c\u4e00\u4e2a\u5c5e\u6027\u4e0d\u662f\u79bb\u6563\u7684\uff0c\u5219\u5b83\u662f\u8fde\u7eed\u7684\u3002\u6ce8\u610f\uff1a\u5728\u6587\u732e\u4e2d\uff0c\u672f\u8bed \u201c\u6570\u503c\u5c5e\u6027\u201d \u548c\u201c\u8fde\u7eed\u5c5e\u6027\u201d\u5e38\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\uff0c\u56e0\u6b64\uff0c\u201c\u8fde\u7eed\u5c5e\u6027\u201d\u4e5f\u5e38\u88ab\u79f0\u4e3a\u201c\u6570\u503c\u5c5e\u6027\u201d\u3002 \u53c2\u8003\u4e66\u76ee\u300a\u65e0\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\u53ca\u5176\u5e94\u7528\u300b","title":"5.\u4e0b\u9762\u54ea\u4e2a\u4e0d\u5c5e\u4e8e\u6570\u636e\u7684\u5c5e\u6027\u7c7b\u578b"},{"location":"machine-learning-interview-qa/5/#5","text":"A \u6807\u79f0 B \u5e8f\u6570 C \u533a\u95f4 D \u76f8\u5f02","title":"5. \u4e0b\u9762\u54ea\u4e2a\u4e0d\u5c5e\u4e8e\u6570\u636e\u7684\u5c5e\u6027\u7c7b\u522b"},{"location":"machine-learning-interview-qa/5/#_1","text":"\u6570\u636e\u96c6\u7531\u6570\u636e\u5bf9\u8c61\u7ec4\u6210\uff0c\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u4ee3\u8868\u4e00\u4e2a\u5b9e\u4f53\u3002\u6570\u636e\u5bf9\u8c61\u53c8\u79f0\u6837\u672c\u3001\u5b9e\u4f8b\u3001\u6570\u636e\u70b9\u6216\u5bf9\u8c61\u3002\u5c5e\u6027\uff08attribute\uff09\u662f\u4e00\u4e2a\u6570\u636e\u5b57\u6bb5\uff0c\u8868\u793a\u6570\u636e\u5bf9\u8c61\u7684\u4e00\u4e2a\u7279\u5f81\u3002\u5c5e\u6027\u5411\u91cf\uff08\u6216\u7279\u5f81\u5411\u91cf\uff09\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u7ed9\u5b9a\u5bf9\u8c61\u7684\u4e00\u7ec4\u5c5e\u6027\u3002\u5c5e\u6027\u6709\u4e0d\u540c\u7c7b\u578b\uff1a\u6807\u79f0\u5c5e\u6027\uff08nominal attribute\uff09\u3001\u4e8c\u5143\u5c5e\u6027\uff08binary attribute\uff09\u3001\u5e8f\u6570\u5c5e\u6027\uff08ordinal attribute\uff09\u3001 \u6570\u503c\u5c5e\u6027\uff08numerical attribute\uff09\u3001\u79bb\u6563\u5c5e\u6027\u4e0e\u8fde\u7eed\u5c5e\u6027\u3002","title":"\u5173\u4e8e\u6570\u636e\u7684\u5c5e\u6027\u7c7b\u522b\u7684\u4ecb\u7ecd"},{"location":"machine-learning-interview-qa/5/#anominal-attribute","text":"\u6807\u79f0\u5c5e\u6027\u7684\u503c\u662f\u4e00\u4e9b\u7b26\u53f7\u6216\u5b9e\u7269\u7684\u540d\u79f0\uff0c\u6bcf\u4e2a\u503c\u4ee3\u8868\u67d0\u79cd\u7c7b\u522b\u3001\u7f16\u7801\u6216\u72b6\u6001\uff0c\u6240\u4ee5\u6807\u79f0\u5c5e\u6027\u53c8\u88ab\u770b\u505a\u662f\u5206\u7c7b\u578b\u7684\u5c5e\u6027\uff08categorical\uff09\u3002\u8fd9\u4e9b\u503c\u4e0d\u5fc5\u5177\u6709\u6709\u610f\u4e49\u7684\u5e8f\uff0c\u5e76\u4e14\u4e0d\u662f\u5b9a\u91cf\u7684\u3002","title":"A\u3001\u6807\u79f0\u5c5e\u6027\uff08nominal attribute\uff09"},{"location":"machine-learning-interview-qa/5/#bbinary-attribute","text":"\u4e8c\u5143\u5c5e\u6027\u662f\u4e00\u79cd\u6807\u79f0\u5c5e\u6027\uff0c\u53ea\u6709\u4e24\u4e2a\u7c7b\u522b\u6216\u72b6\u6001\uff1a0\u62161\uff0c\u5176\u4e2d0\u5e38\u8868\u793a\u4e0d\u51fa\u73b0\uff0c1\u8868\u793a\u51fa\u73b0\u3002\u5982\u679c\u5c060\u548c1\u5bf9\u5e94\u4e8efalse\u548ctrue\uff0c\u4e8c\u5143\u5c5e\u6027\u5219\u4e3a\u5e03\u5c14\u5c5e\u6027\u3002","title":"B\u3001\u4e8c\u5143\u5c5e\u6027\uff08binary attribute\uff09"},{"location":"machine-learning-interview-qa/5/#cordinal-attribute","text":"\u5e8f\u6570\u5c5e\u6027\u53ef\u80fd\u7684\u53d6\u503c\u4e4b\u95f4\u5177\u6709\u6709\u610f\u4e49\u7684\u5e8f\u6216\u79e9\u8bc4\u5b9a\uff0c\u4f46\u76f8\u7ee7\u503c\u4e4b\u95f4\u7684\u5dee\u662f\u672a\u77e5\u7684\u3002\u4f8b\u5982\uff0c\u5b66\u751f\u7684\u6210\u7ee9\u5c5e\u6027\u53ef\u4ee5\u5206\u4e3a\u4f18\u3001\u826f\u3001\u4e2d\u3001\u5dee\u56db\u4e2a\u7b49\u7ea7\uff1b\u67d0\u5feb\u9910\u5e97\u7684\u996e\u6599\u676f\u5177\u6709\u5927\u3001\u4e2d\u3001\u5c0f\u4e09\u4e2a\u53ef\u80fd\u503c\u3002\u7136\u800c\uff0c\u5177\u4f53\u201c\u5927\u201d\u6bd4\u201c\u4e2d\u201d\u5927\u591a\u5c11\u662f\u672a\u77e5\u7684\u3002 \u5e8f\u6570\u5c5e\u6027\u53ef\u7528\u4e8e\u8bb0\u5f55\u4e0d\u80fd\u5ba2\u89c2\u5ea6\u91cf\u7684\u4e3b\u89c2\u8d28\u91cf\u8bc4\u4f30\u3002\u56e0\u6b64\uff0c\u5e8f\u6570\u5c5e\u6027\u5e38\u7528\u4e8e\u7b49\u7ea7\u8bc4\u5b9a\u8c03\u67e5\u3002\u5982\u67d0\u9500\u552e\u90e8\u95e8\u5ba2\u6237\u670d\u52a1\u8d28\u91cf\u7684\u8bc4\u4f30\uff0c0\u8868\u793a\u5f88\u4e0d\u6ee1\u610f\uff0c1\u4e0d\u592a\u6ee1\u610f\uff0c2\u8868\u793a\u4e2d\u6027\uff0c3\u8868\u793a\u6ee1\u610f\uff0c4\u8868\u793a\u975e\u5e38\u6ee1\u610f\u3002 \u901a\u8fc7\u6570\u636e\u9884\u5904\u7406\u4e2d\u7684\u6570\u636e\u89c4\u7ea6\uff0c\u5e8f\u6570\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u5c06\u6570\u636e\u7684\u503c\u57df\u5212\u5206\u6210\u6709\u9650\u4e2a\u6709\u5e8f\u7c7b\u522b\uff0c\u5c06\u6570\u503c\u5c5e\u6027\u79bb\u6563\u5316\u800c\u5f97\u5230\u3002\u5e94\u6ce8\u610f\u7684\u662f\uff0c\u6807\u79f0\u3001\u4e8c\u5143\u548c\u5e8f\u6570\u5c5e\u6027\u90fd\u662f\u5b9a\u6027\u7684\uff0c\u53ea\u63cf\u8ff0\u6837\u672c\u7684\u7279\u5f81\uff0c\u800c\u4e0d\u7ed9\u51fa\u5b9e\u9645\u5927\u5c0f\u6216\u6570\u91cf\u3002\u4e0b\u9762\u4ecb\u7ecd\u63d0\u4f9b\u6837\u672c\u5b9a\u91cf\u5ea6\u91cf\u7684\u6570\u503c\u5c5e\u6027\u3002","title":"C\u3001\u5e8f\u6570\u5c5e\u6027\uff08ordinal attribute\uff09"},{"location":"machine-learning-interview-qa/5/#dnumerical-attribute","text":"\u6570\u503c\u5c5e\u6027\u662f\u53ef\u5ea6\u91cf\u7684\u91cf\uff0c\u7528\u6574\u6570\u6216\u5b9e\u6570\u503c\u8868\u793a\uff0c\u6709\u533a\u95f4\u6807\u5ea6\u548c\u6bd4\u7387\u6807\u5ea6\u4e24\u79cd\u7c7b\u578b\u3002","title":"D\u3001\u6570\u503c\u5c5e\u6027\uff08numerical attribute\uff09"},{"location":"machine-learning-interview-qa/5/#a-interval-scaled","text":"\u533a\u95f4\u6807\u5ea6\u5c5e\u6027\u7528\u76f8\u7b49\u7684\u5355\u4f4d\u5c3a\u5ea6\u5ea6\u91cf\u3002\u533a\u95f4\u5c5e\u6027\u7684\u503c\u6709\u5e8f\u3002\u6240\u4ee5\uff0c\u9664\u4e86\u79e9\u8bc4\u5b9a\u4e4b\u5916\uff0c\u8fd9\u79cd\u5c5e\u6027\u5141\u8bb8\u6bd4\u8f83\u548c\u5b9a\u91cf\u8bc4\u4f30\u503c\u4e4b\u95f4\u7684\u5dee\u3002\u4f8b\u5982\uff0c\u8eab\u9ad8\u5c5e\u6027\u662f\u533a\u95f4\u6807\u5ea6\u7684\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u73ed\u5b66\u751f\u7684\u8eab\u9ad8\u7edf\u8ba1\u503c\uff0c\u5c06\u6bcf\u4e00\u4e2a\u4eba\u89c6\u4e3a\u4e00\u4e2a\u6837\u672c\uff0c\u5c06\u8fd9\u4e9b\u5b66\u751f\u8eab\u9ad8\u503c\u6392\u5e8f\uff0c\u53ef\u4ee5\u91cf\u5316\u4e0d\u540c\u503c\u4e4b\u95f4\u7684\u5dee\u3002A\u540c\u5b66\u8eab\u9ad8170cm\u6bd4B\u540c\u5b66165cm\u9ad8\u51fa5cm\u3002 \u5bf9\u4e8e\u6ca1\u6709\u771f\u6b63\u96f6\u70b9\u7684\u6444\u6c0f\u6e29\u5ea6\u548c\u534e\u6c0f\u6e29\u5ea6\uff0c\u5176\u96f6\u503c\u4e0d\u8868\u793a\u6ca1\u6709\u6e29\u5ea6\u3002\u4f8b\u5982\uff0c\u6444\u6c0f\u6e29\u5ea6\u7684\u5ea6\u91cf\u5355\u4f4d\u662f\u6c34\u5728\u6807\u51c6\u5927\u6c14\u538b\u4e0b\u6cb8\u70b9\u6e29\u5ea6\u4e0e\u51b0\u70b9\u6e29\u5ea6\u4e4b\u5dee\u76841/100\u3002\u5c3d\u7ba1\u53ef\u4ee5\u8ba1\u7b97\u6e29\u5ea6\u4e4b\u5dee\uff0c\u4f46\u56e0\u6ca1\u6709\u771f\u6b63\u7684\u96f6\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u8bf410\u2103\u6bd45\u2103\u6e29\u66962\u500d\uff0c\u4e0d\u80fd\u7528\u6bd4\u7387\u63cf\u8ff0\u8fd9\u4e9b\u503c\u3002\u4f46\u6bd4\u7387\u6807\u5ea6\u5c5e\u6027\u5b58\u5728\u771f\u6b63\u7684\u96f6\u70b9\u3002","title":"a) \u533a\u95f4\u6807\u5ea6\uff08interval-scaled\uff09\u5c5e\u6027"},{"location":"machine-learning-interview-qa/5/#b-ratio-scaled","text":"\u6bd4\u7387\u6807\u5ea6\u5c5e\u6027\u7684\u5ea6\u91cf\u662f\u6bd4\u7387\u7684\uff0c\u53ef\u4ee5\u7528\u6bd4\u7387\u6765\u63cf\u8ff0\u4e24\u4e2a\u503c\uff0c\u5373\u4e00\u4e2a\u503c\u662f\u53e6\u4e00\u4e2a\u503c\u7684\u500d\u6570\uff0c\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u503c\u4e4b\u95f4\u7684\u5dee\u3002\u4f8b\u5982\uff0c\u4e0d\u540c\u4e8e\u6444\u6c0f\u548c\u534e\u6c0f\u6e29\u5ea6\uff0c\u5f00\u6c0f\u6e29\u5ea6\u5177\u6709\u7edd\u5bf9\u96f6\u70b9\u3002\u5728\u96f6\u70b9\uff0c\u6784\u6210\u7269\u8d28\u7684\u7c92\u5b50\u5177\u6709\u96f6\u52a8\u80fd\u3002\u6bd4\u7387\u6807\u5ea6\u5c5e\u6027\u7684\u4f8b\u5b50\u8fd8\u5305\u62ec\u5b57\u6570\u548c\u5de5\u9f84\u7b49\u8ba1\u6570\u5c5e\u6027\uff0c\u4ee5\u53ca\u5ea6\u91cf\u91cd\u91cf\u3001\u9ad8\u5ea6\u3001\u901f\u5ea6\u7684\u5c5e\u6027\u3002","title":"b) \u6bd4\u7387\u6807\u5ea6\uff08ratio-scaled\uff09\u5c5e\u6027"},{"location":"machine-learning-interview-qa/5/#e","text":"\u524d\u9762\u4ecb\u7ecd\u7684\u56db\u79cd\u5c5e\u6027\u7c7b\u578b\u4e4b\u95f4\u4e0d\u662f\u4e92\u65a5\u7684\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u7528\u8bb8\u591a\u5176\u4ed6\u65b9\u6cd5\u6765\u7ec4\u7ec7\u5c5e\u6027\u7c7b\u578b\uff0c\u4f7f\u7c7b\u578b\u95f4\u4e0d\u4e92\u65a5\u3002\u673a\u5668\u5b66\u4e60\u9886\u57df\u7684\u5206\u7c7b\u7b97\u6cd5\u5e38\u628a\u5c5e\u6027\u5206\u4e3a\u79bb\u6563\u7684\u6216\u8fde\u7eed\u7684\u5c5e\u6027\u3002\u4e0d\u540c\u7c7b\u578b\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u79bb\u6563\u5c5e\u6027\u5177\u6709\u6709\u9650\u6216\u65e0\u9650\u53ef\u6570\u4e2a\u503c\u3002\u5982\u5b66\u751f\u6210\u7ee9\u5c5e\u6027\uff0c\u4f18\u3001\u826f\u3001\u4e2d\u3001\u5dee\uff1b\u4e8c\u5143\u5c5e\u6027\u53d61\u548c0\u4ee5\u53ca\u5e74\u9f84\u5c5e\u6027\u53d60\u5230110\u3002\u5982\u4e00\u4e2a\u5c5e\u6027\u53ef\u80fd\u53d6\u503c\u7684\u503c\u96c6\u5408\u662f\u65e0\u9650\u7684\uff0c\u4f46\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u4e0e\u81ea\u7136\u6570\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u5219\u5176\u4e5f\u662f\u79bb\u6563\u5c5e\u6027\u3002\u5982\u679c\u4e00\u4e2a\u5c5e\u6027\u4e0d\u662f\u79bb\u6563\u7684\uff0c\u5219\u5b83\u662f\u8fde\u7eed\u7684\u3002\u6ce8\u610f\uff1a\u5728\u6587\u732e\u4e2d\uff0c\u672f\u8bed \u201c\u6570\u503c\u5c5e\u6027\u201d \u548c\u201c\u8fde\u7eed\u5c5e\u6027\u201d\u5e38\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\uff0c\u56e0\u6b64\uff0c\u201c\u8fde\u7eed\u5c5e\u6027\u201d\u4e5f\u5e38\u88ab\u79f0\u4e3a\u201c\u6570\u503c\u5c5e\u6027\u201d\u3002 \u53c2\u8003\u4e66\u76ee\u300a\u65e0\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\u53ca\u5176\u5e94\u7528\u300b","title":"E\u3001\u79bb\u6563\u5c5e\u6027\u4e0e\u8fde\u7eed\u5c5e\u6027"},{"location":"machine-learning-interview-qa/6/","text":"6. \u76d1\u7763\u5b66\u4e60\u548c\u65e0\u76d1\u7763\u5b66\u4e60 \u00b6 \u5173\u952e\u533a\u522b \u00b6 \u662f\u5426\u6709\u76d1\u7763\uff08supervised\uff09\uff0c\u5c31\u770b\u8f93\u5165\u6570\u636e\u662f\u5426\u6709\u6807\u7b7e\uff08label\uff09\u3002\u8f93\u5165\u6570\u636e\u6709\u6807\u7b7e\uff0c\u5219\u4e3a\uff08\u6709\uff09\u76d1\u7763\u5b66\u4e60\uff0c\u6ca1\u6807\u7b7e\u5219\u4e3a\u65e0\u76d1\u7763\u5b66\u4e60\u3002 \u77e5\u4e4e\u7684\u901a\u4fd7\u56de\u7b54 \u00b6 \u4f5c\u8005\uff1a\u738b\u4e30 \u94fe\u63a5 \u9996\u5148\u770b\u4ec0\u4e48\u662f\u5b66\u4e60\uff08learning\uff09\uff1f\u4e00\u4e2a\u6210\u8bed\u5c31\u53ef\u6982\u62ec\uff1a\u4e3e\u4e00\u53cd\u4e09\u3002\u6b64\u5904\u4ee5\u9ad8\u8003\u4e3a\u4f8b\uff0c\u9ad8\u8003\u7684\u9898\u76ee\u5728\u4e0a\u8003\u573a\u524d\u6211\u4eec\u672a\u5fc5\u505a\u8fc7\uff0c\u4f46\u5728\u9ad8\u4e2d\u4e09\u5e74\u6211\u4eec\u505a\u8fc7\u5f88\u591a\u5f88\u591a\u9898\u76ee\uff0c\u61c2\u89e3\u9898\u65b9\u6cd5\uff0c\u56e0\u6b64\u8003\u573a\u4e0a\u9762\u5bf9\u964c\u751f\u95ee\u9898\u4e5f\u53ef\u4ee5\u7b97\u51fa\u7b54\u6848\u3002\u673a\u5668\u5b66\u4e60\u7684\u601d\u8def\u4e5f\u7c7b\u4f3c\uff1a\u6211\u4eec\u80fd\u4e0d\u80fd\u5229\u7528\u4e00\u4e9b\u8bad\u7ec3\u6570\u636e\uff08\u5df2\u7ecf\u505a\u8fc7\u7684\u9898\uff09\uff0c\u4f7f\u673a\u5668\u80fd\u591f\u5229\u7528\u5b83\u4eec\uff08\u89e3\u9898\u65b9\u6cd5\uff09\u5206\u6790\u672a\u77e5\u6570\u636e\uff08\u9ad8\u8003\u7684\u9898\u76ee\uff09\uff1f \u6700\u7b80\u5355\u4e5f\u6700\u666e\u904d\u7684\u4e00\u7c7b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5c31\u662f\u5206\u7c7b\uff08classification\uff09\u3002\u5bf9\u4e8e\u5206\u7c7b\uff0c\u8f93\u5165\u7684\u8bad\u7ec3\u6570\u636e\u6709\u7279\u5f81\uff08feature\uff09\uff0c\u6709\u6807\u7b7e\uff08label\uff09\u3002\u6240\u8c13\u7684\u5b66\u4e60\uff0c\u5176\u672c\u8d28\u5c31\u662f\u627e\u5230\u7279\u5f81\u548c\u6807\u7b7e\u95f4\u7684\u5173\u7cfb\uff08mapping\uff09\u3002\u8fd9\u6837\u5f53\u6709\u7279\u5f81\u800c\u65e0\u6807\u7b7e\u7684\u672a\u77e5\u6570\u636e\u8f93\u5165\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5df2\u6709\u7684\u5173\u7cfb\u5f97\u5230\u672a\u77e5\u6570\u636e\u6807\u7b7e\u3002 \u5728\u4e0a\u8ff0\u7684\u5206\u7c7b\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6240\u6709\u8bad\u7ec3\u6570\u636e\u90fd\u6709\u6807\u7b7e\uff0c\u5219\u4e3a\u6709\u76d1\u7763\u5b66\u4e60\uff08supervised learning\uff09\u3002\u5982\u679c\u6570\u636e\u6ca1\u6709\u6807\u7b7e\uff0c\u663e\u7136\u5c31\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff08unsupervised learning\uff09\u4e86\uff0c\u4e5f\u5373\u805a\u7c7b\uff08clustering\uff09\u3002\u76ee\u524d\u5206\u7c7b\u7b97\u6cd5\u7684\u6548\u679c\u8fd8\u662f\u4e0d\u9519\u7684\uff0c\u4f46\u76f8\u5bf9\u6765\u8bb2\uff0c\u805a\u7c7b\u7b97\u6cd5\u5c31\u6709\u4e9b\u60e8\u4e0d\u5fcd\u7779\u4e86\u3002\u786e\u5b9e\uff0c\u65e0\u76d1\u7763\u5b66\u4e60\u672c\u8eab\u7684\u7279\u70b9\u4f7f\u5176\u96be\u4ee5\u5f97\u5230\u5982\u5206\u7c7b\u4e00\u6837\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u7ed3\u679c\u3002\u8fd9\u4e5f\u6b63\u5982\u6211\u4eec\u5728\u9ad8\u4e2d\u505a\u9898\uff0c\u7b54\u6848\uff08\u6807\u7b7e\uff09\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5047\u8bbe\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u4eba\u8fdb\u5165\u9ad8\u4e2d\uff0c\u4e00\u4e2a\u6b63\u5e38\u5b66\u4e60\uff0c\u53e6\u4e00\u4eba\u505a\u7684\u6240\u6709\u9898\u76ee\u90fd\u6ca1\u6709\u7b54\u6848\uff0c\u90a3\u4e48\u60f3\u5fc5\u7b2c\u4e00\u4e2a\u4eba\u9ad8\u8003\u4f1a\u53d1\u6325\u66f4\u597d\uff0c\u7b2c\u4e8c\u4e2a\u4eba\u4f1a\u53d1\u75af\u3002 \u8fd9\u65f6\u5404\u4f4d\u53ef\u80fd\u8981\u95ee\uff0c\u65e2\u7136\u5206\u7c7b\u5982\u6b64\u4e4b\u597d\uff0c\u805a\u7c7b\u5982\u6b64\u4e4b\u4e0d\u9760\u8c31\uff0c\u90a3\u4e3a\u4f55\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bb9\u5fcd\u805a\u7c7b\u7684\u5b58\u5728\uff1f\u56e0\u4e3a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6807\u7b7e\u7684\u83b7\u53d6\u5e38\u5e38\u9700\u8981\u6781\u5927\u7684\u4eba\u5de5\u5de5\u4f5c\u91cf\uff0c\u6709\u65f6\u751a\u81f3\u975e\u5e38\u56f0\u96be\u3002\u4f8b\u5982\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4e2d\uff0cPenn Chinese Treebank\u57282\u5e74\u91cc\u53ea\u5b8c\u6210\u4e864000\u53e5\u8bdd\u7684\u6807\u7b7e\u2026\u2026 \u8fd9\u65f6\u6709\u4eba\u53ef\u80fd\u4f1a\u60f3\uff0c\u96be\u9053\u6709\u76d1\u7763\u5b66\u4e60\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u5c31\u662f\u975e\u9ed1\u5373\u767d\u7684\u5173\u7cfb\u5417\uff1f\u6709\u6ca1\u6709\u7070\u5462\uff1fGood idea\u3002\u7070\u662f\u5b58\u5728\u7684\u3002\u4e8c\u8005\u7684\u4e2d\u95f4\u5e26\u5c31\u662f\u534a\u76d1\u7763\u5b66\u4e60\uff08semi-supervised learning\uff09\u3002\u5bf9\u4e8e\u534a\u76d1\u7763\u5b66\u4e60\uff0c\u5176\u8bad\u7ec3\u6570\u636e\u7684\u4e00\u90e8\u5206\u662f\u6709\u6807\u7b7e\u7684\uff0c\u53e6\u4e00\u90e8\u5206\u6ca1\u6709\u6807\u7b7e\uff0c\u800c\u6ca1\u6807\u7b7e\u6570\u636e\u7684\u6570\u91cf\u5e38\u5e38\u6781\u5927\u4e8e\u6709\u6807\u7b7e\u6570\u636e\u6570\u91cf\uff08\u8fd9\u4e5f\u662f\u7b26\u5408\u73b0\u5b9e\u60c5\u51b5\u7684\uff09\u3002\u9690\u85cf\u5728\u534a\u76d1\u7763\u5b66\u4e60\u4e0b\u7684\u57fa\u672c\u89c4\u5f8b\u5728\u4e8e\uff1a\u6570\u636e\u7684\u5206\u5e03\u5fc5\u7136\u4e0d\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u901a\u8fc7\u4e00\u4e9b\u6709\u6807\u7b7e\u6570\u636e\u7684\u5c40\u90e8\u7279\u5f81\uff0c\u4ee5\u53ca\u66f4\u591a\u6ca1\u6807\u7b7e\u6570\u636e\u7684\u6574\u4f53\u5206\u5e03\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u53ef\u4ee5\u63a5\u53d7\u751a\u81f3\u662f\u975e\u5e38\u597d\u7684\u5206\u7c7b\u7ed3\u679c\u3002\uff08\u6b64\u5904\u5927\u91cf\u5ffd\u7565\u7ec6\u8282\uff09 \u56e0\u6b64\uff0clearning\u5bb6\u65cf\u7684\u6574\u4f53\u6784\u9020\u662f\u8fd9\u6837\u7684\uff1a \u6709\u76d1\u7763\u5b66\u4e60\uff08\u5206\u7c7b\uff0c\u56de\u5f52\uff09 \u2195 \u534a\u76d1\u7763\u5b66\u4e60\uff08\u5206\u7c7b\uff0c\u56de\u5f52\uff09\uff0ctransductive learning\uff08\u5206\u7c7b\uff0c\u56de\u5f52\uff09 \u2195 \u534a\u76d1\u7763\u805a\u7c7b\uff08\u6709\u6807\u7b7e\u6570\u636e\u7684\u6807\u7b7e\u4e0d\u662f\u786e\u5b9a\u7684\uff0c\u7c7b\u4f3c\u4e8e\uff1a\u80af\u5b9a\u4e0d\u662fxxx\uff0c\u5f88\u53ef\u80fd\u662fyyy\uff09 \u2195 \u65e0\u76d1\u7763\u5b66\u4e60\uff08\u805a\u7c7b\uff09 \u6982\u5ff5 \u00b6 \u76d1\u7763\u5b66\u4e60 \u00b6 \u901a\u8fc7\u5df2\u6709\u7684\u8bad\u7ec3\u6837\u672c\uff08\u5373\u5df2\u77e5\u6570\u636e\u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u8f93\u51fa\uff09\u6765\u8bad\u7ec3\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u6700\u4f18\u6a21\u578b\uff0c\u518d\u5229\u7528\u8fd9\u4e2a\u6a21\u578b\u5c06\u6240\u6709\u65b0\u7684\u6570\u636e\u6837\u672c\u6620\u5c04\u4e3a\u76f8\u5e94\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u5bf9\u8f93\u51fa\u7ed3\u679c\u8fdb\u884c\u7b80\u5355\u7684\u5224\u65ad\u4ece\u800c\u5b9e\u73b0\u5206\u7c7b\u7684\u76ee\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6700\u4f18\u6a21\u578b\u4e5f\u5c31\u5177\u6709\u4e86\u5bf9\u672a\u77e5\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u7684\u80fd\u529b\u3002 \u76d1\u7763\u5b66\u4e60\u6700\u5e38\u89c1\u7684\u5c31\u662f\uff1a\u5206\u7c7b\uff08classification\uff09&\u56de\u5f52\uff08regression\uff09 \u65e0\u76d1\u7763\u5b66\u4e60 \u00b6 \u8f93\u5165\u6570\u636e\u6ca1\u6709\u88ab\u6807\u8bb0\uff0c\u4e5f\u6ca1\u6709\u786e\u5b9a\u7684\u7ed3\u679c\u3002\u6837\u672c\u6570\u636e\u7c7b\u522b\u672a\u77e5\uff0c\u9700\u8981\u6839\u636e\u6837\u672c\u95f4\u7684\u76f8\u4f3c\u6027\u5bf9\u6837\u672c\u96c6\u8fdb\u884c\u5206\u7c7b\uff08\u805a\u7c7b\uff0cclustering\uff09\u8bd5\u56fe\u4f7f\u7c7b\u5185\u5dee\u8ddd\u6700\u5c0f\u5316\uff0c\u7c7b\u95f4\u5dee\u8ddd\u6700\u5927\u5316\u3002\u901a\u4fd7\u70b9\u5c06\u5c31\u662f\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4e0d\u5c11\u60c5\u51b5\u4e0b\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u6837\u672c\u7684\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u8bad\u7ec3\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\uff0c\u56e0\u800c\u53ea\u80fd\u4ece\u539f\u5148\u6ca1\u6709\u6837\u672c\u6807\u7b7e\u7684\u6837\u672c\u96c6\u5f00\u59cb\u5b66\u4e60\u5206\u7c7b\u5668\u8bbe\u8ba1\u3002 \u65e0\u76d1\u7763\u5b66\u4e60\u6700\u5e38\u89c1\u7684\u5c31\u662f\uff1a\u805a\u7c7b\uff08Clustering\uff09 \u65e0\u76d1\u7763\u5b66\u4e60\u4e3e\u4f8b\uff1a - \u65b0\u95fb\u5206\u7c7b","title":"6.\u76d1\u7763\u5b66\u4e60\u548c\u65e0\u76d1\u7763\u5b66\u4e60"},{"location":"machine-learning-interview-qa/6/#6","text":"","title":"6. \u76d1\u7763\u5b66\u4e60\u548c\u65e0\u76d1\u7763\u5b66\u4e60"},{"location":"machine-learning-interview-qa/6/#_1","text":"\u662f\u5426\u6709\u76d1\u7763\uff08supervised\uff09\uff0c\u5c31\u770b\u8f93\u5165\u6570\u636e\u662f\u5426\u6709\u6807\u7b7e\uff08label\uff09\u3002\u8f93\u5165\u6570\u636e\u6709\u6807\u7b7e\uff0c\u5219\u4e3a\uff08\u6709\uff09\u76d1\u7763\u5b66\u4e60\uff0c\u6ca1\u6807\u7b7e\u5219\u4e3a\u65e0\u76d1\u7763\u5b66\u4e60\u3002","title":"\u5173\u952e\u533a\u522b"},{"location":"machine-learning-interview-qa/6/#_2","text":"\u4f5c\u8005\uff1a\u738b\u4e30 \u94fe\u63a5 \u9996\u5148\u770b\u4ec0\u4e48\u662f\u5b66\u4e60\uff08learning\uff09\uff1f\u4e00\u4e2a\u6210\u8bed\u5c31\u53ef\u6982\u62ec\uff1a\u4e3e\u4e00\u53cd\u4e09\u3002\u6b64\u5904\u4ee5\u9ad8\u8003\u4e3a\u4f8b\uff0c\u9ad8\u8003\u7684\u9898\u76ee\u5728\u4e0a\u8003\u573a\u524d\u6211\u4eec\u672a\u5fc5\u505a\u8fc7\uff0c\u4f46\u5728\u9ad8\u4e2d\u4e09\u5e74\u6211\u4eec\u505a\u8fc7\u5f88\u591a\u5f88\u591a\u9898\u76ee\uff0c\u61c2\u89e3\u9898\u65b9\u6cd5\uff0c\u56e0\u6b64\u8003\u573a\u4e0a\u9762\u5bf9\u964c\u751f\u95ee\u9898\u4e5f\u53ef\u4ee5\u7b97\u51fa\u7b54\u6848\u3002\u673a\u5668\u5b66\u4e60\u7684\u601d\u8def\u4e5f\u7c7b\u4f3c\uff1a\u6211\u4eec\u80fd\u4e0d\u80fd\u5229\u7528\u4e00\u4e9b\u8bad\u7ec3\u6570\u636e\uff08\u5df2\u7ecf\u505a\u8fc7\u7684\u9898\uff09\uff0c\u4f7f\u673a\u5668\u80fd\u591f\u5229\u7528\u5b83\u4eec\uff08\u89e3\u9898\u65b9\u6cd5\uff09\u5206\u6790\u672a\u77e5\u6570\u636e\uff08\u9ad8\u8003\u7684\u9898\u76ee\uff09\uff1f \u6700\u7b80\u5355\u4e5f\u6700\u666e\u904d\u7684\u4e00\u7c7b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5c31\u662f\u5206\u7c7b\uff08classification\uff09\u3002\u5bf9\u4e8e\u5206\u7c7b\uff0c\u8f93\u5165\u7684\u8bad\u7ec3\u6570\u636e\u6709\u7279\u5f81\uff08feature\uff09\uff0c\u6709\u6807\u7b7e\uff08label\uff09\u3002\u6240\u8c13\u7684\u5b66\u4e60\uff0c\u5176\u672c\u8d28\u5c31\u662f\u627e\u5230\u7279\u5f81\u548c\u6807\u7b7e\u95f4\u7684\u5173\u7cfb\uff08mapping\uff09\u3002\u8fd9\u6837\u5f53\u6709\u7279\u5f81\u800c\u65e0\u6807\u7b7e\u7684\u672a\u77e5\u6570\u636e\u8f93\u5165\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5df2\u6709\u7684\u5173\u7cfb\u5f97\u5230\u672a\u77e5\u6570\u636e\u6807\u7b7e\u3002 \u5728\u4e0a\u8ff0\u7684\u5206\u7c7b\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6240\u6709\u8bad\u7ec3\u6570\u636e\u90fd\u6709\u6807\u7b7e\uff0c\u5219\u4e3a\u6709\u76d1\u7763\u5b66\u4e60\uff08supervised learning\uff09\u3002\u5982\u679c\u6570\u636e\u6ca1\u6709\u6807\u7b7e\uff0c\u663e\u7136\u5c31\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff08unsupervised learning\uff09\u4e86\uff0c\u4e5f\u5373\u805a\u7c7b\uff08clustering\uff09\u3002\u76ee\u524d\u5206\u7c7b\u7b97\u6cd5\u7684\u6548\u679c\u8fd8\u662f\u4e0d\u9519\u7684\uff0c\u4f46\u76f8\u5bf9\u6765\u8bb2\uff0c\u805a\u7c7b\u7b97\u6cd5\u5c31\u6709\u4e9b\u60e8\u4e0d\u5fcd\u7779\u4e86\u3002\u786e\u5b9e\uff0c\u65e0\u76d1\u7763\u5b66\u4e60\u672c\u8eab\u7684\u7279\u70b9\u4f7f\u5176\u96be\u4ee5\u5f97\u5230\u5982\u5206\u7c7b\u4e00\u6837\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u7ed3\u679c\u3002\u8fd9\u4e5f\u6b63\u5982\u6211\u4eec\u5728\u9ad8\u4e2d\u505a\u9898\uff0c\u7b54\u6848\uff08\u6807\u7b7e\uff09\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5047\u8bbe\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u4eba\u8fdb\u5165\u9ad8\u4e2d\uff0c\u4e00\u4e2a\u6b63\u5e38\u5b66\u4e60\uff0c\u53e6\u4e00\u4eba\u505a\u7684\u6240\u6709\u9898\u76ee\u90fd\u6ca1\u6709\u7b54\u6848\uff0c\u90a3\u4e48\u60f3\u5fc5\u7b2c\u4e00\u4e2a\u4eba\u9ad8\u8003\u4f1a\u53d1\u6325\u66f4\u597d\uff0c\u7b2c\u4e8c\u4e2a\u4eba\u4f1a\u53d1\u75af\u3002 \u8fd9\u65f6\u5404\u4f4d\u53ef\u80fd\u8981\u95ee\uff0c\u65e2\u7136\u5206\u7c7b\u5982\u6b64\u4e4b\u597d\uff0c\u805a\u7c7b\u5982\u6b64\u4e4b\u4e0d\u9760\u8c31\uff0c\u90a3\u4e3a\u4f55\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bb9\u5fcd\u805a\u7c7b\u7684\u5b58\u5728\uff1f\u56e0\u4e3a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6807\u7b7e\u7684\u83b7\u53d6\u5e38\u5e38\u9700\u8981\u6781\u5927\u7684\u4eba\u5de5\u5de5\u4f5c\u91cf\uff0c\u6709\u65f6\u751a\u81f3\u975e\u5e38\u56f0\u96be\u3002\u4f8b\u5982\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4e2d\uff0cPenn Chinese Treebank\u57282\u5e74\u91cc\u53ea\u5b8c\u6210\u4e864000\u53e5\u8bdd\u7684\u6807\u7b7e\u2026\u2026 \u8fd9\u65f6\u6709\u4eba\u53ef\u80fd\u4f1a\u60f3\uff0c\u96be\u9053\u6709\u76d1\u7763\u5b66\u4e60\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u5c31\u662f\u975e\u9ed1\u5373\u767d\u7684\u5173\u7cfb\u5417\uff1f\u6709\u6ca1\u6709\u7070\u5462\uff1fGood idea\u3002\u7070\u662f\u5b58\u5728\u7684\u3002\u4e8c\u8005\u7684\u4e2d\u95f4\u5e26\u5c31\u662f\u534a\u76d1\u7763\u5b66\u4e60\uff08semi-supervised learning\uff09\u3002\u5bf9\u4e8e\u534a\u76d1\u7763\u5b66\u4e60\uff0c\u5176\u8bad\u7ec3\u6570\u636e\u7684\u4e00\u90e8\u5206\u662f\u6709\u6807\u7b7e\u7684\uff0c\u53e6\u4e00\u90e8\u5206\u6ca1\u6709\u6807\u7b7e\uff0c\u800c\u6ca1\u6807\u7b7e\u6570\u636e\u7684\u6570\u91cf\u5e38\u5e38\u6781\u5927\u4e8e\u6709\u6807\u7b7e\u6570\u636e\u6570\u91cf\uff08\u8fd9\u4e5f\u662f\u7b26\u5408\u73b0\u5b9e\u60c5\u51b5\u7684\uff09\u3002\u9690\u85cf\u5728\u534a\u76d1\u7763\u5b66\u4e60\u4e0b\u7684\u57fa\u672c\u89c4\u5f8b\u5728\u4e8e\uff1a\u6570\u636e\u7684\u5206\u5e03\u5fc5\u7136\u4e0d\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u901a\u8fc7\u4e00\u4e9b\u6709\u6807\u7b7e\u6570\u636e\u7684\u5c40\u90e8\u7279\u5f81\uff0c\u4ee5\u53ca\u66f4\u591a\u6ca1\u6807\u7b7e\u6570\u636e\u7684\u6574\u4f53\u5206\u5e03\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u53ef\u4ee5\u63a5\u53d7\u751a\u81f3\u662f\u975e\u5e38\u597d\u7684\u5206\u7c7b\u7ed3\u679c\u3002\uff08\u6b64\u5904\u5927\u91cf\u5ffd\u7565\u7ec6\u8282\uff09 \u56e0\u6b64\uff0clearning\u5bb6\u65cf\u7684\u6574\u4f53\u6784\u9020\u662f\u8fd9\u6837\u7684\uff1a \u6709\u76d1\u7763\u5b66\u4e60\uff08\u5206\u7c7b\uff0c\u56de\u5f52\uff09 \u2195 \u534a\u76d1\u7763\u5b66\u4e60\uff08\u5206\u7c7b\uff0c\u56de\u5f52\uff09\uff0ctransductive learning\uff08\u5206\u7c7b\uff0c\u56de\u5f52\uff09 \u2195 \u534a\u76d1\u7763\u805a\u7c7b\uff08\u6709\u6807\u7b7e\u6570\u636e\u7684\u6807\u7b7e\u4e0d\u662f\u786e\u5b9a\u7684\uff0c\u7c7b\u4f3c\u4e8e\uff1a\u80af\u5b9a\u4e0d\u662fxxx\uff0c\u5f88\u53ef\u80fd\u662fyyy\uff09 \u2195 \u65e0\u76d1\u7763\u5b66\u4e60\uff08\u805a\u7c7b\uff09","title":"\u77e5\u4e4e\u7684\u901a\u4fd7\u56de\u7b54"},{"location":"machine-learning-interview-qa/6/#_3","text":"","title":"\u6982\u5ff5"},{"location":"machine-learning-interview-qa/6/#_4","text":"\u901a\u8fc7\u5df2\u6709\u7684\u8bad\u7ec3\u6837\u672c\uff08\u5373\u5df2\u77e5\u6570\u636e\u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u8f93\u51fa\uff09\u6765\u8bad\u7ec3\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u6700\u4f18\u6a21\u578b\uff0c\u518d\u5229\u7528\u8fd9\u4e2a\u6a21\u578b\u5c06\u6240\u6709\u65b0\u7684\u6570\u636e\u6837\u672c\u6620\u5c04\u4e3a\u76f8\u5e94\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u5bf9\u8f93\u51fa\u7ed3\u679c\u8fdb\u884c\u7b80\u5355\u7684\u5224\u65ad\u4ece\u800c\u5b9e\u73b0\u5206\u7c7b\u7684\u76ee\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6700\u4f18\u6a21\u578b\u4e5f\u5c31\u5177\u6709\u4e86\u5bf9\u672a\u77e5\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u7684\u80fd\u529b\u3002 \u76d1\u7763\u5b66\u4e60\u6700\u5e38\u89c1\u7684\u5c31\u662f\uff1a\u5206\u7c7b\uff08classification\uff09&\u56de\u5f52\uff08regression\uff09","title":"\u76d1\u7763\u5b66\u4e60"},{"location":"machine-learning-interview-qa/6/#_5","text":"\u8f93\u5165\u6570\u636e\u6ca1\u6709\u88ab\u6807\u8bb0\uff0c\u4e5f\u6ca1\u6709\u786e\u5b9a\u7684\u7ed3\u679c\u3002\u6837\u672c\u6570\u636e\u7c7b\u522b\u672a\u77e5\uff0c\u9700\u8981\u6839\u636e\u6837\u672c\u95f4\u7684\u76f8\u4f3c\u6027\u5bf9\u6837\u672c\u96c6\u8fdb\u884c\u5206\u7c7b\uff08\u805a\u7c7b\uff0cclustering\uff09\u8bd5\u56fe\u4f7f\u7c7b\u5185\u5dee\u8ddd\u6700\u5c0f\u5316\uff0c\u7c7b\u95f4\u5dee\u8ddd\u6700\u5927\u5316\u3002\u901a\u4fd7\u70b9\u5c06\u5c31\u662f\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4e0d\u5c11\u60c5\u51b5\u4e0b\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u6837\u672c\u7684\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u8bad\u7ec3\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\uff0c\u56e0\u800c\u53ea\u80fd\u4ece\u539f\u5148\u6ca1\u6709\u6837\u672c\u6807\u7b7e\u7684\u6837\u672c\u96c6\u5f00\u59cb\u5b66\u4e60\u5206\u7c7b\u5668\u8bbe\u8ba1\u3002 \u65e0\u76d1\u7763\u5b66\u4e60\u6700\u5e38\u89c1\u7684\u5c31\u662f\uff1a\u805a\u7c7b\uff08Clustering\uff09 \u65e0\u76d1\u7763\u5b66\u4e60\u4e3e\u4f8b\uff1a - \u65b0\u95fb\u5206\u7c7b","title":"\u65e0\u76d1\u7763\u5b66\u4e60"},{"location":"machine-learning-interview-qa/7/","text":"7. \u71b5\u662f\u4e3a\u6d88\u9664\u4e0d\u786e\u5b9a\u6027\u6240\u9700\u8981\u83b7\u5f97\u7684\u4fe1\u606f\u91cf\uff0c\u6295\u63b7\u5747\u5300\u6b63\u516d\u9762\u4f53\u9ab0\u5b50\u7684\u71b5\u662f \u00b6 2.6\u6bd4\u7279 \u4fe1\u606f\u71b5 \u00b6 \u5982\u4f55\u8ba1\u7b97\u4fe1\u606f\u91cf\u7684\u591a\u5c11\uff1f\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6781\u5c11\u53d1\u751f\u7684\u4e8b\u4ef6\u4e00\u65e6\u53d1\u751f\u662f\u5bb9\u6613\u5f15\u8d77\u4eba\u4eec\u5173\u6ce8\u7684\uff0c\u800c\u53f8\u7a7a\u89c1\u60ef\u7684\u4e8b\u4e0d\u4f1a\u5f15\u8d77\u6ce8\u610f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6781\u5c11\u89c1\u7684\u4e8b\u4ef6\u6240\u5e26\u6765\u7684\u4fe1\u606f\u91cf\u591a\u3002\u5982\u679c\u7528\u7edf\u8ba1\u5b66\u7684\u672f\u8bed\u6765\u63cf\u8ff0\uff0c\u5c31\u662f\u51fa\u73b0\u6982\u7387\u5c0f\u7684\u4e8b\u4ef6\u4fe1\u606f\u91cf\u591a\u3002\u56e0\u6b64\uff0c\u4e8b\u4ef6\u51fa\u73b0\u5f97\u6982\u7387\u8d8a\u5c0f\uff0c\u4fe1\u606f\u91cf\u6108\u5927\u3002\u5373\u4fe1\u606f\u91cf\u7684\u591a\u5c11\u662f\u4e0e\u4e8b\u4ef6\u53d1\u751f\u9891\u7e41(\u5373\u6982\u7387\u5927\u5c0f)\u6210\u53cd\u6bd4\u3002 1.\u5982\u5df2\u77e5\u4e8b\u4ef6Xi\u5df2\u53d1\u751f\uff0c\u5219\u8868\u793aXi\u6240\u542b\u6709\u6216\u6240\u63d0\u4f9b\u7684\u4fe1\u606f\u91cf H(Xi) = \u2212 logP(Xi) \u4f8b\u9898\uff1a\u82e5\u4f30\u8ba1\u5728\u4e00\u6b21\u56fd\u9645\u8c61\u68cb\u6bd4\u8d5b\u4e2d\u8c22\u519b\u83b7\u5f97\u51a0\u519b\u7684\u53ef\u80fd\u6027\u4e3a0.1(\u8bb0\u4e3a\u4e8b\u4ef6A)\uff0c\u800c\u5728\u53e6\u4e00\u6b21\u56fd\u9645\u8c61\u68cb\u6bd4\u8d5b\u4e2d\u5979\u5f97\u5230\u51a0\u519b\u7684\u53ef\u80fd\u6027\u4e3a0.9(\u8bb0\u4e3a\u4e8b\u4ef6B)\u3002\u8bd5\u5206\u522b\u8ba1\u7b97\u5f53\u4f60\u5f97\u77e5\u5979\u83b7\u5f97\u51a0\u519b\u65f6\uff0c\u4ece\u8fd9\u4e24\u4e2a\u4e8b\u4ef6\u4e2d\u83b7\u5f97\u7684\u4fe1\u606f\u91cf\u5404\u4e3a\u591a\u5c11\uff1f H(A)=-log2 P(0.1)\u22483.32(\u6bd4\u7279) H(B)=-log2 P(0.9)\u22480.152(\u6bd4\u7279) 2.\u7edf\u8ba1\u4fe1\u606f\u91cf\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a H(X)= sum^{n}_{i=1}P(Xi)log P(Xi) sum^{n}_{i=1}P(Xi)log P(Xi) <span><span class=\"MathJax_Preview\">sum^{n}_{i=1}P(Xi)log P(Xi)</span><script type=\"math/tex\">sum^{n}_{i=1}P(Xi)log P(Xi) Xi \u2014\u2014 \u8868\u793a\u7b2ci\u4e2a\u72b6\u6001(\u603b\u5171\u6709n\u79cd\u72b6\u6001)\uff1b P(Xi)\u2014\u2014\u8868\u793a\u7b2ci\u4e2a\u72b6\u6001\u51fa\u73b0\u7684\u6982\u7387\uff1b H(X)\u2014\u2014\u8868\u793a\u7528\u4ee5\u6d88\u9664\u8fd9\u4e2a\u4e8b\u7269\u7684\u4e0d\u786e\u5b9a\u6027\u6240\u9700\u8981\u7684\u4fe1\u606f\u91cf\u3002 \u4f8b\u9898\uff1a\u5411\u7a7a\u4e2d\u6295\u63b7\u786c\u5e01\uff0c\u843d\u5730\u540e\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u662f\u6b63\u9762\u671d\u4e0a\uff0c\u53e6\u4e00\u4e2a\u662f\u53cd\u9762\u671d\u4e0a\uff0c\u6bcf\u4e2a\u72b6\u6001\u51fa\u73b0\u7684\u6982\u7387\u4e3a\u00bd\u3002\u5982\u6295\u63b7\u5747\u5300\u7684\u6b63\u516d\u9762\u4f53\u7684\u9ab0\u5b50\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u72b6\u6001\u67096\u4e2a\uff0c\u6bcf\u4e00\u4e2a\u72b6\u6001\u51fa\u73b0\u7684\u6982\u7387\u5747\u4e3a\u2159\u3002\u8bd5\u901a\u8fc7\u8ba1\u7b97\u6765\u6bd4\u8f83\u72b6\u6001\u7684\u4e0d\u80af\u5b9a\u6027\u4e0e\u786c\u5e01\u72b6\u6001\u7684\u4e0d\u80af\u5b9a\u6027\u7684\u5927\u5c0f\u3002 H(\u786c\u5e01)= -\\sum^{n}_{i=1}P(Xi)log P(Xi) = -(2\u00d7\u00bd)\u00d7logP2(\u00bd)\u22481(\u6bd4\u7279) H(\u9ab0\u5b50)= -\\sum^{n}_{i=1}P(Xi)log P(Xi) = -6\u00d7(\u2159)\u00d7logP2(\u2159)\u22482.6(\u6bd4\u7279) \u7531\u4ee5\u4e0a\u8ba1\u7b97\u53ef\u4ee5\u5f97\u51fa\u4e24\u4e2a\u63a8\u8bba\uff1a [\u63a8\u8bba1] \u5f53\u4e14\u4ec5\u5f53\u67d0\u4e2aP(Xi)=1\uff0c\u5176\u4f59\u7684\u90fd\u7b49\u4e8e0\u65f6\uff0c H(X)= 0\u3002 [\u63a8\u8bba2]\u5f53\u4e14\u4ec5\u5f53\u67d0\u4e2aP(Xi)=1/n\uff0ci=1\uff0c 2\uff0c\u2026\u2026\uff0c n\u65f6\uff0cH(X)\u6709\u6781\u5927\u503clog n\u3002 \u6570\u503c\u5c5e\u6027\u662f\u53ef\u5ea6\u91cf\u7684\u91cf\uff0c\u7528\u6574\u6570\u6216\u5b9e\u6570\u503c\u8868\u793a\uff0c\u6709\u533a\u95f4\u6807\u5ea6\u548c\u6bd4\u7387\u6807\u5ea6\u4e24\u79cd\u7c7b\u578b\u3002","title":"7.\u71b5\u662f\u4e3a\u6d88\u9664\u4e0d\u786e\u5b9a\u6027\u6240\u9700\u8981\u83b7\u5f97\u7684\u4fe1\u606f\u91cf\uff0c\u6295\u63b7\u5747\u5300\u6b63\u516d\u9762\u4f53\u9ab0\u5b50\u7684\u71b5\u662f"},{"location":"machine-learning-interview-qa/7/#7","text":"2.6\u6bd4\u7279","title":"7. \u71b5\u662f\u4e3a\u6d88\u9664\u4e0d\u786e\u5b9a\u6027\u6240\u9700\u8981\u83b7\u5f97\u7684\u4fe1\u606f\u91cf\uff0c\u6295\u63b7\u5747\u5300\u6b63\u516d\u9762\u4f53\u9ab0\u5b50\u7684\u71b5\u662f"},{"location":"machine-learning-interview-qa/7/#_1","text":"\u5982\u4f55\u8ba1\u7b97\u4fe1\u606f\u91cf\u7684\u591a\u5c11\uff1f\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6781\u5c11\u53d1\u751f\u7684\u4e8b\u4ef6\u4e00\u65e6\u53d1\u751f\u662f\u5bb9\u6613\u5f15\u8d77\u4eba\u4eec\u5173\u6ce8\u7684\uff0c\u800c\u53f8\u7a7a\u89c1\u60ef\u7684\u4e8b\u4e0d\u4f1a\u5f15\u8d77\u6ce8\u610f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6781\u5c11\u89c1\u7684\u4e8b\u4ef6\u6240\u5e26\u6765\u7684\u4fe1\u606f\u91cf\u591a\u3002\u5982\u679c\u7528\u7edf\u8ba1\u5b66\u7684\u672f\u8bed\u6765\u63cf\u8ff0\uff0c\u5c31\u662f\u51fa\u73b0\u6982\u7387\u5c0f\u7684\u4e8b\u4ef6\u4fe1\u606f\u91cf\u591a\u3002\u56e0\u6b64\uff0c\u4e8b\u4ef6\u51fa\u73b0\u5f97\u6982\u7387\u8d8a\u5c0f\uff0c\u4fe1\u606f\u91cf\u6108\u5927\u3002\u5373\u4fe1\u606f\u91cf\u7684\u591a\u5c11\u662f\u4e0e\u4e8b\u4ef6\u53d1\u751f\u9891\u7e41(\u5373\u6982\u7387\u5927\u5c0f)\u6210\u53cd\u6bd4\u3002 1.\u5982\u5df2\u77e5\u4e8b\u4ef6Xi\u5df2\u53d1\u751f\uff0c\u5219\u8868\u793aXi\u6240\u542b\u6709\u6216\u6240\u63d0\u4f9b\u7684\u4fe1\u606f\u91cf H(Xi) = \u2212 logP(Xi) \u4f8b\u9898\uff1a\u82e5\u4f30\u8ba1\u5728\u4e00\u6b21\u56fd\u9645\u8c61\u68cb\u6bd4\u8d5b\u4e2d\u8c22\u519b\u83b7\u5f97\u51a0\u519b\u7684\u53ef\u80fd\u6027\u4e3a0.1(\u8bb0\u4e3a\u4e8b\u4ef6A)\uff0c\u800c\u5728\u53e6\u4e00\u6b21\u56fd\u9645\u8c61\u68cb\u6bd4\u8d5b\u4e2d\u5979\u5f97\u5230\u51a0\u519b\u7684\u53ef\u80fd\u6027\u4e3a0.9(\u8bb0\u4e3a\u4e8b\u4ef6B)\u3002\u8bd5\u5206\u522b\u8ba1\u7b97\u5f53\u4f60\u5f97\u77e5\u5979\u83b7\u5f97\u51a0\u519b\u65f6\uff0c\u4ece\u8fd9\u4e24\u4e2a\u4e8b\u4ef6\u4e2d\u83b7\u5f97\u7684\u4fe1\u606f\u91cf\u5404\u4e3a\u591a\u5c11\uff1f H(A)=-log2 P(0.1)\u22483.32(\u6bd4\u7279) H(B)=-log2 P(0.9)\u22480.152(\u6bd4\u7279) 2.\u7edf\u8ba1\u4fe1\u606f\u91cf\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a H(X)= sum^{n}_{i=1}P(Xi)log P(Xi) sum^{n}_{i=1}P(Xi)log P(Xi) <span><span class=\"MathJax_Preview\">sum^{n}_{i=1}P(Xi)log P(Xi)</span><script type=\"math/tex\">sum^{n}_{i=1}P(Xi)log P(Xi) Xi \u2014\u2014 \u8868\u793a\u7b2ci\u4e2a\u72b6\u6001(\u603b\u5171\u6709n\u79cd\u72b6\u6001)\uff1b P(Xi)\u2014\u2014\u8868\u793a\u7b2ci\u4e2a\u72b6\u6001\u51fa\u73b0\u7684\u6982\u7387\uff1b H(X)\u2014\u2014\u8868\u793a\u7528\u4ee5\u6d88\u9664\u8fd9\u4e2a\u4e8b\u7269\u7684\u4e0d\u786e\u5b9a\u6027\u6240\u9700\u8981\u7684\u4fe1\u606f\u91cf\u3002 \u4f8b\u9898\uff1a\u5411\u7a7a\u4e2d\u6295\u63b7\u786c\u5e01\uff0c\u843d\u5730\u540e\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u72b6\u6001\uff0c\u4e00\u4e2a\u662f\u6b63\u9762\u671d\u4e0a\uff0c\u53e6\u4e00\u4e2a\u662f\u53cd\u9762\u671d\u4e0a\uff0c\u6bcf\u4e2a\u72b6\u6001\u51fa\u73b0\u7684\u6982\u7387\u4e3a\u00bd\u3002\u5982\u6295\u63b7\u5747\u5300\u7684\u6b63\u516d\u9762\u4f53\u7684\u9ab0\u5b50\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u72b6\u6001\u67096\u4e2a\uff0c\u6bcf\u4e00\u4e2a\u72b6\u6001\u51fa\u73b0\u7684\u6982\u7387\u5747\u4e3a\u2159\u3002\u8bd5\u901a\u8fc7\u8ba1\u7b97\u6765\u6bd4\u8f83\u72b6\u6001\u7684\u4e0d\u80af\u5b9a\u6027\u4e0e\u786c\u5e01\u72b6\u6001\u7684\u4e0d\u80af\u5b9a\u6027\u7684\u5927\u5c0f\u3002 H(\u786c\u5e01)= -\\sum^{n}_{i=1}P(Xi)log P(Xi) = -(2\u00d7\u00bd)\u00d7logP2(\u00bd)\u22481(\u6bd4\u7279) H(\u9ab0\u5b50)= -\\sum^{n}_{i=1}P(Xi)log P(Xi) = -6\u00d7(\u2159)\u00d7logP2(\u2159)\u22482.6(\u6bd4\u7279) \u7531\u4ee5\u4e0a\u8ba1\u7b97\u53ef\u4ee5\u5f97\u51fa\u4e24\u4e2a\u63a8\u8bba\uff1a [\u63a8\u8bba1] \u5f53\u4e14\u4ec5\u5f53\u67d0\u4e2aP(Xi)=1\uff0c\u5176\u4f59\u7684\u90fd\u7b49\u4e8e0\u65f6\uff0c H(X)= 0\u3002 [\u63a8\u8bba2]\u5f53\u4e14\u4ec5\u5f53\u67d0\u4e2aP(Xi)=1/n\uff0ci=1\uff0c 2\uff0c\u2026\u2026\uff0c n\u65f6\uff0cH(X)\u6709\u6781\u5927\u503clog n\u3002 \u6570\u503c\u5c5e\u6027\u662f\u53ef\u5ea6\u91cf\u7684\u91cf\uff0c\u7528\u6574\u6570\u6216\u5b9e\u6570\u503c\u8868\u793a\uff0c\u6709\u533a\u95f4\u6807\u5ea6\u548c\u6bd4\u7387\u6807\u5ea6\u4e24\u79cd\u7c7b\u578b\u3002","title":"\u4fe1\u606f\u71b5"},{"location":"machine-learning-interview-qa/8/","text":"8. \u6570\u636e\u6e05\u6d17\u4e0e\u7279\u5f81\u5904\u7406 \u00b6 \u6570\u636e\u6e05\u6d17 \u00b6 \u6e05\u6d17\u6807\u6ce8\u6570\u636e\uff0c\u4e3b\u8981\u662f\u6570\u636e\u91c7\u6837\u548c\u6837\u672c\u8fc7\u6ee4 \u6570\u636e\u91c7\u6837 \u6570\u636e\u91c7\u6837\uff0c\u4f8b\u5982\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff1a\u9009\u53d6\u6b63\u4f8b\uff0c\u8d1f\u4f8b\u3002\u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\uff0c\u9700\u8981\u91c7\u96c6\u6570\u636e\u3002\u5bf9\u4e8e\u91c7\u6837\u5f97\u5230\u7684\u6837\u672c\uff0c\u6839\u636e\u9700\u8981\uff0c\u9700\u8981\u8bbe\u5b9a\u6837\u672c\u6743\u91cd\u3002\u5f53\u6a21\u578b\u4e0d\u80fd\u4f7f\u7528\u5168\u90e8\u7684\u6570\u636e\u6765\u8bad\u7ec3\u65f6\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u91c7\u6837\uff0c\u8bbe\u5b9a\u4e00\u5b9a\u7684\u91c7\u6837\u7387\u3002\u91c7\u6837\u7684\u65b9\u6cd5\u5305\u62ec\u968f\u673a\u91c7\u6837\uff0c\u56fa\u5b9a\u6bd4\u4f8b\u91c7\u6837\u7b49\u65b9\u6cd5\u3002 \u6837\u672c\u8fc7\u6ee4 1.\u7ed3\u5408\u4e1a\u52a1\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u7684\u8fc7\u6ee4\uff0c\u4f8b\u5982\u53bb\u9664crawler\u6293\u53d6\uff0cspam\uff0c\u4f5c\u5f0a\u7b49\u6570\u636e\u3002 2.\u5f02\u5e38\u70b9\u68c0\u6d4b\uff0c\u91c7\u7528\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\u5bf9\u6837\u672c\u8fdb\u884c\u5206\u6790\uff0c\u5e38\u7528\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\u5305\u62ec\uff1a \u504f\u5dee\u68c0\u6d4b\uff0c\u4f8b\u5982\u805a\u7c7b\uff0c\u6700\u8fd1\u90bb\u7b49\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5 \u4f8b\u5982\u6781\u5dee\uff0c\u56db\u5206\u4f4d\u6570\u95f4\u8ddd\uff0c\u5747\u5dee\uff0c\u6807\u51c6\u5dee\u7b49\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9002\u5408\u4e8e\u6316\u6398\u5355\u53d8\u91cf\u7684\u6570\u503c\u578b\u6570\u636e\u3002\u5168\u8ddd(Range)\uff0c\u53c8\u79f0\u6781\u5dee\uff0c\u662f\u7528\u6765\u8868\u793a\u7edf\u8ba1\u8d44\u6599\u4e2d\u7684\u53d8\u5f02\u91cf\u6570(measures of variation) \uff0c\u5176\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u8ddd\uff1b\u56db\u5206\u4f4d\u8ddd\u901a\u5e38\u662f\u7528\u6765\u6784\u5efa\u7bb1\u5f62\u56fe\uff0c\u4ee5\u53ca\u5bf9\u6982\u7387\u5206\u5e03\u7684\u7b80\u8981\u56fe\u8868\u6982\u8ff0\u3002 \u57fa\u4e8e\u8ddd\u79bb\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\uff0c\u4e3b\u8981\u901a\u8fc7\u8ddd\u79bb\u65b9\u6cd5\u6765\u68c0\u6d4b\u5f02\u5e38\u70b9\uff0c\u5c06\u6570\u636e\u96c6\u4e2d\u4e0e\u5927\u591a\u6570\u70b9\u4e4b\u95f4\u8ddd\u79bb\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\u7684\u70b9\u89c6\u4e3a\u5f02\u5e38\u70b9\uff0c\u4e3b\u8981\u4f7f\u7528\u7684\u8ddd\u79bb\u5ea6\u91cf\u65b9\u6cd5\u6709\u7edd\u5bf9\u8ddd\u79bb ( \u66fc\u54c8\u987f\u8ddd\u79bb ) \u3001\u6b27\u6c0f\u8ddd\u79bb\u548c\u9a6c\u6c0f\u8ddd\u79bb\u7b49\u65b9\u6cd5\u3002 \u57fa\u4e8e\u5bc6\u5ea6\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\uff0c\u8003\u5bdf\u5f53\u524d\u70b9\u5468\u56f4\u5bc6\u5ea6\uff0c\u53ef\u4ee5\u53d1\u73b0\u5c40\u90e8\u5f02\u5e38\u70b9\uff0c\u4f8b\u5982LOF\u7b97\u6cd5 \u7279\u5f81\u5904\u7406 \u00b6 \u7279\u5f81\u5904\u7406\u4e0e\u5206\u6790 \u00b6 \u5728\u5bf9\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u540e\uff0c\u4e0b\u9762\u4ecb\u7ecd\u4e0b\u5bf9\u7279\u5f81\u5e38\u7528\u7684\u5904\u7406\u65b9\u6cd5\u3002\u5305\u62ec1.\u7279\u5f81\u5f52\u4e00\u5316\uff0c\u79bb\u6563\u5316\uff0c\u7f3a\u7701\u503c\u5904\u7406\u30022.\u7279\u5f81\u964d\u7ef4\u65b9\u6cd5\u30023.\u7279\u5f81\u9009\u62e9\u65b9\u6cd5\u7b49\u3002 \u7279\u5f81\u5f52\u4e00\u5316\uff0c\u79bb\u6563\u5316\uff0c\u7f3a\u7701\u503c\u5904\u7406 \u4e3b\u8981\u7528\u4e8e\u5355\u4e2a\u7279\u5f81\u7684\u5904\u7406\u3002 \u5f52\u4e00\u5316 \u4e0d\u540c\u7684\u7279\u5f81\u6709\u4e0d\u540c\u7684\u53d6\u503c\u8303\u56f4\uff0c\u5728\u6709\u4e9b\u7b97\u6cd5\u4e2d\uff0c\u4f8b\u5982\u7ebf\u6027\u6a21\u578b\u6216\u8005\u8ddd\u79bb\u76f8\u5173\u7684\u6a21\u578b\u50cf\u805a\u7c7b\u6a21\u578b\u3001knn\u6a21\u578b\u7b49\uff0c\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u4f1a\u5bf9\u6700\u7ec8\u7684\u7ed3\u679c\u4ea7\u751f\u8f83\u5927\u5f71\u54cd\uff0c\u4f8b\u5982\u4e8c\u5143\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u4e3a[0\uff0c1]\uff0c\u800c\u8ddd\u79bb\u7279\u5f81\u53d6\u503c\u53ef\u80fd\u662f[0\uff0c\u6b63\u65e0\u7a77)\uff0c\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u4f1a\u5bf9\u8ddd\u79bb\u8fdb\u884c\u622a\u65ad\uff0c\u4f8b\u5982[0\uff0c3000000]\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u7279\u5f81\u7531\u4e8e\u53d6\u503c\u8303\u56f4\u4e0d\u4e00\u81f4\u5bfc\u81f4\u4e86\u6a21\u578b\u53ef\u80fd\u4f1a\u66f4\u504f\u5411\u4e8e\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u7279\u5f81\uff0c\u4e3a\u4e86\u5e73\u8861\u53d6\u503c\u8303\u56f4\u4e0d\u4e00\u81f4\u7684\u7279\u5f81\uff0c\u9700\u8981\u5bf9\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u5c06\u7279\u5f81\u53d6\u503c\u5f52\u4e00\u5316\u5230\uff3b0\uff0c1\uff3d\u533a\u95f4\u3002\u5e38\u7528\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\u5305\u62ec1.\u51fd\u6570\u5f52\u4e00\u5316\uff0c\u901a\u8fc7\u6620\u5c04\u51fd\u6570\u5c06\u7279\u5f81\u53d6\u503c\u6620\u5c04\u5230\uff3b0\uff0c1\uff3d\u533a\u95f4\uff0c\u4f8b\u5982\u6700\u5927\u6700\u5c0f\u503c\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u662f\u4e00\u79cd\u7ebf\u6027\u7684\u6620\u5c04\u3002\u8fd8\u6709\u901a\u8fc7\u975e\u7ebf\u6027\u51fd\u6570\u7684\u6620\u5c04\uff0c\u4f8b\u5982log\u51fd\u6570\u7b49\u30022.\u5206\u7ef4\u5ea6\u5f52\u4e00\u5316\uff0c\u53ef\u4ee5\u4f7f\u7528\u6700\u5927\u6700\u5c0f\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u4f46\u662f\u6700\u5927\u6700\u5c0f\u503c\u9009\u53d6\u7684\u662f\u6240\u5c5e\u7c7b\u522b\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c\u5373\u4f7f\u7528\u7684\u662f\u5c40\u90e8\u6700\u5927\u6700\u5c0f\u503c\uff0c\u4e0d\u662f\u5168\u5c40\u7684\u6700\u5927\u6700\u5c0f\u503c\u30023.\u6392\u5e8f\u5f52\u4e00\u5316\uff0c\u4e0d\u7ba1\u539f\u6765\u7684\u7279\u5f81\u53d6\u503c\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u5c06\u7279\u5f81\u6309\u5927\u5c0f\u6392\u5e8f\uff0c\u6839\u636e\u7279\u5f81\u6240\u5bf9\u5e94\u7684\u5e8f\u7ed9\u4e88\u4e00\u4e2a\u65b0\u7684\u503c\u3002 \u79bb\u6563\u5316 \u5728\u4e0a\u9762\u4ecb\u7ecd\u8fc7\u8fde\u7eed\u503c\u7684\u53d6\u503c\u7a7a\u95f4\u53ef\u80fd\u662f\u65e0\u7a77\u7684\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u8868\u793a\u548c\u5728\u6a21\u578b\u4e2d\u5904\u7406\uff0c\u9700\u8981\u5bf9\u8fde\u7eed\u503c\u7279\u5f81\u8fdb\u884c\u79bb\u6563\u5316\u5904\u7406\u3002\u5e38\u7528\u7684\u79bb\u6563\u5316\u65b9\u6cd5\u5305\u62ec\u7b49\u503c\u5212\u5206\u548c\u7b49\u91cf\u5212\u5206\u3002\u7b49\u503c\u5212\u5206\u662f\u5c06\u7279\u5f81\u6309\u7167\u503c\u57df\u8fdb\u884c\u5747\u5206\uff0c\u6bcf\u4e00\u6bb5\u5185\u7684\u53d6\u503c\u7b49\u540c\u5904\u7406\u3002\u4f8b\u5982\u67d0\u4e2a\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u4e3a[0\uff0c10]\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5212\u5206\u4e3a10\u6bb5\uff0c[0\uff0c1)\uff0c[1\uff0c2)\uff0c...\uff0c[9\uff0c10)\u3002\u7b49\u91cf\u5212\u5206\u662f\u6839\u636e\u6837\u672c\u603b\u6570\u8fdb\u884c\u5747\u5206\uff0c\u6bcf\u6bb5\u7b49\u91cf\u4e2a\u6837\u672c\u5212\u5206\u4e3a1\u6bb5\u3002\u4f8b\u5982\u8ddd\u79bb\u7279\u5f81\uff0c\u53d6\u503c\u8303\u56f4\uff3b0\uff0c3000000\uff3d\uff0c\u73b0\u5728\u9700\u8981\u5207\u5206\u621010\u6bb5\uff0c\u5982\u679c\u6309\u7167\u7b49\u6bd4\u4f8b\u5212\u5206\u7684\u8bdd\uff0c\u4f1a\u53d1\u73b0\u7edd\u5927\u90e8\u5206\u6837\u672c\u90fd\u5728\u7b2c1\u6bb5\u4e2d\u3002\u4f7f\u7528\u7b49\u91cf\u5212\u5206\u5c31\u4f1a\u907f\u514d\u8fd9\u79cd\u95ee\u9898\uff0c\u6700\u7ec8\u53ef\u80fd\u7684\u5207\u5206\u662f[0\uff0c100)\uff0c[100\uff0c300)\uff0c[300\uff0c500)\uff0c..\uff0c[10000\uff0c3000000]\uff0c\u524d\u9762\u7684\u533a\u95f4\u5212\u5206\u6bd4\u8f83\u5bc6\uff0c\u540e\u9762\u7684\u6bd4\u8f83\u7a00\u758f\u3002 \u7f3a\u7701\u503c\u5904\u7406 \u6709\u4e9b\u7279\u5f81\u53ef\u80fd\u56e0\u4e3a\u65e0\u6cd5\u91c7\u6837\u6216\u8005\u6ca1\u6709\u89c2\u6d4b\u503c\u800c\u7f3a\u5931\uff0c\u4f8b\u5982\u8ddd\u79bb\u7279\u5f81\uff0c\u7528\u6237\u53ef\u80fd\u7981\u6b62\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u6216\u8005\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u5931\u8d25\uff0c\u6b64\u65f6\u9700\u8981\u5bf9\u8fd9\u4e9b\u7279\u5f81\u505a\u7279\u6b8a\u7684\u5904\u7406\uff0c\u8d4b\u4e88\u4e00\u4e2a\u7f3a\u7701\u503c\u3002\u7f3a\u7701\u503c\u5982\u4f55\u8d4b\u4e88\uff0c\u4e5f\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\u3002\u4f8b\u5982\u5355\u72ec\u8868\u793a\uff0c\u4f17\u6570\uff0c\u5e73\u5747\u503c\u7b49\u3002 \u53c2\u8003 \u00b6 https://tech.meituan.com/machinelearning-data-feature-process.html","title":"8.\u6570\u636e\u6e05\u6d17\u4e0e\u7279\u5f81\u5904\u7406"},{"location":"machine-learning-interview-qa/8/#8","text":"","title":"8. \u6570\u636e\u6e05\u6d17\u4e0e\u7279\u5f81\u5904\u7406"},{"location":"machine-learning-interview-qa/8/#_1","text":"\u6e05\u6d17\u6807\u6ce8\u6570\u636e\uff0c\u4e3b\u8981\u662f\u6570\u636e\u91c7\u6837\u548c\u6837\u672c\u8fc7\u6ee4 \u6570\u636e\u91c7\u6837 \u6570\u636e\u91c7\u6837\uff0c\u4f8b\u5982\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff1a\u9009\u53d6\u6b63\u4f8b\uff0c\u8d1f\u4f8b\u3002\u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\uff0c\u9700\u8981\u91c7\u96c6\u6570\u636e\u3002\u5bf9\u4e8e\u91c7\u6837\u5f97\u5230\u7684\u6837\u672c\uff0c\u6839\u636e\u9700\u8981\uff0c\u9700\u8981\u8bbe\u5b9a\u6837\u672c\u6743\u91cd\u3002\u5f53\u6a21\u578b\u4e0d\u80fd\u4f7f\u7528\u5168\u90e8\u7684\u6570\u636e\u6765\u8bad\u7ec3\u65f6\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u91c7\u6837\uff0c\u8bbe\u5b9a\u4e00\u5b9a\u7684\u91c7\u6837\u7387\u3002\u91c7\u6837\u7684\u65b9\u6cd5\u5305\u62ec\u968f\u673a\u91c7\u6837\uff0c\u56fa\u5b9a\u6bd4\u4f8b\u91c7\u6837\u7b49\u65b9\u6cd5\u3002 \u6837\u672c\u8fc7\u6ee4 1.\u7ed3\u5408\u4e1a\u52a1\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u7684\u8fc7\u6ee4\uff0c\u4f8b\u5982\u53bb\u9664crawler\u6293\u53d6\uff0cspam\uff0c\u4f5c\u5f0a\u7b49\u6570\u636e\u3002 2.\u5f02\u5e38\u70b9\u68c0\u6d4b\uff0c\u91c7\u7528\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\u5bf9\u6837\u672c\u8fdb\u884c\u5206\u6790\uff0c\u5e38\u7528\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\u5305\u62ec\uff1a \u504f\u5dee\u68c0\u6d4b\uff0c\u4f8b\u5982\u805a\u7c7b\uff0c\u6700\u8fd1\u90bb\u7b49\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5 \u4f8b\u5982\u6781\u5dee\uff0c\u56db\u5206\u4f4d\u6570\u95f4\u8ddd\uff0c\u5747\u5dee\uff0c\u6807\u51c6\u5dee\u7b49\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9002\u5408\u4e8e\u6316\u6398\u5355\u53d8\u91cf\u7684\u6570\u503c\u578b\u6570\u636e\u3002\u5168\u8ddd(Range)\uff0c\u53c8\u79f0\u6781\u5dee\uff0c\u662f\u7528\u6765\u8868\u793a\u7edf\u8ba1\u8d44\u6599\u4e2d\u7684\u53d8\u5f02\u91cf\u6570(measures of variation) \uff0c\u5176\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u8ddd\uff1b\u56db\u5206\u4f4d\u8ddd\u901a\u5e38\u662f\u7528\u6765\u6784\u5efa\u7bb1\u5f62\u56fe\uff0c\u4ee5\u53ca\u5bf9\u6982\u7387\u5206\u5e03\u7684\u7b80\u8981\u56fe\u8868\u6982\u8ff0\u3002 \u57fa\u4e8e\u8ddd\u79bb\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\uff0c\u4e3b\u8981\u901a\u8fc7\u8ddd\u79bb\u65b9\u6cd5\u6765\u68c0\u6d4b\u5f02\u5e38\u70b9\uff0c\u5c06\u6570\u636e\u96c6\u4e2d\u4e0e\u5927\u591a\u6570\u70b9\u4e4b\u95f4\u8ddd\u79bb\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\u7684\u70b9\u89c6\u4e3a\u5f02\u5e38\u70b9\uff0c\u4e3b\u8981\u4f7f\u7528\u7684\u8ddd\u79bb\u5ea6\u91cf\u65b9\u6cd5\u6709\u7edd\u5bf9\u8ddd\u79bb ( \u66fc\u54c8\u987f\u8ddd\u79bb ) \u3001\u6b27\u6c0f\u8ddd\u79bb\u548c\u9a6c\u6c0f\u8ddd\u79bb\u7b49\u65b9\u6cd5\u3002 \u57fa\u4e8e\u5bc6\u5ea6\u7684\u5f02\u5e38\u70b9\u68c0\u6d4b\u7b97\u6cd5\uff0c\u8003\u5bdf\u5f53\u524d\u70b9\u5468\u56f4\u5bc6\u5ea6\uff0c\u53ef\u4ee5\u53d1\u73b0\u5c40\u90e8\u5f02\u5e38\u70b9\uff0c\u4f8b\u5982LOF\u7b97\u6cd5","title":"\u6570\u636e\u6e05\u6d17"},{"location":"machine-learning-interview-qa/8/#_2","text":"","title":"\u7279\u5f81\u5904\u7406"},{"location":"machine-learning-interview-qa/8/#_3","text":"\u5728\u5bf9\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u540e\uff0c\u4e0b\u9762\u4ecb\u7ecd\u4e0b\u5bf9\u7279\u5f81\u5e38\u7528\u7684\u5904\u7406\u65b9\u6cd5\u3002\u5305\u62ec1.\u7279\u5f81\u5f52\u4e00\u5316\uff0c\u79bb\u6563\u5316\uff0c\u7f3a\u7701\u503c\u5904\u7406\u30022.\u7279\u5f81\u964d\u7ef4\u65b9\u6cd5\u30023.\u7279\u5f81\u9009\u62e9\u65b9\u6cd5\u7b49\u3002 \u7279\u5f81\u5f52\u4e00\u5316\uff0c\u79bb\u6563\u5316\uff0c\u7f3a\u7701\u503c\u5904\u7406 \u4e3b\u8981\u7528\u4e8e\u5355\u4e2a\u7279\u5f81\u7684\u5904\u7406\u3002 \u5f52\u4e00\u5316 \u4e0d\u540c\u7684\u7279\u5f81\u6709\u4e0d\u540c\u7684\u53d6\u503c\u8303\u56f4\uff0c\u5728\u6709\u4e9b\u7b97\u6cd5\u4e2d\uff0c\u4f8b\u5982\u7ebf\u6027\u6a21\u578b\u6216\u8005\u8ddd\u79bb\u76f8\u5173\u7684\u6a21\u578b\u50cf\u805a\u7c7b\u6a21\u578b\u3001knn\u6a21\u578b\u7b49\uff0c\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u4f1a\u5bf9\u6700\u7ec8\u7684\u7ed3\u679c\u4ea7\u751f\u8f83\u5927\u5f71\u54cd\uff0c\u4f8b\u5982\u4e8c\u5143\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u4e3a[0\uff0c1]\uff0c\u800c\u8ddd\u79bb\u7279\u5f81\u53d6\u503c\u53ef\u80fd\u662f[0\uff0c\u6b63\u65e0\u7a77)\uff0c\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u4f1a\u5bf9\u8ddd\u79bb\u8fdb\u884c\u622a\u65ad\uff0c\u4f8b\u5982[0\uff0c3000000]\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u7279\u5f81\u7531\u4e8e\u53d6\u503c\u8303\u56f4\u4e0d\u4e00\u81f4\u5bfc\u81f4\u4e86\u6a21\u578b\u53ef\u80fd\u4f1a\u66f4\u504f\u5411\u4e8e\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u7279\u5f81\uff0c\u4e3a\u4e86\u5e73\u8861\u53d6\u503c\u8303\u56f4\u4e0d\u4e00\u81f4\u7684\u7279\u5f81\uff0c\u9700\u8981\u5bf9\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u5c06\u7279\u5f81\u53d6\u503c\u5f52\u4e00\u5316\u5230\uff3b0\uff0c1\uff3d\u533a\u95f4\u3002\u5e38\u7528\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\u5305\u62ec1.\u51fd\u6570\u5f52\u4e00\u5316\uff0c\u901a\u8fc7\u6620\u5c04\u51fd\u6570\u5c06\u7279\u5f81\u53d6\u503c\u6620\u5c04\u5230\uff3b0\uff0c1\uff3d\u533a\u95f4\uff0c\u4f8b\u5982\u6700\u5927\u6700\u5c0f\u503c\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u662f\u4e00\u79cd\u7ebf\u6027\u7684\u6620\u5c04\u3002\u8fd8\u6709\u901a\u8fc7\u975e\u7ebf\u6027\u51fd\u6570\u7684\u6620\u5c04\uff0c\u4f8b\u5982log\u51fd\u6570\u7b49\u30022.\u5206\u7ef4\u5ea6\u5f52\u4e00\u5316\uff0c\u53ef\u4ee5\u4f7f\u7528\u6700\u5927\u6700\u5c0f\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u4f46\u662f\u6700\u5927\u6700\u5c0f\u503c\u9009\u53d6\u7684\u662f\u6240\u5c5e\u7c7b\u522b\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c\u5373\u4f7f\u7528\u7684\u662f\u5c40\u90e8\u6700\u5927\u6700\u5c0f\u503c\uff0c\u4e0d\u662f\u5168\u5c40\u7684\u6700\u5927\u6700\u5c0f\u503c\u30023.\u6392\u5e8f\u5f52\u4e00\u5316\uff0c\u4e0d\u7ba1\u539f\u6765\u7684\u7279\u5f81\u53d6\u503c\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u5c06\u7279\u5f81\u6309\u5927\u5c0f\u6392\u5e8f\uff0c\u6839\u636e\u7279\u5f81\u6240\u5bf9\u5e94\u7684\u5e8f\u7ed9\u4e88\u4e00\u4e2a\u65b0\u7684\u503c\u3002 \u79bb\u6563\u5316 \u5728\u4e0a\u9762\u4ecb\u7ecd\u8fc7\u8fde\u7eed\u503c\u7684\u53d6\u503c\u7a7a\u95f4\u53ef\u80fd\u662f\u65e0\u7a77\u7684\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u8868\u793a\u548c\u5728\u6a21\u578b\u4e2d\u5904\u7406\uff0c\u9700\u8981\u5bf9\u8fde\u7eed\u503c\u7279\u5f81\u8fdb\u884c\u79bb\u6563\u5316\u5904\u7406\u3002\u5e38\u7528\u7684\u79bb\u6563\u5316\u65b9\u6cd5\u5305\u62ec\u7b49\u503c\u5212\u5206\u548c\u7b49\u91cf\u5212\u5206\u3002\u7b49\u503c\u5212\u5206\u662f\u5c06\u7279\u5f81\u6309\u7167\u503c\u57df\u8fdb\u884c\u5747\u5206\uff0c\u6bcf\u4e00\u6bb5\u5185\u7684\u53d6\u503c\u7b49\u540c\u5904\u7406\u3002\u4f8b\u5982\u67d0\u4e2a\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u4e3a[0\uff0c10]\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5212\u5206\u4e3a10\u6bb5\uff0c[0\uff0c1)\uff0c[1\uff0c2)\uff0c...\uff0c[9\uff0c10)\u3002\u7b49\u91cf\u5212\u5206\u662f\u6839\u636e\u6837\u672c\u603b\u6570\u8fdb\u884c\u5747\u5206\uff0c\u6bcf\u6bb5\u7b49\u91cf\u4e2a\u6837\u672c\u5212\u5206\u4e3a1\u6bb5\u3002\u4f8b\u5982\u8ddd\u79bb\u7279\u5f81\uff0c\u53d6\u503c\u8303\u56f4\uff3b0\uff0c3000000\uff3d\uff0c\u73b0\u5728\u9700\u8981\u5207\u5206\u621010\u6bb5\uff0c\u5982\u679c\u6309\u7167\u7b49\u6bd4\u4f8b\u5212\u5206\u7684\u8bdd\uff0c\u4f1a\u53d1\u73b0\u7edd\u5927\u90e8\u5206\u6837\u672c\u90fd\u5728\u7b2c1\u6bb5\u4e2d\u3002\u4f7f\u7528\u7b49\u91cf\u5212\u5206\u5c31\u4f1a\u907f\u514d\u8fd9\u79cd\u95ee\u9898\uff0c\u6700\u7ec8\u53ef\u80fd\u7684\u5207\u5206\u662f[0\uff0c100)\uff0c[100\uff0c300)\uff0c[300\uff0c500)\uff0c..\uff0c[10000\uff0c3000000]\uff0c\u524d\u9762\u7684\u533a\u95f4\u5212\u5206\u6bd4\u8f83\u5bc6\uff0c\u540e\u9762\u7684\u6bd4\u8f83\u7a00\u758f\u3002 \u7f3a\u7701\u503c\u5904\u7406 \u6709\u4e9b\u7279\u5f81\u53ef\u80fd\u56e0\u4e3a\u65e0\u6cd5\u91c7\u6837\u6216\u8005\u6ca1\u6709\u89c2\u6d4b\u503c\u800c\u7f3a\u5931\uff0c\u4f8b\u5982\u8ddd\u79bb\u7279\u5f81\uff0c\u7528\u6237\u53ef\u80fd\u7981\u6b62\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u6216\u8005\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u5931\u8d25\uff0c\u6b64\u65f6\u9700\u8981\u5bf9\u8fd9\u4e9b\u7279\u5f81\u505a\u7279\u6b8a\u7684\u5904\u7406\uff0c\u8d4b\u4e88\u4e00\u4e2a\u7f3a\u7701\u503c\u3002\u7f3a\u7701\u503c\u5982\u4f55\u8d4b\u4e88\uff0c\u4e5f\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\u3002\u4f8b\u5982\u5355\u72ec\u8868\u793a\uff0c\u4f17\u6570\uff0c\u5e73\u5747\u503c\u7b49\u3002","title":"\u7279\u5f81\u5904\u7406\u4e0e\u5206\u6790"},{"location":"machine-learning-interview-qa/8/#_4","text":"https://tech.meituan.com/machinelearning-data-feature-process.html","title":"\u53c2\u8003"},{"location":"machine-learning-interview-qa/9/","text":"9. \u731c\u6d4b\u8fd9\u79cd\u5212\u5206\u6700\u53ef\u80fd\u662f\u4ec0\u4e48\u805a\u7c7b\u7b97\u6cd5\u7684\u7ed3\u679c \u00b6 \u4ee5\u4e0b\u662f\u5404\u4e2a\u7b97\u6cd5\u7684\u6bd4\u8f83 \u00b6 \u5404\u4e2a\u805a\u7c7b\u7b97\u6cd5\u6bd4\u8f83\u7684Python\u4ee3\u7801 \u00b6 python\u4ee3\u7801\u94fe\u63a5 \u6700\u53ef\u80fd\u662fKMean\u7b97\u6cd5","title":"9.\u731c\u6d4b\u8fd9\u79cd\u5212\u5206\u6700\u53ef\u80fd\u662f\u4ec0\u4e48\u805a\u7c7b\u7b97\u6cd5\u7684\u7ed3\u679c"},{"location":"machine-learning-interview-qa/9/#9","text":"","title":"9. \u731c\u6d4b\u8fd9\u79cd\u5212\u5206\u6700\u53ef\u80fd\u662f\u4ec0\u4e48\u805a\u7c7b\u7b97\u6cd5\u7684\u7ed3\u679c"},{"location":"machine-learning-interview-qa/9/#_1","text":"","title":"\u4ee5\u4e0b\u662f\u5404\u4e2a\u7b97\u6cd5\u7684\u6bd4\u8f83"},{"location":"machine-learning-interview-qa/9/#python","text":"python\u4ee3\u7801\u94fe\u63a5 \u6700\u53ef\u80fd\u662fKMean\u7b97\u6cd5","title":"\u5404\u4e2a\u805a\u7c7b\u7b97\u6cd5\u6bd4\u8f83\u7684Python\u4ee3\u7801"},{"location":"stackoverflow-python-top-qa/","text":"StackOverflow\u4e0a\u7968\u6570\u6700\u9ad8\u7684100\u4e2aPython\u95ee\u9898 \u00b6 \u5e8f\u8a00 \u00b6 \u6574\u7406StackOverflow\u4e0a\u7968\u6570\u6700\u9ad8\u7684100\u4e2aPython\u95ee\u9898\uff0c\u6301\u7eed\u66f4\u65b0\u4e0e\u7ffb\u8bd1\u3002 \u53cb\u60c5\u94fe\u63a5 \u00b6 \u6781\u5ba2\u5154\u5154\u7684\u535a\u5ba2 \u8d21\u732e\u8005 \u00b6 Dai Jie Xu Ri Tijing Wang","title":"\u5e8f\u8a00"},{"location":"stackoverflow-python-top-qa/#stackoverflow100python","text":"","title":"StackOverflow\u4e0a\u7968\u6570\u6700\u9ad8\u7684100\u4e2aPython\u95ee\u9898"},{"location":"stackoverflow-python-top-qa/#_1","text":"\u6574\u7406StackOverflow\u4e0a\u7968\u6570\u6700\u9ad8\u7684100\u4e2aPython\u95ee\u9898\uff0c\u6301\u7eed\u66f4\u65b0\u4e0e\u7ffb\u8bd1\u3002","title":"\u5e8f\u8a00"},{"location":"stackoverflow-python-top-qa/#_2","text":"\u6781\u5ba2\u5154\u5154\u7684\u535a\u5ba2","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"stackoverflow-python-top-qa/#_3","text":"Dai Jie Xu Ri Tijing Wang","title":"\u8d21\u732e\u8005"},{"location":"stackoverflow-python-top-qa/1/","text":"1. yield\u5173\u952e\u5b57\u7684\u4f5c\u7528 \u00b6 \u9898\u76ee \u00b6 \"yield\"\u5173\u952e\u5b57\u662f\u505a\u4ec0\u4e48\u7684\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u60f3\u8981\u7406\u89e3yield\u5173\u952e\u5b57\uff0c\u4f60\u5fc5\u987b\u5148\u7406\u89e3generators\u662f\u4ec0\u4e48\uff0c\u7406\u89e3generators\u4e4b\u524d\u8981\u5148\u7406\u89e3iterables. Iterables \u00b6 \u5f53\u4f60\u521b\u5efa\u4e00\u4e2alist\uff0c\u4f60\u53ef\u4ee5\u4e00\u4e2a\u4e2a\u7684\u8bfb\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u5c31\u53eb\u505aiteration\uff1a >>> mylist = [ 1 , 2 , 3 ] >>> for i in mylist : ... print ( i ) 1 2 3 \u8fd9\u91cc\u7684mylist\u5c31\u662f\u4e00\u4e2aiterable\u3002\u5f53\u4f60\u7528\u4e00\u4e2alist\uff0c\u4f60\u5148\u521b\u5efa\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2aiterable\uff1a >>> mylist = [ x * x for x in range ( 3 )] >>> for i in mylist : ... print ( i ) 0 1 4 \u4efb\u4f55\u4f60\u4f7f\u7528\u201cfor...in...\u201d\u7684\u5730\u65b9\u5c31\u662f\u4e00\u4e2aiterable\uff1b\u4f8b\u5982lists\uff0cstrings\uff0cfiles... \u8fd9\u4e9biterables\u4f7f\u7528\u5f88\u65b9\u4fbf\u3002\u56e0\u4e3a\u4f60\u53ef\u4ee5\u60f3\u8bfb\u591a\u5c11\u8bfb\u591a\u5c11\uff0c\u4f46\u662f\u4f60\u9700\u8981\u628a\u5b83\u4eec\u90fd\u5b58\u5728\u5185\u5b58\u91cc\u9762\uff0c\u5f53\u4f60\u6709\u5f88\u591a\u503c\u7684\u65f6\u5019\u8fd9\u6837\u53ef\u80fd\u5c31\u4e0d\u592a\u597d\u4e86\u3002 Generators \u00b6 Generators\u4e5f\u662fiterators\uff0c\u662f\u4e00\u79cd\u53ea\u80fd\u904d\u5386\u4e00\u904d\u7684iterable\uff0cGenerators\u5e76\u4e0d\u628a\u6240\u6709\u503c\u90fd\u5b58\u5728\u5185\u5b58\u91cc\uff0c\u800c\u662f\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u751f\u6210\u8fd9\u4e9b\u503c\uff1a >>> mygenerator = ( x * x for x in range ( 3 )) >>> for i in mygenerator : ... print ( i ) 0 1 4 \u8fd9\u4e2a\u548c\u4f7f\u7528list\u4e00\u6837\u53ea\u662f\u4f60\u7528()\u800c\u4e0d\u662f[]\uff0c\u53ea\u662f\u4f60\u4e0d\u80fd\u518d\u6b21\u4f7f\u7528\u5f62\u5982for i in mygenerator\u56e0\u4e3a\u5b83\u53ea\u80fd\u88ab\u4f7f\u7528\u4e00\u6b21\uff0c\u5b83\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff0c\u7136\u540e\u629b\u5f03\u5b83\u518d\u8ba1\u7b971\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\u3002 Yield \u00b6 yield\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u7c7b\u4f3creturn\u7684\u7528\u6cd5\uff0c\u4e00\u4e2a\u51fd\u6570\u4f7f\u7528\u65f6\u4f1a\u8fd4\u56de\u4e00\u4e2agenerator\u3002 >>> def createGenerator (): ... mylist = range ( 3 ) ... for i in mylist : ... yield i * i ... >>> mygenerator = createGenerator () # create a generator >>> print ( mygenerator ) # mygenerator is an object! < generator object createGenerator at 0xb7555c34 > >>> for i in mygenerator : ... print ( i ) 0 1 4 \u5f53\u4f60\u77e5\u9053\u4f60\u7684\u51fd\u6570\u4f1a\u8fd4\u56de\u5f88\u591a\u6570\u636e\uff0c\u5e76\u4e14\u4f60\u77e5\u9053\u4f60\u4ec5\u4ec5\u9700\u8981\u8bfb\u53d6\u4e00\u6b21\u8fd9\u4e9b\u503c\u7684\u65f6\u5019\uff0c\u8fd9\u4e48\u7528\u5f88\u65b9\u4fbf\u3002 \u60f3\u8981\u638c\u63e1yield\uff0c\u4f60\u9700\u8981\u660e\u767d\u5f53\u4f60\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f60\u5199\u7684\u4ee3\u7801\u5e76\u6ca1\u6709\u5b9e\u9645\u5730\u5728run\uff0c\u800c\u53ea\u662f\u8fd4\u56de\u4e86\u4e00\u4e2agenerator\u7684\u5bf9\u8c61\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9btricky\u3002 \u7136\u540e\uff0c\u4f60\u7684\u4ee3\u7801\u4f1a\u5728\u6bcf\u4e00\u6b21for\u5faa\u73af\u4f7f\u7528\u8fd9\u4e2agenerator\u7684\u65f6\u5019run\u8d77\u6765\u3002 \u63a5\u4e0b\u6765\uff0c\u6700\u96be\u7684\u90e8\u5206\uff1a \u5f53for\u5faa\u73af\u7b2c\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2agenerator\u7684\u65f6\u5019\uff0c\u4f60\u7684\u4ee3\u7801\u4f1a\u4ece\u6700\u5f00\u59cb\u8fd0\u884c\uff0c\u76f4\u5230yield\u8bed\u53e5\uff0c\u7136\u540e\u4ed6\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u5faa\u73af\u7684\u7b2c\u4e00\u4e2a\u503c\u3002\u7136\u540e\u6bcf\u4e00\u6b21\u8c03\u7528\uff0c\u90fd\u4f1a\u518d\u4e00\u6b21\u8fd0\u884c\u8fd9\u4e2afunction\u5e76\u4e14\u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c\uff0c\u76f4\u5230\u6ca1\u6709\u503c\u53ef\u4ee5\u8fd4\u56de\u3002 \u4e00\u65e6\u8fd9\u4e2afunction\u8fd0\u884c\u5230\u518d\u4e5f\u4e0d\u4f1ahit yield\u8bed\u53e5\uff0c\u8fd9\u4e2agenerator\u4f1a\u88ab\u89c6\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u5faa\u73af\u7ed3\u675f\u4e86\uff0c\u6216\u8005\u4f60\u4e0d\u6ee1\u8db3\u4f60\u7684if else\u8bed\u53e5\u4e86\u3002","title":"1.yield\u5173\u952e\u5b57\u7684\u4f5c\u7528"},{"location":"stackoverflow-python-top-qa/1/#1-yield","text":"","title":"1. yield\u5173\u952e\u5b57\u7684\u4f5c\u7528"},{"location":"stackoverflow-python-top-qa/1/#_1","text":"\"yield\"\u5173\u952e\u5b57\u662f\u505a\u4ec0\u4e48\u7684\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/1/#_2","text":"\u60f3\u8981\u7406\u89e3yield\u5173\u952e\u5b57\uff0c\u4f60\u5fc5\u987b\u5148\u7406\u89e3generators\u662f\u4ec0\u4e48\uff0c\u7406\u89e3generators\u4e4b\u524d\u8981\u5148\u7406\u89e3iterables.","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/1/#iterables","text":"\u5f53\u4f60\u521b\u5efa\u4e00\u4e2alist\uff0c\u4f60\u53ef\u4ee5\u4e00\u4e2a\u4e2a\u7684\u8bfb\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u5c31\u53eb\u505aiteration\uff1a >>> mylist = [ 1 , 2 , 3 ] >>> for i in mylist : ... print ( i ) 1 2 3 \u8fd9\u91cc\u7684mylist\u5c31\u662f\u4e00\u4e2aiterable\u3002\u5f53\u4f60\u7528\u4e00\u4e2alist\uff0c\u4f60\u5148\u521b\u5efa\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2aiterable\uff1a >>> mylist = [ x * x for x in range ( 3 )] >>> for i in mylist : ... print ( i ) 0 1 4 \u4efb\u4f55\u4f60\u4f7f\u7528\u201cfor...in...\u201d\u7684\u5730\u65b9\u5c31\u662f\u4e00\u4e2aiterable\uff1b\u4f8b\u5982lists\uff0cstrings\uff0cfiles... \u8fd9\u4e9biterables\u4f7f\u7528\u5f88\u65b9\u4fbf\u3002\u56e0\u4e3a\u4f60\u53ef\u4ee5\u60f3\u8bfb\u591a\u5c11\u8bfb\u591a\u5c11\uff0c\u4f46\u662f\u4f60\u9700\u8981\u628a\u5b83\u4eec\u90fd\u5b58\u5728\u5185\u5b58\u91cc\u9762\uff0c\u5f53\u4f60\u6709\u5f88\u591a\u503c\u7684\u65f6\u5019\u8fd9\u6837\u53ef\u80fd\u5c31\u4e0d\u592a\u597d\u4e86\u3002","title":"Iterables"},{"location":"stackoverflow-python-top-qa/1/#generators","text":"Generators\u4e5f\u662fiterators\uff0c\u662f\u4e00\u79cd\u53ea\u80fd\u904d\u5386\u4e00\u904d\u7684iterable\uff0cGenerators\u5e76\u4e0d\u628a\u6240\u6709\u503c\u90fd\u5b58\u5728\u5185\u5b58\u91cc\uff0c\u800c\u662f\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u751f\u6210\u8fd9\u4e9b\u503c\uff1a >>> mygenerator = ( x * x for x in range ( 3 )) >>> for i in mygenerator : ... print ( i ) 0 1 4 \u8fd9\u4e2a\u548c\u4f7f\u7528list\u4e00\u6837\u53ea\u662f\u4f60\u7528()\u800c\u4e0d\u662f[]\uff0c\u53ea\u662f\u4f60\u4e0d\u80fd\u518d\u6b21\u4f7f\u7528\u5f62\u5982for i in mygenerator\u56e0\u4e3a\u5b83\u53ea\u80fd\u88ab\u4f7f\u7528\u4e00\u6b21\uff0c\u5b83\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff0c\u7136\u540e\u629b\u5f03\u5b83\u518d\u8ba1\u7b971\uff0c\u4e00\u4e2a\u63a5\u4e00\u4e2a\u3002","title":"Generators"},{"location":"stackoverflow-python-top-qa/1/#yield","text":"yield\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u7c7b\u4f3creturn\u7684\u7528\u6cd5\uff0c\u4e00\u4e2a\u51fd\u6570\u4f7f\u7528\u65f6\u4f1a\u8fd4\u56de\u4e00\u4e2agenerator\u3002 >>> def createGenerator (): ... mylist = range ( 3 ) ... for i in mylist : ... yield i * i ... >>> mygenerator = createGenerator () # create a generator >>> print ( mygenerator ) # mygenerator is an object! < generator object createGenerator at 0xb7555c34 > >>> for i in mygenerator : ... print ( i ) 0 1 4 \u5f53\u4f60\u77e5\u9053\u4f60\u7684\u51fd\u6570\u4f1a\u8fd4\u56de\u5f88\u591a\u6570\u636e\uff0c\u5e76\u4e14\u4f60\u77e5\u9053\u4f60\u4ec5\u4ec5\u9700\u8981\u8bfb\u53d6\u4e00\u6b21\u8fd9\u4e9b\u503c\u7684\u65f6\u5019\uff0c\u8fd9\u4e48\u7528\u5f88\u65b9\u4fbf\u3002 \u60f3\u8981\u638c\u63e1yield\uff0c\u4f60\u9700\u8981\u660e\u767d\u5f53\u4f60\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f60\u5199\u7684\u4ee3\u7801\u5e76\u6ca1\u6709\u5b9e\u9645\u5730\u5728run\uff0c\u800c\u53ea\u662f\u8fd4\u56de\u4e86\u4e00\u4e2agenerator\u7684\u5bf9\u8c61\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9btricky\u3002 \u7136\u540e\uff0c\u4f60\u7684\u4ee3\u7801\u4f1a\u5728\u6bcf\u4e00\u6b21for\u5faa\u73af\u4f7f\u7528\u8fd9\u4e2agenerator\u7684\u65f6\u5019run\u8d77\u6765\u3002 \u63a5\u4e0b\u6765\uff0c\u6700\u96be\u7684\u90e8\u5206\uff1a \u5f53for\u5faa\u73af\u7b2c\u4e00\u6b21\u8c03\u7528\u8fd9\u4e2agenerator\u7684\u65f6\u5019\uff0c\u4f60\u7684\u4ee3\u7801\u4f1a\u4ece\u6700\u5f00\u59cb\u8fd0\u884c\uff0c\u76f4\u5230yield\u8bed\u53e5\uff0c\u7136\u540e\u4ed6\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u5faa\u73af\u7684\u7b2c\u4e00\u4e2a\u503c\u3002\u7136\u540e\u6bcf\u4e00\u6b21\u8c03\u7528\uff0c\u90fd\u4f1a\u518d\u4e00\u6b21\u8fd0\u884c\u8fd9\u4e2afunction\u5e76\u4e14\u8fd4\u56de\u4e0b\u4e00\u4e2a\u503c\uff0c\u76f4\u5230\u6ca1\u6709\u503c\u53ef\u4ee5\u8fd4\u56de\u3002 \u4e00\u65e6\u8fd9\u4e2afunction\u8fd0\u884c\u5230\u518d\u4e5f\u4e0d\u4f1ahit yield\u8bed\u53e5\uff0c\u8fd9\u4e2agenerator\u4f1a\u88ab\u89c6\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u5faa\u73af\u7ed3\u675f\u4e86\uff0c\u6216\u8005\u4f60\u4e0d\u6ee1\u8db3\u4f60\u7684if else\u8bed\u53e5\u4e86\u3002","title":"Yield"},{"location":"stackoverflow-python-top-qa/10/","text":"10. Python\u4e2d\u6709\u5224\u65ad\u5b57\u7b26\u4e32\u5305\u542b(contains)\u5b50\u4e32\u7684\u65b9\u6cd5\u5417\uff1f \u00b6 \u9898\u76ee \u00b6 \u6211\u5728Python\u4e2d\u5bfb\u627e\u5224\u65ad string.contains \u6216 string.indexof\u7684\u65b9\u6cd5 \u6211\u60f3\u5b9e\u73b0 if not somestring . contains ( \"blah\" ): continue \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 in \u64cd\u4f5c\u7b26 if \"blah\" not in somestring : continue \u56de\u7b54\u4e8c \u00b6 Python\u4e2d\u6709\u5b57\u7b26\u4e32\u5305\u542b\u5b50\u4e32\u7684\u65b9\u6cd5\u5417\uff1f \u662f\u7684\uff0c\u4f46\u662fPython\u4e2d\u6709\u4e00\u4e2a\u53ef\u4f7f\u7528\u7684\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff0c\u56e0\u4e3aPython\u8bed\u8a00\u6269\u5c55\u5b83\u7684\u7528\u6cd5\uff0c\u5927\u90e8\u5206\u7a0b\u5e8f\u5458\u90fd\u4f1a\u4f7f\u7528\u3002\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u662f in\u3002 >>> 'foo' in '**foo**' True \u53cd\u8fc7\u6765\uff0c\u4e5f\u662f\u4f60\u95ee\u9898\u4e2d\u6240\u95ee\u7684\uff0c\u662f not in >>> 'foo' not in '**foo**' # returns False False \u8bed\u4e49\u4e0a\u4e0e not 'foo' in ' foo '\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u66f4\u597d\uff0c\u662fPython\u8bed\u8a00\u4e3a\u6539\u5584\u53ef\u8bfb\u6027\u663e\u5f0f\u63d0\u4f9b\u7684\u3002 \u907f\u514d\u4f7f\u7528 __contains__ , find , and index \u00b6 str . __contains__ ( '**foo**' , 'foo' ) \u8fd4\u56de True. \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9e\u4f8b\u6765\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5 '**foo**' . __contains__ ( 'foo' ) \u4f46\u662f\u4e0d\u8981\u8fd9\u4e48\u505a\uff0c\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u65b9\u6cd5\u8bed\u4e49\u4e0a\u88ab\u8ba4\u4e3a\u662f\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u7684\u552f\u4e00\u539f\u56e0\u662f\u5f53\u9700\u8981\u6269\u5c55 in \u548c not in \u7684\u529f\u80fd\u7684\u65f6\u5019\uff0c\u4f8b\u5982\u5b50\u7c7b\u5316 str class NoisyString ( str ): def __contains__ ( self , other ): print ( 'testing if \"{0}\" in \"{1}\"' . format ( other , self )) return super ( NoisyString , self ) . __contains__ ( other ) ns = NoisyString ( 'a string with a substring inside' ) \u73b0\u5728\uff1a >>> 'substring' in ns testing if \"substring\" in \"a string with a substring inside\" True \u800c\u4e14\uff0c\u907f\u514d\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5 >>> '**foo**' . index ( 'foo' ) 2 >>> '**foo**' . find ( 'foo' ) 2 >>> '**oo**' . find ( 'foo' ) - 1 >>> '**oo**' . index ( 'foo' ) Traceback ( most recent call last ): File \"<pyshell#40>\" , line 1 , in < module > '**oo**' . index ( 'foo' ) ValueError : substring not found \u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u6ca1\u6709\u65b9\u6cd5\u76f4\u63a5\u53bb\u5224\u65ad\u5b50\u4e32\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u4f7f\u7528\u8fd9\u51e0\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u5728Python\u4e2d\uff0c\u7528 in \u64cd\u4f5c\u7b26\uff0c\u6027\u80fd\u4f1a\u597d\u5f97\u591a\u3002 \u6027\u80fd\u6bd4\u8f83 \u00b6 \u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\u8fbe\u5230\u76f8\u540c\u76ee\u7684\u4e0d\u540c\u65b9\u6cd5\u7684\u6027\u80fd import timeit def in_ ( s , other ): return other in s def contains ( s , other ): return s . __contains__ ( other ) def find ( s , other ): return s . find ( other ) != - 1 def index ( s , other ): try : s . index ( other ) except ValueError : return False else : return True perf_dict = { 'in:True' : min ( timeit . repeat ( lambda : in_ ( 'superstring' , 'str' ))), 'in:False' : min ( timeit . repeat ( lambda : in_ ( 'superstring' , 'not' ))), '__contains__:True' : min ( timeit . repeat ( lambda : contains ( 'superstring' , 'str' ))), '__contains__:False' : min ( timeit . repeat ( lambda : contains ( 'superstring' , 'not' ))), 'find:True' : min ( timeit . repeat ( lambda : find ( 'superstring' , 'str' ))), 'find:False' : min ( timeit . repeat ( lambda : find ( 'superstring' , 'not' ))), 'index:True' : min ( timeit . repeat ( lambda : index ( 'superstring' , 'str' ))), 'index:False' : min ( timeit . repeat ( lambda : index ( 'superstring' , 'not' ))), } And now we see that using in is much faster than the others. Less time to do an equivalent operation is better: \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4f7f\u7528 in \u8981\u6bd4\u5176\u4ed6\u65b9\u6cd5\u5feb\u5f88\u591a\uff0c\u7b49\u4ef7\u64cd\u4f5c\u4e0b\u8017\u65f6\u8d8a\u5c11\u8d8a\u597d\u3002 >>> perf_dict { 'in:True' : 0.16450627865128808 , 'in:False' : 0.1609668098178645 , '__contains__:True' : 0.24355481654697542 , '__contains__:False' : 0.24382793854783813 , 'find:True' : 0.3067379407923454 , 'find:False' : 0.29860888058124146 , 'index:True' : 0.29647137792585454 , 'index:False' : 0.5502287584545229 }","title":"10.Python\u4e2d\u6709\u5224\u65ad\u5b57\u7b26\u4e32\u5305\u542b(contains)\u5b50\u4e32\u7684\u65b9\u6cd5\u5417\uff1f"},{"location":"stackoverflow-python-top-qa/10/#10-pythoncontains","text":"","title":"10. Python\u4e2d\u6709\u5224\u65ad\u5b57\u7b26\u4e32\u5305\u542b(contains)\u5b50\u4e32\u7684\u65b9\u6cd5\u5417\uff1f"},{"location":"stackoverflow-python-top-qa/10/#_1","text":"\u6211\u5728Python\u4e2d\u5bfb\u627e\u5224\u65ad string.contains \u6216 string.indexof\u7684\u65b9\u6cd5 \u6211\u60f3\u5b9e\u73b0 if not somestring . contains ( \"blah\" ): continue \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/10/#_2","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 in \u64cd\u4f5c\u7b26 if \"blah\" not in somestring : continue","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/10/#_3","text":"Python\u4e2d\u6709\u5b57\u7b26\u4e32\u5305\u542b\u5b50\u4e32\u7684\u65b9\u6cd5\u5417\uff1f \u662f\u7684\uff0c\u4f46\u662fPython\u4e2d\u6709\u4e00\u4e2a\u53ef\u4f7f\u7528\u7684\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff0c\u56e0\u4e3aPython\u8bed\u8a00\u6269\u5c55\u5b83\u7684\u7528\u6cd5\uff0c\u5927\u90e8\u5206\u7a0b\u5e8f\u5458\u90fd\u4f1a\u4f7f\u7528\u3002\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u662f in\u3002 >>> 'foo' in '**foo**' True \u53cd\u8fc7\u6765\uff0c\u4e5f\u662f\u4f60\u95ee\u9898\u4e2d\u6240\u95ee\u7684\uff0c\u662f not in >>> 'foo' not in '**foo**' # returns False False \u8bed\u4e49\u4e0a\u4e0e not 'foo' in ' foo '\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u66f4\u597d\uff0c\u662fPython\u8bed\u8a00\u4e3a\u6539\u5584\u53ef\u8bfb\u6027\u663e\u5f0f\u63d0\u4f9b\u7684\u3002","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/10/#__contains__-find-and-index","text":"str . __contains__ ( '**foo**' , 'foo' ) \u8fd4\u56de True. \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9e\u4f8b\u6765\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5 '**foo**' . __contains__ ( 'foo' ) \u4f46\u662f\u4e0d\u8981\u8fd9\u4e48\u505a\uff0c\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u65b9\u6cd5\u8bed\u4e49\u4e0a\u88ab\u8ba4\u4e3a\u662f\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u7684\u552f\u4e00\u539f\u56e0\u662f\u5f53\u9700\u8981\u6269\u5c55 in \u548c not in \u7684\u529f\u80fd\u7684\u65f6\u5019\uff0c\u4f8b\u5982\u5b50\u7c7b\u5316 str class NoisyString ( str ): def __contains__ ( self , other ): print ( 'testing if \"{0}\" in \"{1}\"' . format ( other , self )) return super ( NoisyString , self ) . __contains__ ( other ) ns = NoisyString ( 'a string with a substring inside' ) \u73b0\u5728\uff1a >>> 'substring' in ns testing if \"substring\" in \"a string with a substring inside\" True \u800c\u4e14\uff0c\u907f\u514d\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5 >>> '**foo**' . index ( 'foo' ) 2 >>> '**foo**' . find ( 'foo' ) 2 >>> '**oo**' . find ( 'foo' ) - 1 >>> '**oo**' . index ( 'foo' ) Traceback ( most recent call last ): File \"<pyshell#40>\" , line 1 , in < module > '**oo**' . index ( 'foo' ) ValueError : substring not found \u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u6ca1\u6709\u65b9\u6cd5\u76f4\u63a5\u53bb\u5224\u65ad\u5b50\u4e32\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u4f7f\u7528\u8fd9\u51e0\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u5728Python\u4e2d\uff0c\u7528 in \u64cd\u4f5c\u7b26\uff0c\u6027\u80fd\u4f1a\u597d\u5f97\u591a\u3002","title":"\u907f\u514d\u4f7f\u7528 __contains__, find, and index"},{"location":"stackoverflow-python-top-qa/10/#_4","text":"\u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\u8fbe\u5230\u76f8\u540c\u76ee\u7684\u4e0d\u540c\u65b9\u6cd5\u7684\u6027\u80fd import timeit def in_ ( s , other ): return other in s def contains ( s , other ): return s . __contains__ ( other ) def find ( s , other ): return s . find ( other ) != - 1 def index ( s , other ): try : s . index ( other ) except ValueError : return False else : return True perf_dict = { 'in:True' : min ( timeit . repeat ( lambda : in_ ( 'superstring' , 'str' ))), 'in:False' : min ( timeit . repeat ( lambda : in_ ( 'superstring' , 'not' ))), '__contains__:True' : min ( timeit . repeat ( lambda : contains ( 'superstring' , 'str' ))), '__contains__:False' : min ( timeit . repeat ( lambda : contains ( 'superstring' , 'not' ))), 'find:True' : min ( timeit . repeat ( lambda : find ( 'superstring' , 'str' ))), 'find:False' : min ( timeit . repeat ( lambda : find ( 'superstring' , 'not' ))), 'index:True' : min ( timeit . repeat ( lambda : index ( 'superstring' , 'str' ))), 'index:False' : min ( timeit . repeat ( lambda : index ( 'superstring' , 'not' ))), } And now we see that using in is much faster than the others. Less time to do an equivalent operation is better: \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4f7f\u7528 in \u8981\u6bd4\u5176\u4ed6\u65b9\u6cd5\u5feb\u5f88\u591a\uff0c\u7b49\u4ef7\u64cd\u4f5c\u4e0b\u8017\u65f6\u8d8a\u5c11\u8d8a\u597d\u3002 >>> perf_dict { 'in:True' : 0.16450627865128808 , 'in:False' : 0.1609668098178645 , '__contains__:True' : 0.24355481654697542 , '__contains__:False' : 0.24382793854783813 , 'find:True' : 0.3067379407923454 , 'find:False' : 0.29860888058124146 , 'index:True' : 0.29647137792585454 , 'index:False' : 0.5502287584545229 }","title":"\u6027\u80fd\u6bd4\u8f83"},{"location":"stackoverflow-python-top-qa/11/","text":"11. \u5982\u4f55\u5217\u51fa\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6 \u00b6 \u95ee\u9898 \u00b6 \u6211\u600e\u4e48\u624d\u80fd\u5217\u51fa\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u5e76\u628a\u5b83\u4eec\u6dfb\u52a0\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 os.listdir() \u80fd\u591f\u5f97\u5230\u6587\u4ef6\u5939\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u8981\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u7528 os.path \u8fc7\u6ee4\u51fa\u6765\u3002 from os import listdir from os.path import isfile , join onlyfiles = [ f for f in listdir ( mypath ) if isfile ( join ( mypath , f ))] \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528 os.walk \uff0c\u4ed6\u5c06 yield 2\u4e2a\u5217\u8868\u5bf9\u4e8e\u8bbf\u95ee\u5230\u7684\u6bcf\u4e2a\u76ee\u5f55\u3002\u4e3a\u4f60\u62c6\u5206\u6210\u6587\u4ef6\u548c\u6587\u4ef6\u59392\u4e2a\u76ee\u5f55\u3002\u5982\u679c\u4f60\u53ea\u9700\u8981\u9876\u5c42\u76ee\u5f55\uff0c\u4f60\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21 yield \u7684\u65f6\u5019 break from os import walk f = [] for ( dirpath , dirnames , filenames ) in walk ( mypath ): f . extend ( filenames ) break \u6700\u540e\uff0c\u6b63\u5982\u4f8b\u5b50\u6240\u793a\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5217\u8868\u5230\u53e6\u4e00\u4e2a\u5f53\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 .extend \u6216\u8005 >>> q = [ 1 , 2 , 3 ] >>> w = [ 4 , 5 , 6 ] >>> q = q + w >>> q [ 1 , 2 , 3 , 4 , 5 , 6 ] \u4e2a\u4eba\u66f4\u503e\u5411\u4f7f\u7528 .extend \u56de\u7b54\u4e8c \u00b6 \u6211\u66f4\u503e\u5411\u4e8e\u4f7f\u7528 glob \u6a21\u5757\uff0c\u5b83\u53ef\u4ee5\u6a21\u5f0f\u5339\u914d\u3002 import glob print ( glob . glob ( \"/home/adam/*.txt\" )) \u5b83\u5c06\u8fd4\u56de\u67e5\u8be2\u5230\u7684\u5217\u8868 [ '/home/adam/file1.txt' , '/home/adam/file2.txt' , .... ]","title":"11.\u5982\u4f55\u5217\u51fa\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6"},{"location":"stackoverflow-python-top-qa/11/#11","text":"","title":"11. \u5982\u4f55\u5217\u51fa\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6"},{"location":"stackoverflow-python-top-qa/11/#_1","text":"\u6211\u600e\u4e48\u624d\u80fd\u5217\u51fa\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u5e76\u628a\u5b83\u4eec\u6dfb\u52a0\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u94fe\u63a5","title":"\u95ee\u9898"},{"location":"stackoverflow-python-top-qa/11/#_2","text":"os.listdir() \u80fd\u591f\u5f97\u5230\u6587\u4ef6\u5939\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u8981\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u7528 os.path \u8fc7\u6ee4\u51fa\u6765\u3002 from os import listdir from os.path import isfile , join onlyfiles = [ f for f in listdir ( mypath ) if isfile ( join ( mypath , f ))] \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528 os.walk \uff0c\u4ed6\u5c06 yield 2\u4e2a\u5217\u8868\u5bf9\u4e8e\u8bbf\u95ee\u5230\u7684\u6bcf\u4e2a\u76ee\u5f55\u3002\u4e3a\u4f60\u62c6\u5206\u6210\u6587\u4ef6\u548c\u6587\u4ef6\u59392\u4e2a\u76ee\u5f55\u3002\u5982\u679c\u4f60\u53ea\u9700\u8981\u9876\u5c42\u76ee\u5f55\uff0c\u4f60\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21 yield \u7684\u65f6\u5019 break from os import walk f = [] for ( dirpath , dirnames , filenames ) in walk ( mypath ): f . extend ( filenames ) break \u6700\u540e\uff0c\u6b63\u5982\u4f8b\u5b50\u6240\u793a\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5217\u8868\u5230\u53e6\u4e00\u4e2a\u5f53\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 .extend \u6216\u8005 >>> q = [ 1 , 2 , 3 ] >>> w = [ 4 , 5 , 6 ] >>> q = q + w >>> q [ 1 , 2 , 3 , 4 , 5 , 6 ] \u4e2a\u4eba\u66f4\u503e\u5411\u4f7f\u7528 .extend","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/11/#_3","text":"\u6211\u66f4\u503e\u5411\u4e8e\u4f7f\u7528 glob \u6a21\u5757\uff0c\u5b83\u53ef\u4ee5\u6a21\u5f0f\u5339\u914d\u3002 import glob print ( glob . glob ( \"/home/adam/*.txt\" )) \u5b83\u5c06\u8fd4\u56de\u67e5\u8be2\u5230\u7684\u5217\u8868 [ '/home/adam/file1.txt' , '/home/adam/file2.txt' , .... ]","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/12/","text":"12. \u5982\u4f55\u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a \u00b6 \u9898\u76ee \u00b6 \u4f8b\u5982\uff0c\u5982\u679c\u901a\u8fc7\u4ee5\u4e0b\u5185\u5bb9: a = [] \u6211\u5982\u4f55\u68c0\u67e5 a \u662f\u5426\u4e3a\u7a7a? \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 if not a : print ( \"List is empty\" ) \u4f7f\u7528\u7a7a\u5217\u8868\u7684\u9690\u5f0fbooleanness\u662f\u76f8\u5f53python\u7684\uff08Pythonic\uff09\u3002 \u56de\u7b54\u4e8c \u00b6 python\u98ce\u683c\u7684\u65b9\u6cd5\u662f\u6765\u81ea PEP 8\u98ce\u683c\u6307\u5357 (\u5728\u8fd9\u91cc\uff0c**Yes**\u7684\u610f\u601d\u662f\u201c\u63a8\u8350\u201d\uff0c\u800c**NO**\u662f\u201c\u4e0d\u63a8\u8350\u201d): \u5bf9\u4e8e\u5e8f\u5217\uff0c(\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5143\u7ec4)\uff0c\u4f7f\u7528\u201c\u7a7a\u5e8f\u5217\u4e3a\u5047\u201d\u7684\u8fd9\u4e00\u4e8b\u5b9e Yes : if not seq : if seq : No : if len ( seq ): if not len ( seq ):","title":"12.\u5982\u4f55\u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a"},{"location":"stackoverflow-python-top-qa/12/#12","text":"","title":"12. \u5982\u4f55\u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a"},{"location":"stackoverflow-python-top-qa/12/#_1","text":"\u4f8b\u5982\uff0c\u5982\u679c\u901a\u8fc7\u4ee5\u4e0b\u5185\u5bb9: a = [] \u6211\u5982\u4f55\u68c0\u67e5 a \u662f\u5426\u4e3a\u7a7a? \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/12/#_2","text":"if not a : print ( \"List is empty\" ) \u4f7f\u7528\u7a7a\u5217\u8868\u7684\u9690\u5f0fbooleanness\u662f\u76f8\u5f53python\u7684\uff08Pythonic\uff09\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/12/#_3","text":"python\u98ce\u683c\u7684\u65b9\u6cd5\u662f\u6765\u81ea PEP 8\u98ce\u683c\u6307\u5357 (\u5728\u8fd9\u91cc\uff0c**Yes**\u7684\u610f\u601d\u662f\u201c\u63a8\u8350\u201d\uff0c\u800c**NO**\u662f\u201c\u4e0d\u63a8\u8350\u201d): \u5bf9\u4e8e\u5e8f\u5217\uff0c(\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5143\u7ec4)\uff0c\u4f7f\u7528\u201c\u7a7a\u5e8f\u5217\u4e3a\u5047\u201d\u7684\u8fd9\u4e00\u4e8b\u5b9e Yes : if not seq : if seq : No : if len ( seq ): if not len ( seq ):","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/13/","text":"13. list\u65b9\u6cd5append()\u4e0eextend()\u7684\u533a\u522b \u00b6 \u9898\u76ee \u00b6 list\u65b9\u6cd5append()\u548cextend()\u4e4b\u95f4\u7684\u533a\u522b\u662f\u4ec0\u4e48? \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 append :\u5728\u7ed3\u5c3e\u8ffd\u52a0\u5bf9\u8c61\u3002 x = [ 1 , 2 , 3 ] x . append ([ 4 , 5 ]) print ( x ) \u7ed3\u679c\u662f: [1, 2, 3, [4, 5]] extend :\u901a\u8fc7\u4ece\u53ef\u8fed\u4ee3\u7684\u5143\u7d20\u4e2d\u8ffd\u52a0\u5143\u7d20\u6765\u6269\u5c55\u5217\u8868\u3002 x = [ 1 , 2 , 3 ] x . append ([ 4 , 5 ]) print ( x ) \u7ed3\u679c\u662f: [1, 2, 3, 4, 5] \u56de\u7b54\u4e8c \u00b6 append \u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff0c extend \u5c06\u7b2c\u4e00\u4e2a\u5217\u8868\u4e0e\u53e6\u4e00\u4e2a\u5217\u8868(\u6216\u53e6\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u7ed3\u6784\uff0c\u4e0d\u4e00\u5b9a\u662f\u5217\u8868)\u8fde\u63a5\u8d77\u6765\u3002 >>> li = [ 'a' , 'b' , 'mpilgrim' , 'z' , 'example' ] >>> li [ 'a' , 'b' , 'mpilgrim' , 'z' , 'example' ] >>> li . append ( \"new\" ) >>> li [ 'a' , 'b' , 'mpilgrim' , 'z' , 'example' , 'new' ] >>> li . insert ( 2 , \"new\" ) >>> li [ 'a' , 'b' , 'new' , 'mpilgrim' , 'z' , 'example' , 'new' ] >>> li . extend ([ \"two\" , \"elements\" ]) >>> li [ 'a' , 'b' , 'new' , 'mpilgrim' , 'z' , 'example' , 'new' , 'two' , 'elements' ] \u5f15\u7528\u81ea Dive into Python \u3002","title":"13.list\u65b9\u6cd5append()\u4e0eextend()\u7684\u533a\u522b"},{"location":"stackoverflow-python-top-qa/13/#13-listappendextend","text":"","title":"13. list\u65b9\u6cd5append()\u4e0eextend()\u7684\u533a\u522b"},{"location":"stackoverflow-python-top-qa/13/#_1","text":"list\u65b9\u6cd5append()\u548cextend()\u4e4b\u95f4\u7684\u533a\u522b\u662f\u4ec0\u4e48? \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/13/#_2","text":"append :\u5728\u7ed3\u5c3e\u8ffd\u52a0\u5bf9\u8c61\u3002 x = [ 1 , 2 , 3 ] x . append ([ 4 , 5 ]) print ( x ) \u7ed3\u679c\u662f: [1, 2, 3, [4, 5]] extend :\u901a\u8fc7\u4ece\u53ef\u8fed\u4ee3\u7684\u5143\u7d20\u4e2d\u8ffd\u52a0\u5143\u7d20\u6765\u6269\u5c55\u5217\u8868\u3002 x = [ 1 , 2 , 3 ] x . append ([ 4 , 5 ]) print ( x ) \u7ed3\u679c\u662f: [1, 2, 3, 4, 5]","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/13/#_3","text":"append \u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff0c extend \u5c06\u7b2c\u4e00\u4e2a\u5217\u8868\u4e0e\u53e6\u4e00\u4e2a\u5217\u8868(\u6216\u53e6\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u7ed3\u6784\uff0c\u4e0d\u4e00\u5b9a\u662f\u5217\u8868)\u8fde\u63a5\u8d77\u6765\u3002 >>> li = [ 'a' , 'b' , 'mpilgrim' , 'z' , 'example' ] >>> li [ 'a' , 'b' , 'mpilgrim' , 'z' , 'example' ] >>> li . append ( \"new\" ) >>> li [ 'a' , 'b' , 'mpilgrim' , 'z' , 'example' , 'new' ] >>> li . insert ( 2 , \"new\" ) >>> li [ 'a' , 'b' , 'new' , 'mpilgrim' , 'z' , 'example' , 'new' ] >>> li . extend ([ \"two\" , \"elements\" ]) >>> li [ 'a' , 'b' , 'new' , 'mpilgrim' , 'z' , 'example' , 'new' , 'two' , 'elements' ] \u5f15\u7528\u81ea Dive into Python \u3002","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/14/","text":"14. Python\u4e2d@staticmethod\u4e0e@classmethod\u7684\u533a\u522b \u00b6 \u9898\u76ee \u00b6 \u88ab @staticmethod \u548c\u88ab @classmethod \u88c5\u9970\u7684\u51fd\u6570\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u5199\u70b9\u4f8b\u5b50\u52a9\u4e8e\u7406\u89e3\uff0c\u6ce8\u610f\u5bf9 foo \u8c03\u7528\u7684\u533a\u522b\u3002 class_foo \u4e0e static_foo \u3002 class A ( object ): def foo ( self , x ): print \"executing foo( %s , %s )\" % ( self , x ) @classmethod def class_foo ( cls , x ): print \"executing class_foo( %s , %s )\" % ( cls , x ) @staticmethod def static_foo ( x ): print \"executing static_foo( %s )\" % x a = A () \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u7684\u901a\u5e38\u65b9\u5f0f\uff0c\u5b9e\u4f8b\u5bf9\u8c61 a \u9690\u5f0f\u5730\u88ab\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u3002 a . foo ( 1 ) # executing foo(<__main__.A object at 0xb7dbef0c>,1) \u4f7f\u7528\u7c7b\u65b9\u6cd5(classmethod) \uff0c\u5b9e\u4f8b\u5bf9\u8c61\u7684class\u9690\u5f0f\u5730\u88ab\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u3002 a . class_foo ( 1 ) # executing class_foo(<class '__main__.A'>,1) \u4f60\u4e5f\u4f60\u80fd\u4f7f\u7528class\u53bb\u8c03\u7528 class_foo \uff0c\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u67d0\u4e2a\u65b9\u6cd5\u4e3a\u7c7b\u65b9\u6cd5(classmethod)\uff0c\u5f88\u53ef\u80fd\u4f60\u60f3\u901a\u8fc7\u7c7b\u53bb\u8c03\u7528\u5b83\u800c\u975e\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u3002 A.foo(1) \u5c06\u4f1a\u5f15\u53d1\u7c7b\u578b\u9519\u8bef(TypeError)\uff0c\u4f46\u662f A.class_foo(1) \u662fOK\u7684\u3002 A . class_foo ( 1 ) # executing class_foo(<class '__main__.A'>,1) \u4f7f\u7528\u7c7b\u65b9\u6cd5\u7684\u4e00\u79cd\u573a\u666f\u662f\u521b\u5efa \u53ef\u7ee7\u627f\u7684\u66ff\u4ee3\u6784\u9020\u51fd\u6570\u3002 \u4f7f\u7528\u9759\u6001\u65b9\u6cd5(staticmethod) , self (\u5b9e\u4f8b)\u548c cls (\u7c7b)\u90fd\u4e0d\u4f1a\u88ab\u9690\u5f0f\u5730\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u3002\u9664\u4e86\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6216\u8005\u7c7b\u6765\u8c03\u7528\u4ee5\u5916\uff0c\u8fd9\u7c7b\u65b9\u6cd5\u8868\u73b0\u548c\u666e\u901a\u7684\u51fd\u6570\u65e0\u5f02\u3002 a . static_foo ( 1 ) # executing static_foo(1) A . static_foo ( 'hi' ) # executing static_foo(hi) \u9759\u6001\u65b9\u6cd5\u7528\u6765\u805a\u5408\u4e00\u4e9b\u548c\u7c7b\u6709\u903b\u8f91\u5173\u7cfb\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002 foo \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u5f53\u4f60\u8c03\u7528 a.foo \u65f6\u5e76\u6ca1\u6709\u5f97\u5230\u8fd9\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u83b7\u5f97\u4e86\u8be5\u51fd\u6570\u7684\u201c\u90e8\u5206\u5e94\u7528(partially applied)\u201d\u7248\u672c\uff0c\u5e76\u5c06\u5bf9\u8c61\u5b9e\u4f8b\u7ed1\u5b9a\u4e3a\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 foo \u9700\u4f20\u51652\u4e2a\u53c2\u6570\uff0c\u4f46\u662f a.foo \u4ec5\u9700\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u3002 a \u88ab\u7ed1\u5b9a\u5230 foo \uff0c\u5982\u4e0b print ( a . foo ) # <bound method A.foo of <__main__.A object at 0xb7d52f0c>> a.class_foo \uff0c a \u5e76\u6ca1\u6709\u7ed1\u5b9a\u5230 class_foo \uff0c\u800c\u662f class A \u7ed1\u5b9a\u5230 class_foo print ( a . class_foo ) # <bound method type.class_foo of <class '__main__.A'>> \u5bf9\u4e8estaticmethod\uff0c\u5373\u4f7f\u8fd9\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c a.static_foo \u4ec5\u8fd4\u56de\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\u7ed1\u5b9a\u7684\u51fd\u6570\u3002 static_foo \u8981\u6c42\u4f20\u51651\u4e2a\u53c2\u6570\uff0c a.static_foo \u540c\u6837\u8981\u6c42\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u3002 print ( a . static_foo ) # <function static_foo at 0xb7d479cc> \u5f53\u7136\uff0c\u4f60\u4f7f\u7528 class A \u53bb\u8c03\u7528 static_foo \u65f6\u4e5f\u4e00\u6837\u3002 print ( A . static_foo ) # <function static_foo at 0xb7d479cc>","title":"14.Python\u4e2d@staticmethod\u4e0e@classmethod\u7684\u533a\u522b"},{"location":"stackoverflow-python-top-qa/14/#14-pythonstaticmethodclassmethod","text":"","title":"14. Python\u4e2d@staticmethod\u4e0e@classmethod\u7684\u533a\u522b"},{"location":"stackoverflow-python-top-qa/14/#_1","text":"\u88ab @staticmethod \u548c\u88ab @classmethod \u88c5\u9970\u7684\u51fd\u6570\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/14/#_2","text":"\u5199\u70b9\u4f8b\u5b50\u52a9\u4e8e\u7406\u89e3\uff0c\u6ce8\u610f\u5bf9 foo \u8c03\u7528\u7684\u533a\u522b\u3002 class_foo \u4e0e static_foo \u3002 class A ( object ): def foo ( self , x ): print \"executing foo( %s , %s )\" % ( self , x ) @classmethod def class_foo ( cls , x ): print \"executing class_foo( %s , %s )\" % ( cls , x ) @staticmethod def static_foo ( x ): print \"executing static_foo( %s )\" % x a = A () \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u7684\u901a\u5e38\u65b9\u5f0f\uff0c\u5b9e\u4f8b\u5bf9\u8c61 a \u9690\u5f0f\u5730\u88ab\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u3002 a . foo ( 1 ) # executing foo(<__main__.A object at 0xb7dbef0c>,1) \u4f7f\u7528\u7c7b\u65b9\u6cd5(classmethod) \uff0c\u5b9e\u4f8b\u5bf9\u8c61\u7684class\u9690\u5f0f\u5730\u88ab\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u3002 a . class_foo ( 1 ) # executing class_foo(<class '__main__.A'>,1) \u4f60\u4e5f\u4f60\u80fd\u4f7f\u7528class\u53bb\u8c03\u7528 class_foo \uff0c\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u67d0\u4e2a\u65b9\u6cd5\u4e3a\u7c7b\u65b9\u6cd5(classmethod)\uff0c\u5f88\u53ef\u80fd\u4f60\u60f3\u901a\u8fc7\u7c7b\u53bb\u8c03\u7528\u5b83\u800c\u975e\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u3002 A.foo(1) \u5c06\u4f1a\u5f15\u53d1\u7c7b\u578b\u9519\u8bef(TypeError)\uff0c\u4f46\u662f A.class_foo(1) \u662fOK\u7684\u3002 A . class_foo ( 1 ) # executing class_foo(<class '__main__.A'>,1) \u4f7f\u7528\u7c7b\u65b9\u6cd5\u7684\u4e00\u79cd\u573a\u666f\u662f\u521b\u5efa \u53ef\u7ee7\u627f\u7684\u66ff\u4ee3\u6784\u9020\u51fd\u6570\u3002 \u4f7f\u7528\u9759\u6001\u65b9\u6cd5(staticmethod) , self (\u5b9e\u4f8b)\u548c cls (\u7c7b)\u90fd\u4e0d\u4f1a\u88ab\u9690\u5f0f\u5730\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u3002\u9664\u4e86\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6216\u8005\u7c7b\u6765\u8c03\u7528\u4ee5\u5916\uff0c\u8fd9\u7c7b\u65b9\u6cd5\u8868\u73b0\u548c\u666e\u901a\u7684\u51fd\u6570\u65e0\u5f02\u3002 a . static_foo ( 1 ) # executing static_foo(1) A . static_foo ( 'hi' ) # executing static_foo(hi) \u9759\u6001\u65b9\u6cd5\u7528\u6765\u805a\u5408\u4e00\u4e9b\u548c\u7c7b\u6709\u903b\u8f91\u5173\u7cfb\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002 foo \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u5f53\u4f60\u8c03\u7528 a.foo \u65f6\u5e76\u6ca1\u6709\u5f97\u5230\u8fd9\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u83b7\u5f97\u4e86\u8be5\u51fd\u6570\u7684\u201c\u90e8\u5206\u5e94\u7528(partially applied)\u201d\u7248\u672c\uff0c\u5e76\u5c06\u5bf9\u8c61\u5b9e\u4f8b\u7ed1\u5b9a\u4e3a\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 foo \u9700\u4f20\u51652\u4e2a\u53c2\u6570\uff0c\u4f46\u662f a.foo \u4ec5\u9700\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u3002 a \u88ab\u7ed1\u5b9a\u5230 foo \uff0c\u5982\u4e0b print ( a . foo ) # <bound method A.foo of <__main__.A object at 0xb7d52f0c>> a.class_foo \uff0c a \u5e76\u6ca1\u6709\u7ed1\u5b9a\u5230 class_foo \uff0c\u800c\u662f class A \u7ed1\u5b9a\u5230 class_foo print ( a . class_foo ) # <bound method type.class_foo of <class '__main__.A'>> \u5bf9\u4e8estaticmethod\uff0c\u5373\u4f7f\u8fd9\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c a.static_foo \u4ec5\u8fd4\u56de\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\u7ed1\u5b9a\u7684\u51fd\u6570\u3002 static_foo \u8981\u6c42\u4f20\u51651\u4e2a\u53c2\u6570\uff0c a.static_foo \u540c\u6837\u8981\u6c42\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u3002 print ( a . static_foo ) # <function static_foo at 0xb7d479cc> \u5f53\u7136\uff0c\u4f60\u4f7f\u7528 class A \u53bb\u8c03\u7528 static_foo \u65f6\u4e5f\u4e00\u6837\u3002 print ( A . static_foo ) # <function static_foo at 0xb7d479cc>","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/15/","text":"15. \u5982\u4f55\u8bbf\u95eefor\u5faa\u73af\u4e2d\u7684\u4e0b\u6807 \u00b6 \u9898\u76ee \u00b6 \u5982\u4e0b\u9762\u6240\u793a\uff0c\u6211\u5e94\u8be5\u5982\u4f55\u8bbf\u95ee\u5217\u8868\u672c\u8eab\u7684\u7d22\u5f15\uff1f ints = [ 8 , 23 , 45 , 12 , 78 ] \u5f53\u6211\u4f7f\u7528for\u5faa\u73af\u904d\u5386\u5b83\u65f6\uff0c\u6211\u5982\u4f55\u8bbf\u95ee\u5faa\u73af\u7d22\u5f15\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4ece1\u52305\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u4f7f\u7528\u9644\u52a0\u7684\u72b6\u6001\u53d8\u91cf\uff0c\u5982\u7d22\u5f15\u53d8\u91cf(\u901a\u5e38\u5728C\u6216PHP\u7b49\u8bed\u8a00\u4e2d\u4f7f\u7528)\u88ab\u89c6\u4e3a\u975epython\u5316\u7684\u3002 \u66f4\u597d\u7684\u9009\u62e9\u662f\u4f7f\u7528\u5185\u7f6e\u51fd\u6570enumerate()\uff0c\u5728Python2\u548c3\u4e2d\u5747\u53ef\u4f7f\u7528: for idx , val in enumerate ( ints ): print ( idx , val ) \u67e5\u770b PEP 279 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002","title":"15.\u5982\u4f55\u8bbf\u95eefor\u5faa\u73af\u4e2d\u7684\u4e0b\u6807"},{"location":"stackoverflow-python-top-qa/15/#15-for","text":"","title":"15. \u5982\u4f55\u8bbf\u95eefor\u5faa\u73af\u4e2d\u7684\u4e0b\u6807"},{"location":"stackoverflow-python-top-qa/15/#_1","text":"\u5982\u4e0b\u9762\u6240\u793a\uff0c\u6211\u5e94\u8be5\u5982\u4f55\u8bbf\u95ee\u5217\u8868\u672c\u8eab\u7684\u7d22\u5f15\uff1f ints = [ 8 , 23 , 45 , 12 , 78 ] \u5f53\u6211\u4f7f\u7528for\u5faa\u73af\u904d\u5386\u5b83\u65f6\uff0c\u6211\u5982\u4f55\u8bbf\u95ee\u5faa\u73af\u7d22\u5f15\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4ece1\u52305\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/15/#_2","text":"\u4f7f\u7528\u9644\u52a0\u7684\u72b6\u6001\u53d8\u91cf\uff0c\u5982\u7d22\u5f15\u53d8\u91cf(\u901a\u5e38\u5728C\u6216PHP\u7b49\u8bed\u8a00\u4e2d\u4f7f\u7528)\u88ab\u89c6\u4e3a\u975epython\u5316\u7684\u3002 \u66f4\u597d\u7684\u9009\u62e9\u662f\u4f7f\u7528\u5185\u7f6e\u51fd\u6570enumerate()\uff0c\u5728Python2\u548c3\u4e2d\u5747\u53ef\u4f7f\u7528: for idx , val in enumerate ( ints ): print ( idx , val ) \u67e5\u770b PEP 279 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/16/","text":"16. \u5982\u4f55\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf \u00b6 \u9898\u76ee \u00b6 \u6211\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u521b\u5efa\u6216\u8005\u4f7f\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u5417\uff1f \u5982\u679c\u6211\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u6211\u80fd\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\u5417\uff1f\u5f53\u6211\u9700\u8981\u8bbf\u95ee\u65f6\uff0c\u9700\u8981\u5728\u51fd\u6570\u4e2d\u5c06\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u5b58\u50a8\u4e3a\u4e00\u4e2a\u672c\u5730\u53d8\u91cf\u5417\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u51fd\u6570\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\uff0c\u90a3\u4e48\u9700\u8981\u5728\u51fd\u6570\u4e2d\u58f0\u660e\u5b83\u662f\u5168\u5c40\u53d8\u91cf\u3002 globvar = 0 def set_globvar_to_one (): global globvar # \u9700\u8981\u4fee\u6539 globvar globvar = 1 def print_globvar (): print ( globvar ) # \u4e0d\u9700\u8981\u4fee\u6539 globvar set_globvar_to_one () print_globvar () # Prints 1 \u6211\u731c\u6d4b\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff1a\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u5f88\u5371\u9669\uff0cPython\u60f3\u901a\u8fc7\u663e\u5f0f\u5730\u4f7f\u7528global\u5173\u952e\u5b57\u786e\u8ba4\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\u3002 \u5982\u679c\u4f60\u60f3\u8de8\u6a21\u5757\u5206\u4eab\u5168\u5c40\u53d8\u91cf\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6 \u7b54\u6848 \u3002","title":"16.\u5982\u4f55\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf"},{"location":"stackoverflow-python-top-qa/16/#16","text":"","title":"16. \u5982\u4f55\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf"},{"location":"stackoverflow-python-top-qa/16/#_1","text":"\u6211\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u521b\u5efa\u6216\u8005\u4f7f\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u5417\uff1f \u5982\u679c\u6211\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u6211\u80fd\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\u5417\uff1f\u5f53\u6211\u9700\u8981\u8bbf\u95ee\u65f6\uff0c\u9700\u8981\u5728\u51fd\u6570\u4e2d\u5c06\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u5b58\u50a8\u4e3a\u4e00\u4e2a\u672c\u5730\u53d8\u91cf\u5417\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/16/#_2","text":"\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u51fd\u6570\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\uff0c\u90a3\u4e48\u9700\u8981\u5728\u51fd\u6570\u4e2d\u58f0\u660e\u5b83\u662f\u5168\u5c40\u53d8\u91cf\u3002 globvar = 0 def set_globvar_to_one (): global globvar # \u9700\u8981\u4fee\u6539 globvar globvar = 1 def print_globvar (): print ( globvar ) # \u4e0d\u9700\u8981\u4fee\u6539 globvar set_globvar_to_one () print_globvar () # Prints 1 \u6211\u731c\u6d4b\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff1a\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u5f88\u5371\u9669\uff0cPython\u60f3\u901a\u8fc7\u663e\u5f0f\u5730\u4f7f\u7528global\u5173\u952e\u5b57\u786e\u8ba4\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\u3002 \u5982\u679c\u4f60\u60f3\u8de8\u6a21\u5757\u5206\u4eab\u5168\u5c40\u53d8\u91cf\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6 \u7b54\u6848 \u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/17/","text":"17. \u5982\u4f55\u521b\u5efa\u8fde\u7eed\u8c03\u7528\u7684\u51fd\u6570\u88c5\u9970\u5668 \u00b6 \u9898\u76ee \u00b6 \u5728Python\u4e2d\u5982\u4f55\u521b\u5efa2\u4e2a\u88c5\u9970\u5668\uff0c\u5b8c\u6210\u5982\u4e0b\u529f\u80fd\uff1a @makebold @makeitalic def say (): return \"Hello\" \u5c06\u8fd4\u56de \"<b><i>Hello</i></b>\" \u6211\u5e76\u975e\u5728\u771f\u5b9e\u7684\u5e94\u7528\u7528\u8fd9\u79cd\u65b9\u5f0f\u53bb\u6784\u9020HTML\uff0c\u4ec5\u4ec5\u60f3\u53bb\u7406\u89e3\u88c5\u9970\u5668\u548c\u88c5\u9970\u5668\u94fe\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u67e5\u770b \u6587\u6863 \u53bb\u4e86\u89e3\u88c5\u9970\u5668\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8fd9\u91cc\u662f\u4f60\u60f3\u8981\u7684\u3002 def makebold ( fn ): def wrapped (): return \"<b>\" + fn () + \"</b>\" return wrapped def makeitalic ( fn ): def wrapped (): return \"<i>\" + fn () + \"</i>\" return wrapped @makebold @makeitalic def hello (): return \"hello world\" print hello () ## returns \"<b><i>hello world</i></b>\" \u56de\u7b54\u4e8c \u00b6 \u88c5\u9970\u5668\u57fa\u7840 \u00b6 Python\u4e2d\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61 \u00b6 \u4e3a\u4e86\u7406\u89e3\u88c5\u9970\u5668\uff0c\u4f60\u5fc5\u987b\u5148\u7406\u89e3Python\u4e2d\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61\uff0c\u8fd9\u5f88\u91cd\u8981\u3002\u63a5\u4e0b\u7528\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u89e3\u91ca\u3002 def shout ( word = \"yes\" ): return word . capitalize () + \"!\" print ( shout ()) # \u8f93\u51fa: 'Yes!' # \u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f60\u4e5f\u80fd\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u628a\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 scream = shout # \u6ce8\u610f\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u4f7f\u7528\u62ec\u53f7\uff1a\u6ca1\u6709\u8c03\u7528shout # \u4ec5\u4ec5\u662f\u628ashout\u8d4b\u503c\u7ed9scream\uff0c\u8fd9\u610f\u5473\u7740\u63a5\u4e0b\u6765\u53ef\u4ee5\u8c03\u7528scream print ( scream ()) # \u8f93\u51fa: 'Yes!' # \u4e0d\u4ec5\u5982\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5220\u9664shout, # \u8fd9\u4e2a\u51fd\u6570\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7scream\u8bbf\u95ee\u5230\u3002 del shout try : print ( shout ()) except NameError , e : print ( e ) # \u8f93\u51fa: \"name 'shout' is not defined\" print ( scream ()) # \u8f93\u51fa: 'Yes!' \u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5f88\u5feb\u4f1a\u7528\u5230\u3002 \u5728Python\u4e2d\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u7279\u6027\u662f\u5b83\u4eec\u53ef\u4ee5\u518d\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u58f0\u660e\u3002 def talk (): # \u5728 \"talk\" \u4e2d\u53ef\u4ee5\u968f\u610f\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570... def whisper ( word = \"yes\" ): return word . lower () + \"...\" # ... \u800c\u4e14\u53ef\u4ee5\u7406\u89e3\u8c03\u7528 print ( whisper ()) # \u6bcf\u6b21\u8c03\u7528 \u201ctalk\u201d\uff0c\u5185\u90e8\u58f0\u660e\u7684 \"whisper\" \u4e5f\u4f1a\u88ab\u8c03\u7528\u3002 talk () # \u8f93\u51fa: \"yes...\" # \u4f46\u662f\u5728 \"talk\" \u4e4b\u5916\uff0c\"whisper\" \u5e76\u4e0d\u5b58\u5728: try : print ( whisper ()) except NameError , e : print ( e ) # \u8f93\u51fa : \"name 'whisper' is not defined\"* # Python\u7684\u51fd\u6570\u662f\u5bf9\u8c61\uff0c\u5c31\u50cf\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u5176\u4ed6\u666e\u901a\u5bf9\u8c61\u4e00\u6837\u3002 \u51fd\u6570\u5f15\u7528 \u00b6 \u63a5\u4e0b\u6765\u5c31\u6bd4\u8f83\u6709\u8da3\u4e86\u3002 \u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u51fd\u6570\u662f\u5bf9\u8c61\uff0c\u56e0\u6b64\u51fd\u6570\uff1a \u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\uff0c \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5 \u8fd4\u56de \u53e6\u4e00\u4e2a\u51fd\u6570\u3002 def getTalk ( kind = \"shout\" ): # \u968f\u610f\u5b9a\u4e49\u51fd\u6570 def shout ( word = \"yes\" ): return word . capitalize () + \"!\" def whisper ( word = \"yes\" ) : return word . lower () + \"...\" ; # \u6211\u4eec\u8fd4\u56de\u5176\u4e2d\u4e4b\u4e00\u3002 if kind == \"shout\" : # \u4e0d\u4f7f\u7528 \"()\", \u5373\u4e0d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ec5\u8fd4\u56de\u51fd\u6570\u5bf9\u8c61\u3002 return shout else : return whisper # \u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u5c06\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 talk = getTalk () # \u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u770b\u5230\u201ctalk\u201d\u662f\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 print ( talk ) # \u8f93\u51fa: <function shout at 0xb7ea817c> # \u8fd9\u4e2a\u5bf9\u8c61\u662f\u88ab \u201cgetTalk\u201d \u51fd\u6570\u8fd4\u56de\u7684\u3002 print ( talk ()) # \u8f93\u51fa: Yes! # \u4f60\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd4\u56de\u65f6\u8c03\u7528\u3002 print ( getTalk ( \"whisper\" )()) # \u8f93\u51fa: yes... \u4e0d\u4ec5\u5982\u6b64\uff0c\u5982\u679c\u4f60\u80fd\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u4f60\u4e5f\u80fd\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff1a def doSomethingBefore ( func ): print ( \"I do something before then I call the function you gave me\" ) print ( func ()) doSomethingBefore ( scream ) # \u8f93\u51fa: # I do something before then I call the function you gave me # Yes! \u4f60\u5df2\u7ecf\u638c\u63e1\u4e86\u9700\u8981\u7406\u89e3\u88c5\u9970\u5668\u4e00\u5207\u57fa\u7840\u6982\u5ff5\u4e86\u3002\u6b63\u5982\u4f60\u6240\u89c1\uff0c\u88c5\u9970\u5668\u5c31\u662f\u51fd\u6570\u7684\u201c\u5305\u88c5\u201d\uff0c\u8fd9\u610f\u5473\u7740\u88c5\u9970\u5668 \u8ba9\u4f60\u80fd\u591f\u5728\u5b83\u88c5\u9970\u7684\u51fd\u6570\u524d\u540e\uff0c\u53bb\u6267\u884c\u53e6\u5916\u7684\u4e00\u4e9b\u4ee3\u7801 \uff0c\u800c\u4e0d\u4fee\u6539\u51fd\u6570\u672c\u8eab\u3002 \u624b\u5de5\u88c5\u9970 \u00b6 \u5982\u4f55\u624b\u5de5\u88c5\u9970\u51fd\u6570\u5462\uff1f # \u4e00\u4e2a\u88c5\u9970\u5668\u63a5\u6536\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002 def my_shiny_new_decorator ( a_function_to_decorate ): # \u51fd\u6570\u5185\u90e8\uff0c\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u5305\u88c5\uff08wrapper\uff09\u539f\u51fd\u6570\uff0c # \u56e0\u6b64\u80fd\u591f\u5728\u539f\u51fd\u6570\u524d\u540e\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 def the_wrapper_around_the_original_function (): # \u60f3\u5728\u539f\u51fd\u6570\u524d\u6267\u884c\u7684\u4ee3\u7801 print ( \"Before the function runs\" ) # \u4f7f\u7528\u62ec\u53f7\u8c03\u7528\u539f\u51fd\u6570 a_function_to_decorate () # \u60f3\u5728\u539f\u51fd\u6570\u540e\u6267\u884c\u7684\u4ee3\u7801 print ( \"After the function runs\" ) # \u5728\u8fd9\u91cc\uff0c\u88c5\u9970\u51fd\u6570\u5e76\u6ca1\u6709\u6267\u884c\u3002\u6211\u4eec\u4ec5\u4ec5\u662f\u8fd4\u56de\u6211\u4eec\u521a\u521b\u5efa\u7684\u5305\u88c5\u51fd\u6570\u3002 # \u8fd9\u4e2a\u5305\u88c5\u51fd\u6570\u5305\u542b\u4e86\u539f\u51fd\u6570\u4ee5\u53ca\u60f3\u5728\u539f\u51fd\u6570\u524d\u540e\u6267\u884c\u7684\u4ee3\u7801\uff0c\u4e00\u8d77\u51c6\u5907\u5c31\u7eea\u3002 return the_wrapper_around_the_original_function # \u73b0\u5728\u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u3002 def a_stand_alone_function (): print ( \"I am a stand alone function, don't you dare modify me\" ) a_stand_alone_function () # \u8f93\u51fa: I am a stand alone function, don't you dare modify me # \u597d\u4e86\uff0c\u4f60\u53ef\u4ee5\u88c5\u9970\u5b83\u6269\u5c55\u5b83\u7684\u884c\u4e3a # \u53ea\u9700\u8981\u628a\u5b83\u4f20\u7ed9\u88c5\u9970\u5668\uff0c\u5c31\u53ef\u4ee5\u7528\u4efb\u4f55\u4ee3\u7801\u53bb\u52a8\u6001\u5730\u5305\u88c5\u5b83\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7b49\u5f85\u8c03\u7528\u7684\u51fd\u6570\u3002 a_stand_alone_function_decorated = my_shiny_new_decorator ( a_stand_alone_function ) a_stand_alone_function_decorated () # \u8f93\u51fa: # Before the function runs # I am a stand alone function, don't you dare modify me # After the function runs \u73b0\u5728\uff0c\u4f60\u5f88\u53ef\u80fd\u60f3\uff0c\u8c03\u7528 a_stand_alone_function_decorated \u6765\u4ee3\u66ff\u8c03\u7528 a_stand_alone_function \u3002\u90a3\u5f88\u7b80\u5355\uff0c\u4ec5\u9700\u8981\u4f7f\u7528 my_shiny_new_decorator \u8fd4\u56de\u7684\u51fd\u6570\u5bf9\u8c61\u8986\u76d6 a_stand_alone_function \u7684\u503c\u5373\u53ef\u3002 a_stand_alone_function = my_shiny_new_decorator ( a_stand_alone_function ) a_stand_alone_function () # \u8f93\u51fa: # Before the function runs # I am a stand alone function, don't you dare modify me # After the function runs # \u8fd9\u5c31\u662f\u88c5\u9970\u5668\u6240\u505a\u7684\u4e8b\u60c5\uff01 \u89e3\u5bc6\u88c5\u9970\u5668 \u00b6 \u4f7f\u7528\u88c5\u9970\u5668\u6539\u5199\u4e4b\u524d\u7684\u4f8b\u5b50\u3002 @my_shiny_new_decorator def another_stand_alone_function (): print ( \"Leave me alone\" ) another_stand_alone_function () # \u8f93\u51fa: # Before the function runs # Leave me alone # After the function runs \u8fd9\u5f88\u7b80\u5355\uff0c @decorator \u76f8\u5f53\u4e8e\u662f\u8fd9\u4e2a\u8d4b\u503c\u8868\u8fbe\u5f0f\u7684\u7b80\u5199\u3002 another_stand_alone_function = my_shiny_new_decorator ( another_stand_alone_function ) \u88c5\u9970\u5668\u4ec5\u4ec5\u662f \u88c5\u9970\u5668\u6a21\u5f0f \u7684Pythonic\u5b9e\u73b0\u3002Python\u4e2d\u5185\u7f6e\u4e86\u5f88\u591a\u7ecf\u5178\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7b80\u5316\u5f00\u53d1\uff08\u4f8b\u5982\u8fed\u4ee3\u5668\u6a21\u5f0f\uff09\u3002 \u5f53\u524d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53e0\u52a0\u88c5\u9970\u5668\uff1a def bread ( func ): def wrapper (): print ( \"</''''''\\>\" ) func () print ( \"<\\______/>\" ) return wrapper def ingredients ( func ): def wrapper (): print ( \"#tomatoes#\" ) func () print ( \"~salad~\" ) return wrapper def sandwich ( food = \"--ham--\" ): print ( food ) sandwich () # \u8f93\u51fa: --ham-- sandwich = bread ( ingredients ( sandwich )) sandwich () # \u8f93\u51fa: # </''''''\\> # #tomatoes# # --ham-- # ~salad~ # <\\______/> \u4f7f\u7528Python\u7684\u88c5\u9970\u5668\u8bed\u6cd5\uff1a @bread @ingredients def sandwich ( food = \"--ham--\" ): print ( food ) sandwich () #outputs: # </''''''\\> # #tomatoes# # --ham-- # ~salad~ # <\\______/> \u88c5\u9970\u5668\u7684\u987a\u5e8f\u4f1a\u5f71\u54cd\u6700\u7ec8\u7684\u7ed3\u679c\uff1a @ingredients @bread def strange_sandwich ( food = \"--ham--\" ): print ( food ) strange_sandwich () # \u8f93\u51fa: # #tomatoes# # </''''''\\> # --ham-- # <\\______/> # ~salad~ \u73b0\u5728\u6765\u56de\u6765\u8fd9\u4e2a\u95ee\u9898 \u00b6 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 # The decorator to make it bold def makebold ( fn ): # \u88c5\u9970\u5668\u8fd4\u56de\u7684\u65b0\u51fd\u6570 def wrapper (): # \u5728\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801 return \"<b>\" + fn () + \"</b>\" return wrapper # The decorator to make it italic def makeitalic ( fn ): # \u88c5\u9970\u5668\u8fd4\u56de\u7684\u65b0\u51fd\u6570 def wrapper (): # \u5728\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801 return \"<i>\" + fn () + \"</i>\" return wrapper @makebold @makeitalic def say (): return \"hello\" print ( say ()) # \u8f93\u51fa: <b><i>hello</i></b> # \u7b49\u4ef7\u4e8e def say (): return \"hello\" say = makebold ( makeitalic ( say )) print ( say ()) # \u8f93\u51fa: <b><i>hello</i></b> \u63a5\u4e0b\u6765\u4ecb\u7ecd\u88c5\u9970\u5668\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u3002 \u88c5\u9970\u5668\u8fdb\u9636 \u00b6 \u7ed9\u88ab\u88c5\u9970\u51fd\u6570\u4f20\u53c2\u6570 \u00b6 # \u7ed9\u5305\u88c5\u51fd\u6570\u4f20\u9012\u53c2\u6570 def a_decorator_passing_arguments ( function_to_decorate ): def a_wrapper_accepting_arguments ( arg1 , arg2 ): print ( \"I got args! Look: {0}, {1}\" . format ( arg1 , arg2 )) function_to_decorate ( arg1 , arg2 ) return a_wrapper_accepting_arguments # \u8c03\u7528\u88c5\u9970\u5668\u8fd4\u56de\u7684\u51fd\u6570, \u5176\u5b9e\u5c31\u662f\u5728\u8c03\u7528\u5305\u88c5\u51fd\u6570, \u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u5305\u88c5\u51fd\u6570\uff0c\u5305\u88c5\u51fd\u6570\u518d\u4f20\u9012\u7ed9\u88ab\u88c5\u9970\u7684\u51fd\u6570\u3002 @a_decorator_passing_arguments def print_full_name ( first_name , last_name ): print ( \"My name is {0} {1}\" . format ( first_name , last_name )) print_full_name ( \"Peter\" , \"Venkman\" ) # \u8f93\u51fa: # I got args! Look: Peter Venkman # My name is Peter Venkman \u88c5\u9970\u5bf9\u8c61\u65b9\u6cd5 \u00b6 \u5728Python\u4e2d\u65b9\u6cd5\u548c\u51fd\u6570\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5bf9\u8c61\u65b9\u6cd5\u671f\u5f85\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5bf9\u5f53\u524d\u5bf9\u8c61\uff08 self \uff09\u7684\u5f15\u7528\u3002 \u8fd9\u5c31\u610f\u5473\u7740\uff0c\u4f60\u4e5f\u80fd\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u7ed9\u7ed9\u65b9\u6cd5\u6dfb\u52a0\u88c5\u9970\u5668\uff0c\u4ec5\u9700\u8981\u5c06 self \u8003\u8651\u5728\u5185\u3002 def method_friendly_decorator ( method_to_decorate ): def wrapper ( self , lie ): lie = lie - 3 # very friendly, decrease age even more :-) return method_to_decorate ( self , lie ) return wrapper class Lucy ( object ): def __init__ ( self ): self . age = 32 @method_friendly_decorator def sayYourAge ( self , lie ): print ( \"I am {0}, what did you think?\" . format ( self . age + lie )) l = Lucy () l . sayYourAge ( - 3 ) # \u8f93\u51fa: I am 26, what did you think? \u5982\u679c\u4f60\u60f3\u521b\u5efa\u901a\u7528\u7684\u88c5\u9970\u5668\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u51fd\u6570\u6216\u8005\u65b9\u6cd5\uff0c\u4e0d\u7ba1\u5b83\u7684\u53c2\u6570\u662f\u4ec0\u4e48\uff0c\u9700\u8981\u4f7f\u7528 *args , **kwargs \u3002 def a_decorator_passing_arbitrary_arguments ( function_to_decorate ): # \u5305\u88c5\u51fd\u6570\u63a5\u53d7\u4efb\u4f55\u53c2\u6570 def a_wrapper_accepting_arbitrary_arguments ( * args , ** kwargs ): print ( \"Do I have args?:\" ) print ( args ) print ( kwargs ) # \u4e0d\u719f\u6089 *args \u548c **kwargs\uff0cpack\uff0cunpack # \u8bf7\u67e5\u770b http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/ function_to_decorate ( * args , ** kwargs ) return a_wrapper_accepting_arbitrary_arguments @a_decorator_passing_arbitrary_arguments def function_with_no_argument (): print ( \"Python is cool, no argument here.\" ) function_with_no_argument () # \u8f93\u51fa\uff1a # Do I have args?: # () # {} # Python is cool, no argument here. @a_decorator_passing_arbitrary_arguments def function_with_arguments ( a , b , c ): print ( a , b , c ) function_with_arguments ( 1 , 2 , 3 ) # \u8f93\u51fa\uff1a # Do I have args?: # (1, 2, 3) # {} # 1 2 3 @a_decorator_passing_arbitrary_arguments def function_with_named_arguments ( a , b , c , platypus = \"Why not ?\" ): print ( \"Do {0}, {1} and {2} like platypus? {3}\" . format ( a , b , c , platypus )) function_with_named_arguments ( \"Bill\" , \"Linus\" , \"Steve\" , platypus = \"Indeed!\" ) # \u8f93\u51fa\uff1a # Do I have args ? : # ('Bill', 'Linus', 'Steve') # {'platypus': 'Indeed!'} # Do Bill, Linus and Steve like platypus? Indeed! class Mary ( object ): def __init__ ( self ): self . age = 31 @a_decorator_passing_arbitrary_arguments def sayYourAge ( self , lie =- 3 ): # You can now add a default value print ( \"I am {0}, what did you think?\" . format ( self . age + lie )) m = Mary () m . sayYourAge () # outputs # Do I have args?: # (<__main__.Mary object at 0xb7d303ac>,) # {} # I am 28, what did you think? \u7ed9\u88c5\u9970\u5668\u4f20\u53c2\u6570 \u00b6 \u5982\u4f55\u7ed9\u88c5\u9970\u5668\u672c\u8eab\u4f20\u53c2\u6570\u5462\uff1f \u8fd9\u53ef\u80fd\u6709\u70b9\u522b\u626d\uff0c\u56e0\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u4f60\u4e0d\u80fd\u591f\u5c06\u4f20\u9012\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\u7684\u53c2\u6570\u76f4\u63a5\u4f20\u7ed9\u88c5\u9970\u5668\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\uff0c\u6211\u4eec\u770b\u4e2a\u5c0f\u793a\u4f8b\u3002 # \u88c5\u9970\u5668\u662f\u666e\u901a\u7684\u51fd\u6570 def my_decorator ( func ): print ( \"I am an ordinary function\" ) def wrapper (): print ( \"I am function returned by the decorator\" ) func () return wrapper # \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u4e0d\u9700\u8981\u201c@\u201d\u6765\u8c03\u7528\u5b83 def lazy_function (): print ( \"zzzzzzzz\" ) decorated_function = my_decorator ( lazy_function ) # \u8f93\u51fa: I am an ordinary function # \u8f93\u51fa: I am an ordinary function\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4f60\u8c03\u7528\u4e86\u5b83\uff0c\u6ca1\u5565\u7279\u522b\u7684\u3002 @my_decorator def lazy_function (): print ( \"zzzzzzzz\" ) # \u8f93\u51fa: I am an ordinary function 2\u79cd\u7528\u6cd5\u6548\u679c\u4e00\u81f4\uff0c\u201c my_decorator \u201d\u90fd\u88ab\u8c03\u7528\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4f60 @my_decorator \uff0c\u4f60\u662f\u5728\u544a\u8bc9Python\uff0c\u8c03\u7528@\u6807\u5fd7\u7684\u8fd9\u4e2a\u51fd\u6570\u3002 \u8fd9\u5f88\u91cd\u8981\uff0c\u4f60\u7ed9\u7684\u8fd9\u4e2a\u6807\u7b7e\u80fd\u591f\u76f4\u63a5\u6307\u5411\u88c5\u9970\u5668\u3002 \u66f4\u8fdb\u4e00\u6b65\uff1a def decorator_maker (): print ( \"\u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002\" ) def my_decorator ( func ): print ( \"\u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002\" ) def wrapped (): print ( \"\u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002\" ) return func () print ( \"\u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002\" ) return wrapped print ( \"\u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002\" ) return my_decorator # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668 new_decorator = decorator_maker () # \u8f93\u51fa # \u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002 # \u63a5\u4e0b\u6765\u88c5\u9970\u4e00\u4e2a\u51fd\u6570 def decorated_function (): print ( \"\u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\" ) decorated_function = new_decorator ( decorated_function ) # \u8f93\u51fa: # \u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002 # \u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570: decorated_function () # \u8f93\u51fa: # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002 # \u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 \u8df3\u8fc7\u4e2d\u95f4\u53d8\u91cf\uff0c\u5b8c\u6210\u76f8\u540c\u7684\u4e8b\u60c5\u3002 def decorated_function (): print ( \"\u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\" ) decorated_function = decorator_maker ()( decorated_function ) # \u8f93\u51fa: # \u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002 # \u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002 # \u6700\u7ec8: decorated_function () # \u8f93\u51fa: # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002 # \u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 \u66f4\u7b80\u6d01\u4e00\u70b9 @decorator_maker () def decorated_function (): print ( \"I am the decorated function.\" ) # \u8f93\u51fa: # \u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002 # \u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002 # \u6700\u7ec8: decorated_function () # \u8f93\u51fa: # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002 # \u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 \u770b\u5230\u4e86\u5417\uff1f\u6211\u4eec\u4f7f\u7528\u201c @ \u201d\u8bed\u6cd5\u65f6\uff0c\u8fdb\u884c\u4e86\u51fd\u6570\u8c03\u7528\u3002 \u56de\u5230\u5982\u679c\u7ed9\u88c5\u9970\u5668\u4f20\u53c2\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u53bb\u751f\u6210\u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u8fd9\u4e2a\u51fd\u6570\u4f20\u53c2\uff0c\u4e0d\u662f\u5417\uff1f def decorator_maker_with_arguments ( decorator_arg1 , decorator_arg2 ): print ( \"\u6211\u521b\u5efa\u4e86\u88c5\u9970\u5668\uff0c\u6211\u63a5\u6536\u53c2\u6570: {0}, {1}\" . format ( decorator_arg1 , decorator_arg2 )) def my_decorator ( func ): # \u4e86\u89e3\u95ed\u5305 # \u53c2\u8003https://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python print ( \"\u6211\u662f\u88c5\u9970\u5668\uff0c\u7ed9\u6211\u4f20\u4e86\u53c2\u6570: {0}, {1}\" . format ( decorator_arg1 , decorator_arg2 )) # Don't confuse decorator arguments and function arguments! def wrapped ( function_arg1 , function_arg2 ) : print ( \"\u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u6211\u80fd\u8bbf\u95ee\u6240\u6709\u7684\u53d8\u91cf \\n \" \" \\t - \u6765\u81ea\u88c5\u9970\u5668\u7684: {0} {1} \\n \" \" \\t - \u6765\u81ea\u51fd\u6570\u8c03\u7528\u7684: {2} {3} \\n \" \"\u6211\u80fd\u628a\u5b83\u4eec\u88c5\u9012\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\" . format ( decorator_arg1 , decorator_arg2 , function_arg1 , function_arg2 )) return func ( function_arg1 , function_arg2 ) return wrapped return my_decorator @decorator_maker_with_arguments ( \"Leonard\" , \"Sheldon\" ) def decorated_function_with_arguments ( function_arg1 , function_arg2 ): print ( \"\u6211\u662f\u88ab\u5305\u88c5\u51fd\u6570\uff0c\u4ec5\u4ec5\u77e5\u9053\u81ea\u5df1\u7684\u53c2\u6570: {0}\" \" {1}\" . format ( function_arg1 , function_arg2 )) decorated_function_with_arguments ( \"Rajesh\" , \"Howard\" ) # \u8f93\u51fa: # \u6211\u521b\u5efa\u4e86\u88c5\u9970\u5668\uff0c\u6211\u63a5\u6536\u53c2\u6570:: Leonard, Sheldon # \u6211\u662f\u88c5\u9970\u5668\uff0c\u7ed9\u6211\u4f20\u4e86\u53c2\u6570: Leonard, Sheldon # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u6211\u80fd\u8bbf\u95ee\u6240\u6709\u7684\u53d8\u91cf # - \u6765\u81ea\u88c5\u9970\u5668\u7684: Leonard Sheldon # - \u6765\u81ea\u51fd\u6570\u8c03\u7528\u7684: Rajesh Howard # \u6211\u80fd\u628a\u5b83\u4eec\u88c5\u9012\u7ed9\u88ab\u88c5\u9970\u51fd\u6570 # \u6211\u662f\u88ab\u5305\u88c5\u51fd\u6570\uff0c\u4ec5\u4ec5\u77e5\u9053\u81ea\u5df1\u7684\u53c2\u6570: Rajesh Howard \u8fd9\u5c31\u662f\u5305\u542b\u53c2\u6570\u7684\u88c5\u9970\u5668\uff0c\u53c2\u6570\u4e5f\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u53d8\u91cf\u3002 c1 = \"Penny\" c2 = \"Leslie\" @decorator_maker_with_arguments ( \"Leonard\" , c1 ) def decorated_function_with_arguments ( function_arg1 , function_arg2 ): print ( \"\u6211\u662f\u88ab\u5305\u88c5\u51fd\u6570\uff0c\u4ec5\u4ec5\u77e5\u9053\u81ea\u5df1\u7684\u53c2\u6570:\" \" {0} {1}\" . format ( function_arg1 , function_arg2 )) decorated_function_with_arguments ( c2 , \"Howard\" ) \u5982\u4f60\u6240\u89c1\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u4f60\u80fd\u4f20\u9012\u53c2\u6570\u7ed9\u88c5\u9970\u5668\u3002\u4f60\u751a\u81f3\u80fd\u4f7f\u7528 *args \uff0c **kwargs \uff0c\u4f46\u662f\u8bb0\u4f4f\uff0c\u88c5\u9970\u5668\u53ea\u88ab \u8c03\u7528\u4e00\u6b21 \uff0c\u4ec5\u4ec5\u5f53Python\u5bfc\u5165\u8fd9\u4e2a\u811a\u672c\u7684\u65f6\u5019\u3002\u4e4b\u540e\u4f60\u4e0d\u80fd\u52a8\u6001\u5730\u8bbe\u7f6e\u53c2\u6570\u3002\u5f53\u4f60\"import x\"\u65f6\uff0c \u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u88c5\u9970\u4e86 \uff0c\u56e0\u6b64\u4e0d\u80fd\u53d8\u4e86\u3002 \u88c5\u9970\u4e00\u4e2a\u88c5\u9970\u5668 \u00b6 \u65e0\u53c2\u88c5\u9970\u5668 def parent_decorator ( child_decorator ): \"\"\"\u8fd9\u4e2a\u51fd\u6570\u5c06\u88ab\u5f53\u4f5c\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u6765\u88c5\u9970\u53e6\u4e00\u4e2a\u88c5\u9970\u5668: child_decorator\u3002\"\"\" # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668\uff08\u88c5\u9970\u5668\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff09\u3002 def wrapper ( func ): print ( '\u6211\u662f\u7236\u88c5\u9970\u5668' ) # \u8fd4\u56de\u4f20\u5165\u88c5\u9970\u5668\u7684\u8fd0\u884c\u7ed3\u679c\uff08\u88c5\u9970\u5668\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff09 return child_decorator ( func ) return wrapper @parent_decorator def child_decorator ( func ): def wrapper ( args ): print ( '\u6211\u662f\u5b50\u88c5\u9970\u5668' ) func ( args ) return wrapper @child_decorator def print_hello ( name ): print ( '\u6211\u662f' , name ) print_hello ( '\u6781\u5ba2\u5154\u5154 https://geektutu.com' ) # \u8f93\u51fa\uff1a # \u6211\u662f\u7236\u88c5\u9970\u5668 # \u6211\u662f\u5b50\u88c5\u9970\u5668 # \u6211\u662f \u6781\u5ba2\u5154\u5154 https://geektutu.com \u63a5\u53d7\u4efb\u610f\u53c2\u6570\u7684\u88c5\u9970\u5668 \u63a5\u4e0b\u91cc\u5c06\u7ed9\u51fa\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\uff0c\u5141\u8bb8\u4f20\u5165\u4efb\u4f55\u53c2\u6570\u6765\u521b\u5efa\u88c5\u9970\u5668\u3002\u4e3a\u4e86\u63a5\u53d7\u51fd\u6570\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u521b\u5efa\u88c5\u9970\u5668\u3002 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u5305\u88c5\u8fd9\u4e2a\u88c5\u9970\u5668\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5305\u88c5\u51fd\u6570\u5c31\u6210\u4e3a\u4e86\u88c5\u9970\u4e86\u8fd9\u4e2a\u88c5\u9970\u5668\u7684\u65b0\u7684\u88c5\u9970\u5668\u3002 \u63a5\u4e0b\u6765\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u4f55\u88c5\u9970\u4e00\u4e2a\u88c5\u9970\u5668\u3002 def decorator_with_args ( decorator_to_enhance ): \"\"\"\u8fd9\u4e2a\u51fd\u6570\u5c06\u88ab\u5f53\u4f5c\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u6765\u88c5\u9970\u53e6\u4e00\u4e2a\u88c5\u9970\u5668\u3002\u5141\u8bb8\u63a5\u53d7\u4efb\u610f\u7684\u53c2\u6570\u3002\"\"\" # \u4f7f\u7528\u548c\u4e0a\u9762\u4f8b\u5b50\u76f8\u540c\u7684\u65b9\u6cd5\u6765\u4f20\u9012\u53c2\u6570\uff0c\u521b\u5efa\u88c5\u9970\u5668 def decorator_maker ( * args , ** kwargs ): # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668\uff08\u88c5\u9970\u5668\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff09\uff0c\u4f46\u662f\u4fdd\u7559\u4e86maker\u4f20\u5165\u7684\u53c2\u6570\u3002 def decorator_wrapper ( func ): # \u8fd4\u56de\u4f20\u5165\u88c5\u9970\u5668\u7684\u8fd0\u884c\u7ed3\u679c\uff08\u88c5\u9970\u5668\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff09 # \u4f20\u5165\u7684\u88c5\u9970\u5668\u7684\u58f0\u660e\u5fc5\u987b\u662f decorator(func, *args, **kwargs) return decorator_to_enhance ( func , * args , ** kwargs ) return decorator_wrapper return decorator_maker \u8fd9\u6837\u4f7f\u7528 # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u5e76\u7528 @decorator_with_args \u88c5\u9970\u5b83 # \u88c5\u9970\u5668\u7684\u58f0\u660e\u662f \"decorator(func, *args, **kwargs)\"\uff0c # \u9700\u4e0edecorator_with_args\u4e2d\u4fdd\u6301\u4e00\u81f4\u3002 @decorator_with_args def decorated_decorator ( func , * args , ** kwargs ): def wrapper ( function_arg1 , function_arg2 ): print ( \"Decorated with {0} {1}\" . format ( args , kwargs )) return func ( function_arg1 , function_arg2 ) return wrapper # \u88c5\u9970\u76ee\u6807\u51fd\u6570 @decorated_decorator ( 42 , 404 , 1024 ) def decorated_function ( function_arg1 , function_arg2 ): print ( \"Hello {0} {1}\" . format ( function_arg1 , function_arg2 )) decorated_function ( \"Universe and\" , \"everything\" ) # \u8f93\u51fa: # Decorated with (42, 404, 1024) {} # Hello Universe and everything \u88c5\u9970\u5668\u7684\u6700\u4f73\u5b9e\u8df5 \u00b6 \u88c5\u9970\u5668\u5728Python2.4\u4e2d\u88ab\u5f15\u5165\uff0c\u88c5\u9970\u5668\u4f1a\u8ba9\u51fd\u6570\u8c03\u7528\u53d8\u6162\uff0c\u4f60\u9700\u8981\u77e5\u9053\u8fd9\u4e00\u70b9\u3002 \u4f60\u4e0d\u80fd\u591f\u53d6\u6d88\u5bf9\u4e00\u4e2a\u51fd\u6570\u7684\u88c5\u9970 \uff08\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u80fd\u88ab\u79fb\u9664\u7684\u88c5\u9970\u5668\uff0c\u4f46\u662f\u6ca1\u4eba\u4f7f\u7528\uff09\uff0c\u56e0\u6b64\uff0c\u4e00\u65e6\u4e00\u4e2a\u51fd\u6570\u88ab\u88c5\u9970\u4e86\uff0c\u90a3\u4e48\u6240\u6709\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u65b9\u90fd\u88ab\u88c5\u9970\u4e86\u3002 \u88c5\u9970\u5668\u5305\u88c5\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u8ba9\u8c03\u8bd5\u53d8\u5f97\u56f0\u96be\u3002\uff08\u5bf9\u4e8ePython >= 2.5\u7684\u7248\u672c\uff0c\u4f1a\u5bb9\u6613\u4e00\u4e9b\uff0c\u539f\u56e0\u5982\u4e0b\uff09\u3002 functools \u8fd9\u4e2a\u6a21\u5757\uff0c\u5728Python 2.5\u4e2d\u5f15\u5165\uff0c\u5305\u542b\u4e86 functools.wraps() \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c06\u4f1a\u628a\u88ab\u88c5\u9970\u51fd\u6570\u7684\u540d\u79f0\u3001\u6a21\u5757\u548cdocstring\u590d\u5236\u5230\u5b83\u7684\u88c5\u9970\u5668\u4e2d\u3002(\u4e8b\u5b9e\u4e0a\uff0c functools.wraps() \u4e5f\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u263a) # \u4e3a\u4e86\u8c03\u8bd5\uff0c\u5806\u6808\u5c06\u6253\u5370\u51fa\u51fd\u6570\u540d\u3002 def foo (): print ( \"foo\" ) print ( foo . __name__ ) # \u8f93\u51fa: foo # \u7528\u4e86\u88c5\u9970\u540e\uff0c\u53d8\u5f97\u590d\u6742\u4e86 def bar ( func ): def wrapper (): print ( \"bar\" ) return func () return wrapper @bar def foo (): print ( \"foo\" ) print ( foo . __name__ ) # \u8f93\u51fa: wrapper # \"functools\" \u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 import functools def bar ( func ): # \"wrapper\"\u5305\u88c5\u4e86\"func\" # \u795e\u5947\u7684\u4e8b\u60c5\u5728\u8fd9~ @functools.wraps ( func ) def wrapper (): print ( \"bar\" ) return func () return wrapper @bar def foo (): print ( \"foo\" ) print ( foo . __name__ ) # \u8f93\u51fa: foo \u88c5\u9970\u5668\u7528\u6765\u505a\u4ec0\u4e48\uff1f \u00b6 \u73b0\u5728\u6700\u5927\u7684\u95ee\u9898 \uff0c\u88c5\u9970\u5668\u7528\u6765\u505a\u4ec0\u4e48\uff1f \u770b\u8d77\u6765\u5f88\u9177\uff0c\u5f88\u5f3a\u5927\uff0c\u4f46\u662f\u5b9e\u7528\u624d\u662f\u738b\u9053\u3002\u5f53\u7136\uff0c\u8fd9\u6709\u65e0\u6570\u79cd\u53ef\u80fd\u6027\u3002\u7ecf\u5178\u7684\u7528\u6cd5\u662f\u7528\u6765\u6269\u5c55\u4e0d\u80fd\u4fee\u6539\u7684\u5916\u90e8\u5e93\u5bfc\u5165\u7684\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u6216\u8005\u4e3a\u4e86\u8c03\u8bd5\u3002 \u4f60\u53ef\u4ee5\u6269\u5c55\u597d\u51e0\u4e2a\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u50cf\u8fd9\u6837\uff1a def benchmark ( func ): \"\"\" \u6253\u5370\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u7684\u88c5\u9970\u5668 \"\"\" import time def wrapper ( * args , ** kwargs ): t = time . clock () res = func ( * args , ** kwargs ) print ( \"{0} {1}\" . format ( func . __name__ , time . clock () - t )) return res return wrapper def logging ( func ): \"\"\" \u6253\u5370\u811a\u672c\u6d3b\u52a8\u7684\u88c5\u9970\u5668 \"\"\" def wrapper ( * args , ** kwargs ): res = func ( * args , ** kwargs ) print ( \"{0} {1} {2}\" . format ( func . __name__ , args , kwargs )) return res return wrapper def counter ( func ): \"\"\" \u6253\u5370\u51fd\u6570\u88ab\u8c03\u7528\u6b21\u6570\u7684\u88c5\u9970\u5668 \"\"\" def wrapper ( * args , ** kwargs ): wrapper . count = wrapper . count + 1 res = func ( * args , ** kwargs ) print ( \"{0} has been used: {1}x\" . format ( func . __name__ , wrapper . count )) return res wrapper . count = 0 return wrapper @counter @benchmark @logging def reverse_string ( string ): return str ( reversed ( string )) print ( reverse_string ( \"Able was I ere I saw Elba\" )) print ( reverse_string ( \"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!\" )) # \u8f93\u51fa: # reverse_string ('Able was I ere I saw Elba',) {} # wrapper 0.0 # wrapper has been used: 1x # ablE was I ere I saw elbA # reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {} # wrapper 0.0 # wrapper has been used: 2x # !amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A \u5f53\u524d\uff0c\u88c5\u9970\u5668\u7684\u597d\u5904\u8fd8\u5728\u4e8e\u5982\u679c\u80fd\u591f\u6b63\u786e\u4f7f\u7528\uff0c\u53ef\u907f\u514d\u91cd\u590d\u4ee3\u7801\u3002 @counter @benchmark @logging def get_random_futurama_quote (): from urllib import urlopen result = urlopen ( \"http://subfusion.net/cgi-bin/quote.pl?quote=futurama\" ) . read () try : value = result . split ( \"<br><b><hr><br>\" )[ 1 ] . split ( \"<br><br><hr>\" )[ 0 ] return value . strip () except : return \"No, I'm ... doesn't!\" print ( get_random_futurama_quote ()) print ( get_random_futurama_quote ()) # outputs: # get_random_futurama_quote () {} # wrapper 0.02 # wrapper has been used: 1x # The laws of science be a harsh mistress. # get_random_futurama_quote () {} # wrapper 0.01 # wrapper has been used: 2x # Curse you, merciful Poseidon! Python \u5185\u7f6e\u4e86\u5f88\u591a\u88c5\u9970\u5668\uff1a property , staticmethod \uff0c\u7b49\u3002 Django\u4f7f\u7528\u88c5\u9970\u5668\u6765\u7ba1\u7406\u7f13\u5b58\uff0c\u89c6\u56fe\u6743\u9650\u3002 \u96c6\u6210\u5185\u90e8\u5f02\u6b65\u8c03\u7528\u3002 \u88c5\u9970\u5668\u7684\u4f7f\u7528\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\u3002","title":"17.\u5982\u4f55\u521b\u5efa\u8fde\u7eed\u8c03\u7528\u7684\u51fd\u6570\u88c5\u9970\u5668"},{"location":"stackoverflow-python-top-qa/17/#17","text":"","title":"17. \u5982\u4f55\u521b\u5efa\u8fde\u7eed\u8c03\u7528\u7684\u51fd\u6570\u88c5\u9970\u5668"},{"location":"stackoverflow-python-top-qa/17/#_1","text":"\u5728Python\u4e2d\u5982\u4f55\u521b\u5efa2\u4e2a\u88c5\u9970\u5668\uff0c\u5b8c\u6210\u5982\u4e0b\u529f\u80fd\uff1a @makebold @makeitalic def say (): return \"Hello\" \u5c06\u8fd4\u56de \"<b><i>Hello</i></b>\" \u6211\u5e76\u975e\u5728\u771f\u5b9e\u7684\u5e94\u7528\u7528\u8fd9\u79cd\u65b9\u5f0f\u53bb\u6784\u9020HTML\uff0c\u4ec5\u4ec5\u60f3\u53bb\u7406\u89e3\u88c5\u9970\u5668\u548c\u88c5\u9970\u5668\u94fe\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/17/#_2","text":"\u67e5\u770b \u6587\u6863 \u53bb\u4e86\u89e3\u88c5\u9970\u5668\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8fd9\u91cc\u662f\u4f60\u60f3\u8981\u7684\u3002 def makebold ( fn ): def wrapped (): return \"<b>\" + fn () + \"</b>\" return wrapped def makeitalic ( fn ): def wrapped (): return \"<i>\" + fn () + \"</i>\" return wrapped @makebold @makeitalic def hello (): return \"hello world\" print hello () ## returns \"<b><i>hello world</i></b>\"","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/17/#_3","text":"","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/17/#_4","text":"","title":"\u88c5\u9970\u5668\u57fa\u7840"},{"location":"stackoverflow-python-top-qa/17/#python","text":"\u4e3a\u4e86\u7406\u89e3\u88c5\u9970\u5668\uff0c\u4f60\u5fc5\u987b\u5148\u7406\u89e3Python\u4e2d\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61\uff0c\u8fd9\u5f88\u91cd\u8981\u3002\u63a5\u4e0b\u7528\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u89e3\u91ca\u3002 def shout ( word = \"yes\" ): return word . capitalize () + \"!\" print ( shout ()) # \u8f93\u51fa: 'Yes!' # \u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f60\u4e5f\u80fd\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u628a\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 scream = shout # \u6ce8\u610f\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u4f7f\u7528\u62ec\u53f7\uff1a\u6ca1\u6709\u8c03\u7528shout # \u4ec5\u4ec5\u662f\u628ashout\u8d4b\u503c\u7ed9scream\uff0c\u8fd9\u610f\u5473\u7740\u63a5\u4e0b\u6765\u53ef\u4ee5\u8c03\u7528scream print ( scream ()) # \u8f93\u51fa: 'Yes!' # \u4e0d\u4ec5\u5982\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5220\u9664shout, # \u8fd9\u4e2a\u51fd\u6570\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7scream\u8bbf\u95ee\u5230\u3002 del shout try : print ( shout ()) except NameError , e : print ( e ) # \u8f93\u51fa: \"name 'shout' is not defined\" print ( scream ()) # \u8f93\u51fa: 'Yes!' \u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5f88\u5feb\u4f1a\u7528\u5230\u3002 \u5728Python\u4e2d\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u7279\u6027\u662f\u5b83\u4eec\u53ef\u4ee5\u518d\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u58f0\u660e\u3002 def talk (): # \u5728 \"talk\" \u4e2d\u53ef\u4ee5\u968f\u610f\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570... def whisper ( word = \"yes\" ): return word . lower () + \"...\" # ... \u800c\u4e14\u53ef\u4ee5\u7406\u89e3\u8c03\u7528 print ( whisper ()) # \u6bcf\u6b21\u8c03\u7528 \u201ctalk\u201d\uff0c\u5185\u90e8\u58f0\u660e\u7684 \"whisper\" \u4e5f\u4f1a\u88ab\u8c03\u7528\u3002 talk () # \u8f93\u51fa: \"yes...\" # \u4f46\u662f\u5728 \"talk\" \u4e4b\u5916\uff0c\"whisper\" \u5e76\u4e0d\u5b58\u5728: try : print ( whisper ()) except NameError , e : print ( e ) # \u8f93\u51fa : \"name 'whisper' is not defined\"* # Python\u7684\u51fd\u6570\u662f\u5bf9\u8c61\uff0c\u5c31\u50cf\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u5176\u4ed6\u666e\u901a\u5bf9\u8c61\u4e00\u6837\u3002","title":"Python\u4e2d\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61"},{"location":"stackoverflow-python-top-qa/17/#_5","text":"\u63a5\u4e0b\u6765\u5c31\u6bd4\u8f83\u6709\u8da3\u4e86\u3002 \u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u51fd\u6570\u662f\u5bf9\u8c61\uff0c\u56e0\u6b64\u51fd\u6570\uff1a \u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\uff0c \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5 \u8fd4\u56de \u53e6\u4e00\u4e2a\u51fd\u6570\u3002 def getTalk ( kind = \"shout\" ): # \u968f\u610f\u5b9a\u4e49\u51fd\u6570 def shout ( word = \"yes\" ): return word . capitalize () + \"!\" def whisper ( word = \"yes\" ) : return word . lower () + \"...\" ; # \u6211\u4eec\u8fd4\u56de\u5176\u4e2d\u4e4b\u4e00\u3002 if kind == \"shout\" : # \u4e0d\u4f7f\u7528 \"()\", \u5373\u4e0d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ec5\u8fd4\u56de\u51fd\u6570\u5bf9\u8c61\u3002 return shout else : return whisper # \u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u5c06\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 talk = getTalk () # \u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u770b\u5230\u201ctalk\u201d\u662f\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 print ( talk ) # \u8f93\u51fa: <function shout at 0xb7ea817c> # \u8fd9\u4e2a\u5bf9\u8c61\u662f\u88ab \u201cgetTalk\u201d \u51fd\u6570\u8fd4\u56de\u7684\u3002 print ( talk ()) # \u8f93\u51fa: Yes! # \u4f60\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd4\u56de\u65f6\u8c03\u7528\u3002 print ( getTalk ( \"whisper\" )()) # \u8f93\u51fa: yes... \u4e0d\u4ec5\u5982\u6b64\uff0c\u5982\u679c\u4f60\u80fd\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u4f60\u4e5f\u80fd\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff1a def doSomethingBefore ( func ): print ( \"I do something before then I call the function you gave me\" ) print ( func ()) doSomethingBefore ( scream ) # \u8f93\u51fa: # I do something before then I call the function you gave me # Yes! \u4f60\u5df2\u7ecf\u638c\u63e1\u4e86\u9700\u8981\u7406\u89e3\u88c5\u9970\u5668\u4e00\u5207\u57fa\u7840\u6982\u5ff5\u4e86\u3002\u6b63\u5982\u4f60\u6240\u89c1\uff0c\u88c5\u9970\u5668\u5c31\u662f\u51fd\u6570\u7684\u201c\u5305\u88c5\u201d\uff0c\u8fd9\u610f\u5473\u7740\u88c5\u9970\u5668 \u8ba9\u4f60\u80fd\u591f\u5728\u5b83\u88c5\u9970\u7684\u51fd\u6570\u524d\u540e\uff0c\u53bb\u6267\u884c\u53e6\u5916\u7684\u4e00\u4e9b\u4ee3\u7801 \uff0c\u800c\u4e0d\u4fee\u6539\u51fd\u6570\u672c\u8eab\u3002","title":"\u51fd\u6570\u5f15\u7528"},{"location":"stackoverflow-python-top-qa/17/#_6","text":"\u5982\u4f55\u624b\u5de5\u88c5\u9970\u51fd\u6570\u5462\uff1f # \u4e00\u4e2a\u88c5\u9970\u5668\u63a5\u6536\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002 def my_shiny_new_decorator ( a_function_to_decorate ): # \u51fd\u6570\u5185\u90e8\uff0c\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u5305\u88c5\uff08wrapper\uff09\u539f\u51fd\u6570\uff0c # \u56e0\u6b64\u80fd\u591f\u5728\u539f\u51fd\u6570\u524d\u540e\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 def the_wrapper_around_the_original_function (): # \u60f3\u5728\u539f\u51fd\u6570\u524d\u6267\u884c\u7684\u4ee3\u7801 print ( \"Before the function runs\" ) # \u4f7f\u7528\u62ec\u53f7\u8c03\u7528\u539f\u51fd\u6570 a_function_to_decorate () # \u60f3\u5728\u539f\u51fd\u6570\u540e\u6267\u884c\u7684\u4ee3\u7801 print ( \"After the function runs\" ) # \u5728\u8fd9\u91cc\uff0c\u88c5\u9970\u51fd\u6570\u5e76\u6ca1\u6709\u6267\u884c\u3002\u6211\u4eec\u4ec5\u4ec5\u662f\u8fd4\u56de\u6211\u4eec\u521a\u521b\u5efa\u7684\u5305\u88c5\u51fd\u6570\u3002 # \u8fd9\u4e2a\u5305\u88c5\u51fd\u6570\u5305\u542b\u4e86\u539f\u51fd\u6570\u4ee5\u53ca\u60f3\u5728\u539f\u51fd\u6570\u524d\u540e\u6267\u884c\u7684\u4ee3\u7801\uff0c\u4e00\u8d77\u51c6\u5907\u5c31\u7eea\u3002 return the_wrapper_around_the_original_function # \u73b0\u5728\u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u3002 def a_stand_alone_function (): print ( \"I am a stand alone function, don't you dare modify me\" ) a_stand_alone_function () # \u8f93\u51fa: I am a stand alone function, don't you dare modify me # \u597d\u4e86\uff0c\u4f60\u53ef\u4ee5\u88c5\u9970\u5b83\u6269\u5c55\u5b83\u7684\u884c\u4e3a # \u53ea\u9700\u8981\u628a\u5b83\u4f20\u7ed9\u88c5\u9970\u5668\uff0c\u5c31\u53ef\u4ee5\u7528\u4efb\u4f55\u4ee3\u7801\u53bb\u52a8\u6001\u5730\u5305\u88c5\u5b83\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7b49\u5f85\u8c03\u7528\u7684\u51fd\u6570\u3002 a_stand_alone_function_decorated = my_shiny_new_decorator ( a_stand_alone_function ) a_stand_alone_function_decorated () # \u8f93\u51fa: # Before the function runs # I am a stand alone function, don't you dare modify me # After the function runs \u73b0\u5728\uff0c\u4f60\u5f88\u53ef\u80fd\u60f3\uff0c\u8c03\u7528 a_stand_alone_function_decorated \u6765\u4ee3\u66ff\u8c03\u7528 a_stand_alone_function \u3002\u90a3\u5f88\u7b80\u5355\uff0c\u4ec5\u9700\u8981\u4f7f\u7528 my_shiny_new_decorator \u8fd4\u56de\u7684\u51fd\u6570\u5bf9\u8c61\u8986\u76d6 a_stand_alone_function \u7684\u503c\u5373\u53ef\u3002 a_stand_alone_function = my_shiny_new_decorator ( a_stand_alone_function ) a_stand_alone_function () # \u8f93\u51fa: # Before the function runs # I am a stand alone function, don't you dare modify me # After the function runs # \u8fd9\u5c31\u662f\u88c5\u9970\u5668\u6240\u505a\u7684\u4e8b\u60c5\uff01","title":"\u624b\u5de5\u88c5\u9970"},{"location":"stackoverflow-python-top-qa/17/#_7","text":"\u4f7f\u7528\u88c5\u9970\u5668\u6539\u5199\u4e4b\u524d\u7684\u4f8b\u5b50\u3002 @my_shiny_new_decorator def another_stand_alone_function (): print ( \"Leave me alone\" ) another_stand_alone_function () # \u8f93\u51fa: # Before the function runs # Leave me alone # After the function runs \u8fd9\u5f88\u7b80\u5355\uff0c @decorator \u76f8\u5f53\u4e8e\u662f\u8fd9\u4e2a\u8d4b\u503c\u8868\u8fbe\u5f0f\u7684\u7b80\u5199\u3002 another_stand_alone_function = my_shiny_new_decorator ( another_stand_alone_function ) \u88c5\u9970\u5668\u4ec5\u4ec5\u662f \u88c5\u9970\u5668\u6a21\u5f0f \u7684Pythonic\u5b9e\u73b0\u3002Python\u4e2d\u5185\u7f6e\u4e86\u5f88\u591a\u7ecf\u5178\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7b80\u5316\u5f00\u53d1\uff08\u4f8b\u5982\u8fed\u4ee3\u5668\u6a21\u5f0f\uff09\u3002 \u5f53\u524d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53e0\u52a0\u88c5\u9970\u5668\uff1a def bread ( func ): def wrapper (): print ( \"</''''''\\>\" ) func () print ( \"<\\______/>\" ) return wrapper def ingredients ( func ): def wrapper (): print ( \"#tomatoes#\" ) func () print ( \"~salad~\" ) return wrapper def sandwich ( food = \"--ham--\" ): print ( food ) sandwich () # \u8f93\u51fa: --ham-- sandwich = bread ( ingredients ( sandwich )) sandwich () # \u8f93\u51fa: # </''''''\\> # #tomatoes# # --ham-- # ~salad~ # <\\______/> \u4f7f\u7528Python\u7684\u88c5\u9970\u5668\u8bed\u6cd5\uff1a @bread @ingredients def sandwich ( food = \"--ham--\" ): print ( food ) sandwich () #outputs: # </''''''\\> # #tomatoes# # --ham-- # ~salad~ # <\\______/> \u88c5\u9970\u5668\u7684\u987a\u5e8f\u4f1a\u5f71\u54cd\u6700\u7ec8\u7684\u7ed3\u679c\uff1a @ingredients @bread def strange_sandwich ( food = \"--ham--\" ): print ( food ) strange_sandwich () # \u8f93\u51fa: # #tomatoes# # </''''''\\> # --ham-- # <\\______/> # ~salad~","title":"\u89e3\u5bc6\u88c5\u9970\u5668"},{"location":"stackoverflow-python-top-qa/17/#_8","text":"\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 # The decorator to make it bold def makebold ( fn ): # \u88c5\u9970\u5668\u8fd4\u56de\u7684\u65b0\u51fd\u6570 def wrapper (): # \u5728\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801 return \"<b>\" + fn () + \"</b>\" return wrapper # The decorator to make it italic def makeitalic ( fn ): # \u88c5\u9970\u5668\u8fd4\u56de\u7684\u65b0\u51fd\u6570 def wrapper (): # \u5728\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801 return \"<i>\" + fn () + \"</i>\" return wrapper @makebold @makeitalic def say (): return \"hello\" print ( say ()) # \u8f93\u51fa: <b><i>hello</i></b> # \u7b49\u4ef7\u4e8e def say (): return \"hello\" say = makebold ( makeitalic ( say )) print ( say ()) # \u8f93\u51fa: <b><i>hello</i></b> \u63a5\u4e0b\u6765\u4ecb\u7ecd\u88c5\u9970\u5668\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u3002","title":"\u73b0\u5728\u6765\u56de\u6765\u8fd9\u4e2a\u95ee\u9898"},{"location":"stackoverflow-python-top-qa/17/#_9","text":"","title":"\u88c5\u9970\u5668\u8fdb\u9636"},{"location":"stackoverflow-python-top-qa/17/#_10","text":"# \u7ed9\u5305\u88c5\u51fd\u6570\u4f20\u9012\u53c2\u6570 def a_decorator_passing_arguments ( function_to_decorate ): def a_wrapper_accepting_arguments ( arg1 , arg2 ): print ( \"I got args! Look: {0}, {1}\" . format ( arg1 , arg2 )) function_to_decorate ( arg1 , arg2 ) return a_wrapper_accepting_arguments # \u8c03\u7528\u88c5\u9970\u5668\u8fd4\u56de\u7684\u51fd\u6570, \u5176\u5b9e\u5c31\u662f\u5728\u8c03\u7528\u5305\u88c5\u51fd\u6570, \u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u5305\u88c5\u51fd\u6570\uff0c\u5305\u88c5\u51fd\u6570\u518d\u4f20\u9012\u7ed9\u88ab\u88c5\u9970\u7684\u51fd\u6570\u3002 @a_decorator_passing_arguments def print_full_name ( first_name , last_name ): print ( \"My name is {0} {1}\" . format ( first_name , last_name )) print_full_name ( \"Peter\" , \"Venkman\" ) # \u8f93\u51fa: # I got args! Look: Peter Venkman # My name is Peter Venkman","title":"\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\u4f20\u53c2\u6570"},{"location":"stackoverflow-python-top-qa/17/#_11","text":"\u5728Python\u4e2d\u65b9\u6cd5\u548c\u51fd\u6570\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5bf9\u8c61\u65b9\u6cd5\u671f\u5f85\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5bf9\u5f53\u524d\u5bf9\u8c61\uff08 self \uff09\u7684\u5f15\u7528\u3002 \u8fd9\u5c31\u610f\u5473\u7740\uff0c\u4f60\u4e5f\u80fd\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u7ed9\u7ed9\u65b9\u6cd5\u6dfb\u52a0\u88c5\u9970\u5668\uff0c\u4ec5\u9700\u8981\u5c06 self \u8003\u8651\u5728\u5185\u3002 def method_friendly_decorator ( method_to_decorate ): def wrapper ( self , lie ): lie = lie - 3 # very friendly, decrease age even more :-) return method_to_decorate ( self , lie ) return wrapper class Lucy ( object ): def __init__ ( self ): self . age = 32 @method_friendly_decorator def sayYourAge ( self , lie ): print ( \"I am {0}, what did you think?\" . format ( self . age + lie )) l = Lucy () l . sayYourAge ( - 3 ) # \u8f93\u51fa: I am 26, what did you think? \u5982\u679c\u4f60\u60f3\u521b\u5efa\u901a\u7528\u7684\u88c5\u9970\u5668\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u51fd\u6570\u6216\u8005\u65b9\u6cd5\uff0c\u4e0d\u7ba1\u5b83\u7684\u53c2\u6570\u662f\u4ec0\u4e48\uff0c\u9700\u8981\u4f7f\u7528 *args , **kwargs \u3002 def a_decorator_passing_arbitrary_arguments ( function_to_decorate ): # \u5305\u88c5\u51fd\u6570\u63a5\u53d7\u4efb\u4f55\u53c2\u6570 def a_wrapper_accepting_arbitrary_arguments ( * args , ** kwargs ): print ( \"Do I have args?:\" ) print ( args ) print ( kwargs ) # \u4e0d\u719f\u6089 *args \u548c **kwargs\uff0cpack\uff0cunpack # \u8bf7\u67e5\u770b http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/ function_to_decorate ( * args , ** kwargs ) return a_wrapper_accepting_arbitrary_arguments @a_decorator_passing_arbitrary_arguments def function_with_no_argument (): print ( \"Python is cool, no argument here.\" ) function_with_no_argument () # \u8f93\u51fa\uff1a # Do I have args?: # () # {} # Python is cool, no argument here. @a_decorator_passing_arbitrary_arguments def function_with_arguments ( a , b , c ): print ( a , b , c ) function_with_arguments ( 1 , 2 , 3 ) # \u8f93\u51fa\uff1a # Do I have args?: # (1, 2, 3) # {} # 1 2 3 @a_decorator_passing_arbitrary_arguments def function_with_named_arguments ( a , b , c , platypus = \"Why not ?\" ): print ( \"Do {0}, {1} and {2} like platypus? {3}\" . format ( a , b , c , platypus )) function_with_named_arguments ( \"Bill\" , \"Linus\" , \"Steve\" , platypus = \"Indeed!\" ) # \u8f93\u51fa\uff1a # Do I have args ? : # ('Bill', 'Linus', 'Steve') # {'platypus': 'Indeed!'} # Do Bill, Linus and Steve like platypus? Indeed! class Mary ( object ): def __init__ ( self ): self . age = 31 @a_decorator_passing_arbitrary_arguments def sayYourAge ( self , lie =- 3 ): # You can now add a default value print ( \"I am {0}, what did you think?\" . format ( self . age + lie )) m = Mary () m . sayYourAge () # outputs # Do I have args?: # (<__main__.Mary object at 0xb7d303ac>,) # {} # I am 28, what did you think?","title":"\u88c5\u9970\u5bf9\u8c61\u65b9\u6cd5"},{"location":"stackoverflow-python-top-qa/17/#_12","text":"\u5982\u4f55\u7ed9\u88c5\u9970\u5668\u672c\u8eab\u4f20\u53c2\u6570\u5462\uff1f \u8fd9\u53ef\u80fd\u6709\u70b9\u522b\u626d\uff0c\u56e0\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u4f60\u4e0d\u80fd\u591f\u5c06\u4f20\u9012\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\u7684\u53c2\u6570\u76f4\u63a5\u4f20\u7ed9\u88c5\u9970\u5668\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\uff0c\u6211\u4eec\u770b\u4e2a\u5c0f\u793a\u4f8b\u3002 # \u88c5\u9970\u5668\u662f\u666e\u901a\u7684\u51fd\u6570 def my_decorator ( func ): print ( \"I am an ordinary function\" ) def wrapper (): print ( \"I am function returned by the decorator\" ) func () return wrapper # \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u4e0d\u9700\u8981\u201c@\u201d\u6765\u8c03\u7528\u5b83 def lazy_function (): print ( \"zzzzzzzz\" ) decorated_function = my_decorator ( lazy_function ) # \u8f93\u51fa: I am an ordinary function # \u8f93\u51fa: I am an ordinary function\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4f60\u8c03\u7528\u4e86\u5b83\uff0c\u6ca1\u5565\u7279\u522b\u7684\u3002 @my_decorator def lazy_function (): print ( \"zzzzzzzz\" ) # \u8f93\u51fa: I am an ordinary function 2\u79cd\u7528\u6cd5\u6548\u679c\u4e00\u81f4\uff0c\u201c my_decorator \u201d\u90fd\u88ab\u8c03\u7528\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4f60 @my_decorator \uff0c\u4f60\u662f\u5728\u544a\u8bc9Python\uff0c\u8c03\u7528@\u6807\u5fd7\u7684\u8fd9\u4e2a\u51fd\u6570\u3002 \u8fd9\u5f88\u91cd\u8981\uff0c\u4f60\u7ed9\u7684\u8fd9\u4e2a\u6807\u7b7e\u80fd\u591f\u76f4\u63a5\u6307\u5411\u88c5\u9970\u5668\u3002 \u66f4\u8fdb\u4e00\u6b65\uff1a def decorator_maker (): print ( \"\u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002\" ) def my_decorator ( func ): print ( \"\u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002\" ) def wrapped (): print ( \"\u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002\" ) return func () print ( \"\u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002\" ) return wrapped print ( \"\u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002\" ) return my_decorator # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668 new_decorator = decorator_maker () # \u8f93\u51fa # \u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002 # \u63a5\u4e0b\u6765\u88c5\u9970\u4e00\u4e2a\u51fd\u6570 def decorated_function (): print ( \"\u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\" ) decorated_function = new_decorator ( decorated_function ) # \u8f93\u51fa: # \u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002 # \u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570: decorated_function () # \u8f93\u51fa: # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002 # \u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 \u8df3\u8fc7\u4e2d\u95f4\u53d8\u91cf\uff0c\u5b8c\u6210\u76f8\u540c\u7684\u4e8b\u60c5\u3002 def decorated_function (): print ( \"\u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\" ) decorated_function = decorator_maker ()( decorated_function ) # \u8f93\u51fa: # \u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002 # \u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002 # \u6700\u7ec8: decorated_function () # \u8f93\u51fa: # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002 # \u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 \u66f4\u7b80\u6d01\u4e00\u70b9 @decorator_maker () def decorated_function (): print ( \"I am the decorated function.\" ) # \u8f93\u51fa: # \u7531\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\uff0c\u6211\u53ea\u4f1a\u5728\u8c03\u7528\u6211\u6765\u521b\u5efa\u88c5\u9970\u5668\u65f6\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u88c5\u9970\u5668\u5236\u9020\u8005\uff0c\u6211\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\u3002 # \u6211\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bcf\u6b21\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u90fd\u4f1a\u8c03\u7528\u4e00\u6b21\u3002 # \u4f5c\u4e3a\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6211\u8fd4\u56de\u5305\u88c5\u51fd\u6570\u3002 # \u6700\u7ec8: decorated_function () # \u8f93\u51fa: # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\uff0c\u6211\u4e5f\u88ab\u8c03\u7528\u4e86\uff0c\u4f5c\u4e3a\u5305\u88c5\u51fd\u6570\uff0c\u6211\u8fd4\u56de\u88ab\u5305\u88c5\u51fd\u6570\u5bf9\u8c61\u3002 # \u6211\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 \u770b\u5230\u4e86\u5417\uff1f\u6211\u4eec\u4f7f\u7528\u201c @ \u201d\u8bed\u6cd5\u65f6\uff0c\u8fdb\u884c\u4e86\u51fd\u6570\u8c03\u7528\u3002 \u56de\u5230\u5982\u679c\u7ed9\u88c5\u9970\u5668\u4f20\u53c2\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u53bb\u751f\u6210\u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u8fd9\u4e2a\u51fd\u6570\u4f20\u53c2\uff0c\u4e0d\u662f\u5417\uff1f def decorator_maker_with_arguments ( decorator_arg1 , decorator_arg2 ): print ( \"\u6211\u521b\u5efa\u4e86\u88c5\u9970\u5668\uff0c\u6211\u63a5\u6536\u53c2\u6570: {0}, {1}\" . format ( decorator_arg1 , decorator_arg2 )) def my_decorator ( func ): # \u4e86\u89e3\u95ed\u5305 # \u53c2\u8003https://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python print ( \"\u6211\u662f\u88c5\u9970\u5668\uff0c\u7ed9\u6211\u4f20\u4e86\u53c2\u6570: {0}, {1}\" . format ( decorator_arg1 , decorator_arg2 )) # Don't confuse decorator arguments and function arguments! def wrapped ( function_arg1 , function_arg2 ) : print ( \"\u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u6211\u80fd\u8bbf\u95ee\u6240\u6709\u7684\u53d8\u91cf \\n \" \" \\t - \u6765\u81ea\u88c5\u9970\u5668\u7684: {0} {1} \\n \" \" \\t - \u6765\u81ea\u51fd\u6570\u8c03\u7528\u7684: {2} {3} \\n \" \"\u6211\u80fd\u628a\u5b83\u4eec\u88c5\u9012\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\" . format ( decorator_arg1 , decorator_arg2 , function_arg1 , function_arg2 )) return func ( function_arg1 , function_arg2 ) return wrapped return my_decorator @decorator_maker_with_arguments ( \"Leonard\" , \"Sheldon\" ) def decorated_function_with_arguments ( function_arg1 , function_arg2 ): print ( \"\u6211\u662f\u88ab\u5305\u88c5\u51fd\u6570\uff0c\u4ec5\u4ec5\u77e5\u9053\u81ea\u5df1\u7684\u53c2\u6570: {0}\" \" {1}\" . format ( function_arg1 , function_arg2 )) decorated_function_with_arguments ( \"Rajesh\" , \"Howard\" ) # \u8f93\u51fa: # \u6211\u521b\u5efa\u4e86\u88c5\u9970\u5668\uff0c\u6211\u63a5\u6536\u53c2\u6570:: Leonard, Sheldon # \u6211\u662f\u88c5\u9970\u5668\uff0c\u7ed9\u6211\u4f20\u4e86\u53c2\u6570: Leonard, Sheldon # \u6211\u662f\u5305\u88c5\u51fd\u6570\uff0c\u6211\u80fd\u8bbf\u95ee\u6240\u6709\u7684\u53d8\u91cf # - \u6765\u81ea\u88c5\u9970\u5668\u7684: Leonard Sheldon # - \u6765\u81ea\u51fd\u6570\u8c03\u7528\u7684: Rajesh Howard # \u6211\u80fd\u628a\u5b83\u4eec\u88c5\u9012\u7ed9\u88ab\u88c5\u9970\u51fd\u6570 # \u6211\u662f\u88ab\u5305\u88c5\u51fd\u6570\uff0c\u4ec5\u4ec5\u77e5\u9053\u81ea\u5df1\u7684\u53c2\u6570: Rajesh Howard \u8fd9\u5c31\u662f\u5305\u542b\u53c2\u6570\u7684\u88c5\u9970\u5668\uff0c\u53c2\u6570\u4e5f\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u53d8\u91cf\u3002 c1 = \"Penny\" c2 = \"Leslie\" @decorator_maker_with_arguments ( \"Leonard\" , c1 ) def decorated_function_with_arguments ( function_arg1 , function_arg2 ): print ( \"\u6211\u662f\u88ab\u5305\u88c5\u51fd\u6570\uff0c\u4ec5\u4ec5\u77e5\u9053\u81ea\u5df1\u7684\u53c2\u6570:\" \" {0} {1}\" . format ( function_arg1 , function_arg2 )) decorated_function_with_arguments ( c2 , \"Howard\" ) \u5982\u4f60\u6240\u89c1\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u4f60\u80fd\u4f20\u9012\u53c2\u6570\u7ed9\u88c5\u9970\u5668\u3002\u4f60\u751a\u81f3\u80fd\u4f7f\u7528 *args \uff0c **kwargs \uff0c\u4f46\u662f\u8bb0\u4f4f\uff0c\u88c5\u9970\u5668\u53ea\u88ab \u8c03\u7528\u4e00\u6b21 \uff0c\u4ec5\u4ec5\u5f53Python\u5bfc\u5165\u8fd9\u4e2a\u811a\u672c\u7684\u65f6\u5019\u3002\u4e4b\u540e\u4f60\u4e0d\u80fd\u52a8\u6001\u5730\u8bbe\u7f6e\u53c2\u6570\u3002\u5f53\u4f60\"import x\"\u65f6\uff0c \u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u88c5\u9970\u4e86 \uff0c\u56e0\u6b64\u4e0d\u80fd\u53d8\u4e86\u3002","title":"\u7ed9\u88c5\u9970\u5668\u4f20\u53c2\u6570"},{"location":"stackoverflow-python-top-qa/17/#_13","text":"\u65e0\u53c2\u88c5\u9970\u5668 def parent_decorator ( child_decorator ): \"\"\"\u8fd9\u4e2a\u51fd\u6570\u5c06\u88ab\u5f53\u4f5c\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u6765\u88c5\u9970\u53e6\u4e00\u4e2a\u88c5\u9970\u5668: child_decorator\u3002\"\"\" # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668\uff08\u88c5\u9970\u5668\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff09\u3002 def wrapper ( func ): print ( '\u6211\u662f\u7236\u88c5\u9970\u5668' ) # \u8fd4\u56de\u4f20\u5165\u88c5\u9970\u5668\u7684\u8fd0\u884c\u7ed3\u679c\uff08\u88c5\u9970\u5668\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff09 return child_decorator ( func ) return wrapper @parent_decorator def child_decorator ( func ): def wrapper ( args ): print ( '\u6211\u662f\u5b50\u88c5\u9970\u5668' ) func ( args ) return wrapper @child_decorator def print_hello ( name ): print ( '\u6211\u662f' , name ) print_hello ( '\u6781\u5ba2\u5154\u5154 https://geektutu.com' ) # \u8f93\u51fa\uff1a # \u6211\u662f\u7236\u88c5\u9970\u5668 # \u6211\u662f\u5b50\u88c5\u9970\u5668 # \u6211\u662f \u6781\u5ba2\u5154\u5154 https://geektutu.com \u63a5\u53d7\u4efb\u610f\u53c2\u6570\u7684\u88c5\u9970\u5668 \u63a5\u4e0b\u91cc\u5c06\u7ed9\u51fa\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\uff0c\u5141\u8bb8\u4f20\u5165\u4efb\u4f55\u53c2\u6570\u6765\u521b\u5efa\u88c5\u9970\u5668\u3002\u4e3a\u4e86\u63a5\u53d7\u51fd\u6570\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u521b\u5efa\u88c5\u9970\u5668\u3002 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u5305\u88c5\u8fd9\u4e2a\u88c5\u9970\u5668\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5305\u88c5\u51fd\u6570\u5c31\u6210\u4e3a\u4e86\u88c5\u9970\u4e86\u8fd9\u4e2a\u88c5\u9970\u5668\u7684\u65b0\u7684\u88c5\u9970\u5668\u3002 \u63a5\u4e0b\u6765\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u4f55\u88c5\u9970\u4e00\u4e2a\u88c5\u9970\u5668\u3002 def decorator_with_args ( decorator_to_enhance ): \"\"\"\u8fd9\u4e2a\u51fd\u6570\u5c06\u88ab\u5f53\u4f5c\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u6765\u88c5\u9970\u53e6\u4e00\u4e2a\u88c5\u9970\u5668\u3002\u5141\u8bb8\u63a5\u53d7\u4efb\u610f\u7684\u53c2\u6570\u3002\"\"\" # \u4f7f\u7528\u548c\u4e0a\u9762\u4f8b\u5b50\u76f8\u540c\u7684\u65b9\u6cd5\u6765\u4f20\u9012\u53c2\u6570\uff0c\u521b\u5efa\u88c5\u9970\u5668 def decorator_maker ( * args , ** kwargs ): # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668\uff08\u88c5\u9970\u5668\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff09\uff0c\u4f46\u662f\u4fdd\u7559\u4e86maker\u4f20\u5165\u7684\u53c2\u6570\u3002 def decorator_wrapper ( func ): # \u8fd4\u56de\u4f20\u5165\u88c5\u9970\u5668\u7684\u8fd0\u884c\u7ed3\u679c\uff08\u88c5\u9970\u5668\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff09 # \u4f20\u5165\u7684\u88c5\u9970\u5668\u7684\u58f0\u660e\u5fc5\u987b\u662f decorator(func, *args, **kwargs) return decorator_to_enhance ( func , * args , ** kwargs ) return decorator_wrapper return decorator_maker \u8fd9\u6837\u4f7f\u7528 # \u521b\u5efa\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u5e76\u7528 @decorator_with_args \u88c5\u9970\u5b83 # \u88c5\u9970\u5668\u7684\u58f0\u660e\u662f \"decorator(func, *args, **kwargs)\"\uff0c # \u9700\u4e0edecorator_with_args\u4e2d\u4fdd\u6301\u4e00\u81f4\u3002 @decorator_with_args def decorated_decorator ( func , * args , ** kwargs ): def wrapper ( function_arg1 , function_arg2 ): print ( \"Decorated with {0} {1}\" . format ( args , kwargs )) return func ( function_arg1 , function_arg2 ) return wrapper # \u88c5\u9970\u76ee\u6807\u51fd\u6570 @decorated_decorator ( 42 , 404 , 1024 ) def decorated_function ( function_arg1 , function_arg2 ): print ( \"Hello {0} {1}\" . format ( function_arg1 , function_arg2 )) decorated_function ( \"Universe and\" , \"everything\" ) # \u8f93\u51fa: # Decorated with (42, 404, 1024) {} # Hello Universe and everything","title":"\u88c5\u9970\u4e00\u4e2a\u88c5\u9970\u5668"},{"location":"stackoverflow-python-top-qa/17/#_14","text":"\u88c5\u9970\u5668\u5728Python2.4\u4e2d\u88ab\u5f15\u5165\uff0c\u88c5\u9970\u5668\u4f1a\u8ba9\u51fd\u6570\u8c03\u7528\u53d8\u6162\uff0c\u4f60\u9700\u8981\u77e5\u9053\u8fd9\u4e00\u70b9\u3002 \u4f60\u4e0d\u80fd\u591f\u53d6\u6d88\u5bf9\u4e00\u4e2a\u51fd\u6570\u7684\u88c5\u9970 \uff08\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u80fd\u88ab\u79fb\u9664\u7684\u88c5\u9970\u5668\uff0c\u4f46\u662f\u6ca1\u4eba\u4f7f\u7528\uff09\uff0c\u56e0\u6b64\uff0c\u4e00\u65e6\u4e00\u4e2a\u51fd\u6570\u88ab\u88c5\u9970\u4e86\uff0c\u90a3\u4e48\u6240\u6709\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u65b9\u90fd\u88ab\u88c5\u9970\u4e86\u3002 \u88c5\u9970\u5668\u5305\u88c5\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u8ba9\u8c03\u8bd5\u53d8\u5f97\u56f0\u96be\u3002\uff08\u5bf9\u4e8ePython >= 2.5\u7684\u7248\u672c\uff0c\u4f1a\u5bb9\u6613\u4e00\u4e9b\uff0c\u539f\u56e0\u5982\u4e0b\uff09\u3002 functools \u8fd9\u4e2a\u6a21\u5757\uff0c\u5728Python 2.5\u4e2d\u5f15\u5165\uff0c\u5305\u542b\u4e86 functools.wraps() \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c06\u4f1a\u628a\u88ab\u88c5\u9970\u51fd\u6570\u7684\u540d\u79f0\u3001\u6a21\u5757\u548cdocstring\u590d\u5236\u5230\u5b83\u7684\u88c5\u9970\u5668\u4e2d\u3002(\u4e8b\u5b9e\u4e0a\uff0c functools.wraps() \u4e5f\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u263a) # \u4e3a\u4e86\u8c03\u8bd5\uff0c\u5806\u6808\u5c06\u6253\u5370\u51fa\u51fd\u6570\u540d\u3002 def foo (): print ( \"foo\" ) print ( foo . __name__ ) # \u8f93\u51fa: foo # \u7528\u4e86\u88c5\u9970\u540e\uff0c\u53d8\u5f97\u590d\u6742\u4e86 def bar ( func ): def wrapper (): print ( \"bar\" ) return func () return wrapper @bar def foo (): print ( \"foo\" ) print ( foo . __name__ ) # \u8f93\u51fa: wrapper # \"functools\" \u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 import functools def bar ( func ): # \"wrapper\"\u5305\u88c5\u4e86\"func\" # \u795e\u5947\u7684\u4e8b\u60c5\u5728\u8fd9~ @functools.wraps ( func ) def wrapper (): print ( \"bar\" ) return func () return wrapper @bar def foo (): print ( \"foo\" ) print ( foo . __name__ ) # \u8f93\u51fa: foo","title":"\u88c5\u9970\u5668\u7684\u6700\u4f73\u5b9e\u8df5"},{"location":"stackoverflow-python-top-qa/17/#_15","text":"\u73b0\u5728\u6700\u5927\u7684\u95ee\u9898 \uff0c\u88c5\u9970\u5668\u7528\u6765\u505a\u4ec0\u4e48\uff1f \u770b\u8d77\u6765\u5f88\u9177\uff0c\u5f88\u5f3a\u5927\uff0c\u4f46\u662f\u5b9e\u7528\u624d\u662f\u738b\u9053\u3002\u5f53\u7136\uff0c\u8fd9\u6709\u65e0\u6570\u79cd\u53ef\u80fd\u6027\u3002\u7ecf\u5178\u7684\u7528\u6cd5\u662f\u7528\u6765\u6269\u5c55\u4e0d\u80fd\u4fee\u6539\u7684\u5916\u90e8\u5e93\u5bfc\u5165\u7684\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u6216\u8005\u4e3a\u4e86\u8c03\u8bd5\u3002 \u4f60\u53ef\u4ee5\u6269\u5c55\u597d\u51e0\u4e2a\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u50cf\u8fd9\u6837\uff1a def benchmark ( func ): \"\"\" \u6253\u5370\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u7684\u88c5\u9970\u5668 \"\"\" import time def wrapper ( * args , ** kwargs ): t = time . clock () res = func ( * args , ** kwargs ) print ( \"{0} {1}\" . format ( func . __name__ , time . clock () - t )) return res return wrapper def logging ( func ): \"\"\" \u6253\u5370\u811a\u672c\u6d3b\u52a8\u7684\u88c5\u9970\u5668 \"\"\" def wrapper ( * args , ** kwargs ): res = func ( * args , ** kwargs ) print ( \"{0} {1} {2}\" . format ( func . __name__ , args , kwargs )) return res return wrapper def counter ( func ): \"\"\" \u6253\u5370\u51fd\u6570\u88ab\u8c03\u7528\u6b21\u6570\u7684\u88c5\u9970\u5668 \"\"\" def wrapper ( * args , ** kwargs ): wrapper . count = wrapper . count + 1 res = func ( * args , ** kwargs ) print ( \"{0} has been used: {1}x\" . format ( func . __name__ , wrapper . count )) return res wrapper . count = 0 return wrapper @counter @benchmark @logging def reverse_string ( string ): return str ( reversed ( string )) print ( reverse_string ( \"Able was I ere I saw Elba\" )) print ( reverse_string ( \"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!\" )) # \u8f93\u51fa: # reverse_string ('Able was I ere I saw Elba',) {} # wrapper 0.0 # wrapper has been used: 1x # ablE was I ere I saw elbA # reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {} # wrapper 0.0 # wrapper has been used: 2x # !amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A \u5f53\u524d\uff0c\u88c5\u9970\u5668\u7684\u597d\u5904\u8fd8\u5728\u4e8e\u5982\u679c\u80fd\u591f\u6b63\u786e\u4f7f\u7528\uff0c\u53ef\u907f\u514d\u91cd\u590d\u4ee3\u7801\u3002 @counter @benchmark @logging def get_random_futurama_quote (): from urllib import urlopen result = urlopen ( \"http://subfusion.net/cgi-bin/quote.pl?quote=futurama\" ) . read () try : value = result . split ( \"<br><b><hr><br>\" )[ 1 ] . split ( \"<br><br><hr>\" )[ 0 ] return value . strip () except : return \"No, I'm ... doesn't!\" print ( get_random_futurama_quote ()) print ( get_random_futurama_quote ()) # outputs: # get_random_futurama_quote () {} # wrapper 0.02 # wrapper has been used: 1x # The laws of science be a harsh mistress. # get_random_futurama_quote () {} # wrapper 0.01 # wrapper has been used: 2x # Curse you, merciful Poseidon! Python \u5185\u7f6e\u4e86\u5f88\u591a\u88c5\u9970\u5668\uff1a property , staticmethod \uff0c\u7b49\u3002 Django\u4f7f\u7528\u88c5\u9970\u5668\u6765\u7ba1\u7406\u7f13\u5b58\uff0c\u89c6\u56fe\u6743\u9650\u3002 \u96c6\u6210\u5185\u90e8\u5f02\u6b65\u8c03\u7528\u3002 \u88c5\u9970\u5668\u7684\u4f7f\u7528\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\u3002","title":"\u88c5\u9970\u5668\u7528\u6765\u505a\u4ec0\u4e48\uff1f"},{"location":"stackoverflow-python-top-qa/18/","text":"18. \u7406\u89e3python\u7684\u5207\u7247\u7b26\u53f7 \u00b6 \u9898\u76ee \u00b6 \u6211\u9700\u8981\u5bf9Python\u7684\u5207\u7247\u7b26\u53f7\u8868\u793a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u91ca(\u6709\u5f15\u7528\u66f4\u4f73)\u3002 \u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u4e2a\u7b26\u53f7\u9700\u8981\u4e00\u70b9\u8865\u5145\u3002 \u5b83\u770b\u8d77\u6765\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u5b8c\u5168\u7406\u89e3\u5b83\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u5b83\u771f\u7684\u662f\u975e\u5e38\u7b80\u5355\u7684: a [ start : end ] # items start through end-1 a [ start :] # items start through the rest of the array a [: end ] # items from the beginning through end-1 a [:] # a copy of the whole array \u8fd8\u6709\u6b65\u957f( step )\u503c\uff0c\u53ef\u7528\u4e8e\u4e0a\u8ff0\u4efb\u4f55\u4e00\u9879: a [ start : end : step ] # start through not past end, by step \u9700\u8981\u8bb0\u4f4f\u7684\u5173\u952e\u662f :end \u503c\u8868\u793a\u5728\u9009\u5b9a\u7684\u7247\u4e2d\u7b2c\u4e00\u4e2a\u6ca1\u6709\u7684\u503c\u3002\u56e0\u6b64\uff0c end \u548c start \u4e4b\u95f4\u7684\u63d2\u503c\u8868\u793a\u6240\u9009\u5143\u7d20\u7684\u6570\u91cf(\u5982\u679c\u6b65\u957f\u4e3a1\uff0c\u8868\u793a\u9ed8\u8ba4)\u3002 \u53e6\u4e00\u4e2a\u7279\u6027\u662f start \u6216 end \u53ef\u80fd\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4ece\u6570\u7ec4\u7684\u672b\u5c3e\u800c\u4e0d\u662f\u5f00\u59cb\u8ba1\u6570\u3002\u6240\u4ee5: a [ - 1 ] # last item in the array a [ - 2 :] # last two items in the array a [: - 2 ] # everything except the last two items \u540c\u6837\uff0c\u6b65\u957f\u53ef\u80fd\u662f\u8d1f\u6570: a [:: - 1 ] # all items in the array, reversed a [ 1 :: - 1 ] # the first two items, reversed a [: - 3 : - 1 ] # the last two items, reversed a [ - 3 :: - 1 ] # everything except the last two items, reversed \u5982\u679c\u9879\u76ee\u6bd4\u4f60\u8981\u6c42\u7684\u8981\u5c11\uff0cPython\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u662f\u5f88\u597d\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u8981\u6c42 a[:-2] \u5e76\u4e14 a \u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u7a7a\u5217\u8868\u800c\u4e0d\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u6709\u65f6\u4f60\u66f4\u559c\u6b22\u9519\u8bef\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u610f\u8bc6\u5230\u8fd9\u53ef\u80fd\u53d1\u751f\u3002","title":"18.\u7406\u89e3python\u7684\u5207\u7247\u7b26\u53f7"},{"location":"stackoverflow-python-top-qa/18/#18-python","text":"","title":"18. \u7406\u89e3python\u7684\u5207\u7247\u7b26\u53f7"},{"location":"stackoverflow-python-top-qa/18/#_1","text":"\u6211\u9700\u8981\u5bf9Python\u7684\u5207\u7247\u7b26\u53f7\u8868\u793a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u91ca(\u6709\u5f15\u7528\u66f4\u4f73)\u3002 \u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u4e2a\u7b26\u53f7\u9700\u8981\u4e00\u70b9\u8865\u5145\u3002 \u5b83\u770b\u8d77\u6765\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u5b8c\u5168\u7406\u89e3\u5b83\u3002 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/18/#_2","text":"\u5b83\u771f\u7684\u662f\u975e\u5e38\u7b80\u5355\u7684: a [ start : end ] # items start through end-1 a [ start :] # items start through the rest of the array a [: end ] # items from the beginning through end-1 a [:] # a copy of the whole array \u8fd8\u6709\u6b65\u957f( step )\u503c\uff0c\u53ef\u7528\u4e8e\u4e0a\u8ff0\u4efb\u4f55\u4e00\u9879: a [ start : end : step ] # start through not past end, by step \u9700\u8981\u8bb0\u4f4f\u7684\u5173\u952e\u662f :end \u503c\u8868\u793a\u5728\u9009\u5b9a\u7684\u7247\u4e2d\u7b2c\u4e00\u4e2a\u6ca1\u6709\u7684\u503c\u3002\u56e0\u6b64\uff0c end \u548c start \u4e4b\u95f4\u7684\u63d2\u503c\u8868\u793a\u6240\u9009\u5143\u7d20\u7684\u6570\u91cf(\u5982\u679c\u6b65\u957f\u4e3a1\uff0c\u8868\u793a\u9ed8\u8ba4)\u3002 \u53e6\u4e00\u4e2a\u7279\u6027\u662f start \u6216 end \u53ef\u80fd\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4ece\u6570\u7ec4\u7684\u672b\u5c3e\u800c\u4e0d\u662f\u5f00\u59cb\u8ba1\u6570\u3002\u6240\u4ee5: a [ - 1 ] # last item in the array a [ - 2 :] # last two items in the array a [: - 2 ] # everything except the last two items \u540c\u6837\uff0c\u6b65\u957f\u53ef\u80fd\u662f\u8d1f\u6570: a [:: - 1 ] # all items in the array, reversed a [ 1 :: - 1 ] # the first two items, reversed a [: - 3 : - 1 ] # the last two items, reversed a [ - 3 :: - 1 ] # everything except the last two items, reversed \u5982\u679c\u9879\u76ee\u6bd4\u4f60\u8981\u6c42\u7684\u8981\u5c11\uff0cPython\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u662f\u5f88\u597d\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u8981\u6c42 a[:-2] \u5e76\u4e14 a \u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u7a7a\u5217\u8868\u800c\u4e0d\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u6709\u65f6\u4f60\u66f4\u559c\u6b22\u9519\u8bef\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u610f\u8bc6\u5230\u8fd9\u53ef\u80fd\u53d1\u751f\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/19/","text":"19. Python\u4e2d\u5982\u4f55\u5728\u5217\u8868\u4e2d\u627e\u5230\u67d0\u4e2a\u5143\u7d20\u7684\u4e0b\u6807 \u00b6 \u9898\u76ee \u00b6 \u5bf9\u4e8e\u5217\u8868 [\"foo\", \"bar\", \"baz\"] \u548c\u5728\u5217\u8868\u4e2d\u7684\u5143\u7d20 \"bar\" \uff0c\u5982\u4f55\u5f97\u5230\u5b83\u7684\u4e0b\u6807\uff081\uff09 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 >>> [ \"foo\" , \"bar\" , \"baz\" ] . index ( \"bar\" ) 1 \u53c2\u8003: Data Structures > More on Lists \u6ce8\u610f\u4e8b\u9879 \u00b6 \u6ce8\u610f\u867d\u7136\u8fd9\u53ef\u80fd\u662f\u5bf9\u6240\u95ee\u95ee\u9898\u6700\u7b80\u5355\u7684\u56de\u7b54\u65b9\u6cd5\uff0c index \u5728 list \u4e2d\u652f\u6301\u5f88\u5f31\uff0c\u4ee5\u4e0b\u662f list.index \u7684\u6ce8\u610f\u4e8b\u9879\uff0c\u4e00\u5f00\u59cb\u770b\u4e0b\u5b83\u7684\u6587\u6863\uff1a >>> print ( list . index . __doc__ ) L . index ( value , [ start , [ stop ]]) -> integer -- return first index of value . Raises ValueError if the value is not present . \u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u4e00\u4e2a index \u5c06\u4f1a\u6309\u987a\u5e8f\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u627e\u5230\u76f8\u5339\u914d\u7684\u3002\u5982\u679c\u5217\u8868\u5f88\u957f\uff0c\u800c\u4e14\u4f60\u4e0d\u77e5\u9053\u5927\u81f4\u4f1a\u51fa\u73b0\u5728\u5217\u8868\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u79cd\u641c\u7d22\u65b9\u5f0f\u53ef\u80fd\u6210\u4e3a\u74f6\u9888\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u53e6\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u6ce8\u610f\u5982\u679c\u4f60\u5927\u81f4\u76f4\u5230\u54ea\u4e2a\u4f4d\u7f6e\u80fd\u627e\u5230\u5339\u914d\u503c\uff0c\u4f60\u53ef\u4ee5\u7ed9 index \u4e00\u4e2a\u63d0\u793a\u3002\u4f8b\u5982\uff0c l.index(999_999, 999_990, 1_000_000) \u6bd4\u76f4\u63a5\u4f7f\u7528 l.index(999_999) \u5927\u7ea6\u5feb5\u4e2a\u6570\u91cf\u7ea7\uff0c\u56e0\u4e3a\u524d\u8005\u53ea\u9700\u8981\u641c\u7d2210\u4e2a\u5143\u7d20\uff0c\u540e\u8005\u5c06\u641c\u7d22100w\u4e2a\u3002 >>> import timeit >>> timeit . timeit ( 'l.index(999_999)' , setup = 'l = list(range(0, 1_000_000))' , number = 1000 ) 9.356267921015387 >>> timeit . timeit ( 'l.index(999_999, 999_990, 1_000_000)' , setup = 'l = list(range(0, 1_000_000))' , number = 1000 ) 0.0004404920036904514 \u4ec5\u4ec5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u503c\u7684\u7d22\u5f15 \u00b6 \u8c03\u7528 index \u65f6\uff0c\u641c\u7d22\u6574\u4e2a\u5217\u8868\uff0c\u5f53\u627e\u5230\u4e00\u4e2a\u5339\u914d\u503c\u5c31\u4f1a\u505c\u4e0b\u6765\u3002\u5982\u679c\u4f60\u671f\u671b\u591a\u4e2a\u5339\u914d\u7684\u4e0b\u6807\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u63a8\u5bfc\u5f0f\u6216\u8005\u751f\u6210\u5668\u3002 >>> [ 1 , 1 ] . index ( 1 ) 0 >>> [ i for i , e in enumerate ([ 1 , 2 , 1 ]) if e == 1 ] [ 0 , 2 ] >>> g = ( i for i , e in enumerate ([ 1 , 2 , 1 ]) if e == 1 ) >>> next ( g ) 0 >>> next ( g ) 2 \u5927\u90e8\u5206\u6211\u60f3\u4f7f\u7528 index \u7684\u5730\u65b9\uff0c\u73b0\u5728\u6539\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6216\u751f\u6210\u5668\uff0c\u56e0\u4e3a\u540e\u8005\u66f4\u901a\u7528\u3002\u56e0\u6b64\u5f53\u4f60\u9700\u8981\u627e\u5230 index \u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u8fd9\u4e9b\u975e\u5e38\u68d2\u7684Python\u8bed\u8a00\u7279\u6027\u3002 \u5143\u7d20\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 \u00b6 \u5f53\u5143\u7d20\u4e0d\u5b58\u5728\u65f6\uff0c\u8c03\u7528 index \u5c06\u5bfc\u81f4 ValueError \u5f02\u5e38\u3002 >>> [ 1 , 1 ] . index ( 2 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : 2 is not in list \u5982\u679c\u5143\u7d20\u53ef\u80fd\u4e0d\u5728\u5217\u8868\u4e2d\uff0c\u4f60\u5e94\u8be5 \u9996\u5148\u4f7f\u7528 item in my_list \uff08\u7b80\u5355\uff0c\u53ef\u8bfb\uff09\u68c0\u67e5\uff0c\u6216\u8005 \u4f7f\u7528 try/except \u5305\u88c5 index \u7684\u8c03\u7528\uff0c\u6355\u83b7 ValueError \u5f02\u5e38\uff08\u53ef\u80fd\u66f4\u5feb\uff0c\u81f3\u5c11\u8981\u641c\u7d22\u7684\u5217\u8868\u5f88\u957f\u800c\u4e14\u5143\u7d20\u7ecf\u5e38\u662f\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u662f\u8fd9\u6837\uff09\u3002","title":"19.Python\u4e2d\u5982\u4f55\u5728\u5217\u8868\u4e2d\u627e\u5230\u67d0\u4e2a\u5143\u7d20\u7684\u4e0b\u6807"},{"location":"stackoverflow-python-top-qa/19/#19-python","text":"","title":"19. Python\u4e2d\u5982\u4f55\u5728\u5217\u8868\u4e2d\u627e\u5230\u67d0\u4e2a\u5143\u7d20\u7684\u4e0b\u6807"},{"location":"stackoverflow-python-top-qa/19/#_1","text":"\u5bf9\u4e8e\u5217\u8868 [\"foo\", \"bar\", \"baz\"] \u548c\u5728\u5217\u8868\u4e2d\u7684\u5143\u7d20 \"bar\" \uff0c\u5982\u4f55\u5f97\u5230\u5b83\u7684\u4e0b\u6807\uff081\uff09 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/19/#_2","text":">>> [ \"foo\" , \"bar\" , \"baz\" ] . index ( \"bar\" ) 1 \u53c2\u8003: Data Structures > More on Lists","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/19/#_3","text":"\u6ce8\u610f\u867d\u7136\u8fd9\u53ef\u80fd\u662f\u5bf9\u6240\u95ee\u95ee\u9898\u6700\u7b80\u5355\u7684\u56de\u7b54\u65b9\u6cd5\uff0c index \u5728 list \u4e2d\u652f\u6301\u5f88\u5f31\uff0c\u4ee5\u4e0b\u662f list.index \u7684\u6ce8\u610f\u4e8b\u9879\uff0c\u4e00\u5f00\u59cb\u770b\u4e0b\u5b83\u7684\u6587\u6863\uff1a >>> print ( list . index . __doc__ ) L . index ( value , [ start , [ stop ]]) -> integer -- return first index of value . Raises ValueError if the value is not present .","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"stackoverflow-python-top-qa/19/#_4","text":"\u4e00\u4e2a index \u5c06\u4f1a\u6309\u987a\u5e8f\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u627e\u5230\u76f8\u5339\u914d\u7684\u3002\u5982\u679c\u5217\u8868\u5f88\u957f\uff0c\u800c\u4e14\u4f60\u4e0d\u77e5\u9053\u5927\u81f4\u4f1a\u51fa\u73b0\u5728\u5217\u8868\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u79cd\u641c\u7d22\u65b9\u5f0f\u53ef\u80fd\u6210\u4e3a\u74f6\u9888\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u53e6\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u6ce8\u610f\u5982\u679c\u4f60\u5927\u81f4\u76f4\u5230\u54ea\u4e2a\u4f4d\u7f6e\u80fd\u627e\u5230\u5339\u914d\u503c\uff0c\u4f60\u53ef\u4ee5\u7ed9 index \u4e00\u4e2a\u63d0\u793a\u3002\u4f8b\u5982\uff0c l.index(999_999, 999_990, 1_000_000) \u6bd4\u76f4\u63a5\u4f7f\u7528 l.index(999_999) \u5927\u7ea6\u5feb5\u4e2a\u6570\u91cf\u7ea7\uff0c\u56e0\u4e3a\u524d\u8005\u53ea\u9700\u8981\u641c\u7d2210\u4e2a\u5143\u7d20\uff0c\u540e\u8005\u5c06\u641c\u7d22100w\u4e2a\u3002 >>> import timeit >>> timeit . timeit ( 'l.index(999_999)' , setup = 'l = list(range(0, 1_000_000))' , number = 1000 ) 9.356267921015387 >>> timeit . timeit ( 'l.index(999_999, 999_990, 1_000_000)' , setup = 'l = list(range(0, 1_000_000))' , number = 1000 ) 0.0004404920036904514","title":"\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"stackoverflow-python-top-qa/19/#_5","text":"\u8c03\u7528 index \u65f6\uff0c\u641c\u7d22\u6574\u4e2a\u5217\u8868\uff0c\u5f53\u627e\u5230\u4e00\u4e2a\u5339\u914d\u503c\u5c31\u4f1a\u505c\u4e0b\u6765\u3002\u5982\u679c\u4f60\u671f\u671b\u591a\u4e2a\u5339\u914d\u7684\u4e0b\u6807\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u63a8\u5bfc\u5f0f\u6216\u8005\u751f\u6210\u5668\u3002 >>> [ 1 , 1 ] . index ( 1 ) 0 >>> [ i for i , e in enumerate ([ 1 , 2 , 1 ]) if e == 1 ] [ 0 , 2 ] >>> g = ( i for i , e in enumerate ([ 1 , 2 , 1 ]) if e == 1 ) >>> next ( g ) 0 >>> next ( g ) 2 \u5927\u90e8\u5206\u6211\u60f3\u4f7f\u7528 index \u7684\u5730\u65b9\uff0c\u73b0\u5728\u6539\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6216\u751f\u6210\u5668\uff0c\u56e0\u4e3a\u540e\u8005\u66f4\u901a\u7528\u3002\u56e0\u6b64\u5f53\u4f60\u9700\u8981\u627e\u5230 index \u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u8fd9\u4e9b\u975e\u5e38\u68d2\u7684Python\u8bed\u8a00\u7279\u6027\u3002","title":"\u4ec5\u4ec5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u503c\u7684\u7d22\u5f15"},{"location":"stackoverflow-python-top-qa/19/#_6","text":"\u5f53\u5143\u7d20\u4e0d\u5b58\u5728\u65f6\uff0c\u8c03\u7528 index \u5c06\u5bfc\u81f4 ValueError \u5f02\u5e38\u3002 >>> [ 1 , 1 ] . index ( 2 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ValueError : 2 is not in list \u5982\u679c\u5143\u7d20\u53ef\u80fd\u4e0d\u5728\u5217\u8868\u4e2d\uff0c\u4f60\u5e94\u8be5 \u9996\u5148\u4f7f\u7528 item in my_list \uff08\u7b80\u5355\uff0c\u53ef\u8bfb\uff09\u68c0\u67e5\uff0c\u6216\u8005 \u4f7f\u7528 try/except \u5305\u88c5 index \u7684\u8c03\u7528\uff0c\u6355\u83b7 ValueError \u5f02\u5e38\uff08\u53ef\u80fd\u66f4\u5feb\uff0c\u81f3\u5c11\u8981\u641c\u7d22\u7684\u5217\u8868\u5f88\u957f\u800c\u4e14\u5143\u7d20\u7ecf\u5e38\u662f\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u662f\u8fd9\u6837\uff09\u3002","title":"\u5143\u7d20\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38"},{"location":"stackoverflow-python-top-qa/2/","text":"2. \u4ec0\u4e48\u662f\u5143\u7c7b\uff08metaclass\uff09 \u00b6 \u9898\u76ee \u00b6 \u4ec0\u4e48\u662f\u5143\u7c7b\uff0c\u6211\u4eec\u7528\u5b83\u6765\u5e72\u4ec0\u4e48\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 1\uff09\u7c7b\u4f5c\u4e3a\u5bf9\u8c61 \u00b6 \u5728\u7406\u89e3\u5143\u7c7b\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u638c\u63e1Python\u4e2d\u7684\u7c7b(class)\u3002\u5bf9\u4e8e\u7c7b\u662f\u4ec0\u4e48\uff0cPython\u6709\u72ec\u7279\u7684\u770b\u6cd5\uff0c\u8fd9\u501f\u9274\u4e8eSmalktalk\u3002 \u5728\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\uff0c\u7c7b\u4ec5\u4ec5\u662f\u63cf\u8ff0\u5982\u4f55\u53bb\u4ea7\u751f\u4e00\u4e2a\u5bf9\u8c61\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5728Python\u4e2d\u4e5f\u4e00\u6837\u3002 >>> class ObjectCreator ( object ): ... pass ... >>> my_object = ObjectCreator () >>> print ( my_object ) < __main__ . ObjectCreator object at 0x8974f2c > \u4f46\u662f\u7c7b\u5728Python\u4e2d\u4e0d\u4ec5\u4ec5\u662f\u8fd9\u6837\uff0c\u7c7b\u4e5f\u662f\u5bf9\u8c61\u3002 \u5f53\u4f60\u4f7f\u7528\u5173\u952e\u5b57 class \u65f6\uff0cPython\u6267\u884c\u5b83\u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\u3002\u8fd9\u4e2a\u8bed\u53e5 >>> class ObjectCreator ( object ): ... pass ... \u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a\u201cObjectCreator\u201d\u7684\u5bf9\u8c61\u3002 \u8fd9\u4e2a\u5bf9\u8c61\uff08\u8fd9\u4e2a\u7c7b\uff09\u672c\u8eab\u662f\u80fd\u591f\u521b\u5efa\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u7684\uff0c\u8fd9\u4e5f\u662f\u79f0\u4e4b\u4e3a\u7c7b\u7684\u539f\u56e0\u3002 \u4f46\u662f\uff0c\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\uff1a \u4f60\u53ef\u4ee5\u628a\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff1b \u4f60\u80fd\u590d\u5236\u5b83\uff1b \u4f60\u80fd\u7ed9\u5b83\u6dfb\u52a0\u5c5e\u6027\uff1b \u4f60\u80fd\u5c06\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3002 \u4f8b\u5982\uff1a >>> print ( ObjectCreator ) # you can print a class because it's an object < class ' __main__ . ObjectCreator '> >>> def echo ( o ): ... print ( o ) ... >>> echo ( ObjectCreator ) # you can pass a class as a parameter < class ' __main__ . ObjectCreator '> >>> print ( hasattr ( ObjectCreator , 'new_attribute' )) False >>> ObjectCreator . new_attribute = 'foo' # you can add attributes to a class >>> print ( hasattr ( ObjectCreator , 'new_attribute' )) True >>> print ( ObjectCreator . new_attribute ) foo >>> ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable >>> print ( ObjectCreatorMirror . new_attribute ) foo >>> print ( ObjectCreatorMirror ()) < __main__ . ObjectCreator object at 0x8997b4c > 2\uff09\u52a8\u6001\u5730\u521b\u5efa\u7c7b \u00b6 \u56e0\u4e3a\u7c7b\u662f\u5bf9\u8c61\uff0c\u4f60\u80fd\u52a8\u6001\u5730\u521b\u5efa\u5b83\u4eec\uff0c\u5c31\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u3002 \u9996\u5148\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528 class \u521b\u5efa\u4e00\u4e2a\u7c7b\u3002 >>> def choose_class ( name ): ... if name == 'foo' : ... class Foo ( object ): ... pass ... return Foo # return the class, not an instance ... else : ... class Bar ( object ): ... pass ... return Bar ... >>> MyClass = choose_class ( 'foo' ) >>> print ( MyClass ) # the function returns a class, not an instance < class ' __main__ . Foo '> >>> print ( MyClass ()) # you can create an object from this class < __main__ . Foo object at 0x89c6d4c > \u4f46\u662f\u8fd9\u4e0d\u591f\u52a8\u6001\uff0c\u56e0\u4e3a\u4f60\u4ecd\u7136\u9700\u8981\u53bb\u5b8c\u6574\u5730\u5b9a\u4e49\u8fd9\u4e2a\u7c7b\u3002 \u56e0\u4e3a\u7c7b\u662f\u5bf9\u8c61\uff0c\u5b83\u4eec\u80af\u5b9a\u80fd\u7528\u5176\u4ed6\u65b9\u5f0f\u751f\u6210\u3002 \u5f53\u4f60\u4f7f\u7528 class \u8fd9\u4e2a\u5173\u952e\u5b57\u65f6\uff0cPython\u81ea\u52a8\u521b\u5efa\u4e86\u8fd9\u4e2a\u5bf9\u8c61\u3002\u4f46\u662f\u6b63\u5982\u5728Python\u4e2d\u505a\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u4e00\u6837\uff0cPython\u540c\u6837\u63d0\u4f9b\u4e86\u624b\u52a8\u89e6\u53d1\u7684\u65b9\u5f0f\u3002 \u8fd8\u8bb0\u5f97\u51fd\u6570 type \u5417\uff1f\u4e00\u4e2a\u53e4\u8001\u800c\u53c8\u6709\u7528\u7684\u51fd\u6570\uff0c\u80fd\u591f\u8ba9\u4f60\u77e5\u9053\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\u3002 >>> print ( type ( 1 )) < type 'int' > >>> print ( type ( \"1\" )) < type 'str' > >>> print ( type ( ObjectCreator )) < type 'type' > >>> print ( type ( ObjectCreator ())) < class ' __main__ . ObjectCreator '> type \u8fd8\u6709\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u5b83\u4e5f\u52a8\u6001\u5730\u521b\u5efa\u5bf9\u8c61\u3002 type \u80fd\u591f\u63a5\u53d7\u4e00\u4e2a\u7c7b\u7684\u63cf\u8ff0\u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u7c7b\u3002 type \u53ef\u4ee5\u8fd9\u6837\u7528\uff1a type ( name of the class , tuple of the parent class ( for inheritance , can be empty ), dictionary containing attributes names and values ) \u4f8b\u5982\uff1a >>> class MyShinyClass ( object ): ... pass \u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u624b\u52a8\u521b\u5efa\u3002 >>> MyShinyClass = type ( 'MyShinyClass' , (), {}) # returns a class object >>> print ( MyShinyClass ) < class ' __main__ . MyShinyClass '> >>> print ( MyShinyClass ()) # create an instance with the class < __main__ . MyShinyClass object at 0x8997cec > \u4f60\u5c06\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u4f7f\u7528\u201dMyShinyClass\u201c\u4f5c\u4e3a\u8fd9\u4e2a\u7c7b\u7684\u540d\u79f0\uff0c\u540c\u6837\u4f5c\u4e3a\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u5e76\u5c06\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u5b83\u3002\u5b83\u4eec\u53ef\u80fd\u6709\u70b9\u533a\u522b\uff0c\u4f46\u662f\u6ca1\u5fc5\u8981\u628a\u4e8b\u60c5\u641e\u590d\u6742\u3002 type \u63a5\u53d7\u4e00\u4e2a\u5b57\u5178\u53bb\u5b9a\u4e49\u7c7b\u7684\u5c5e\u6027\uff0c\u56e0\u6b64\uff1a >>> class Foo ( object ): ... bar = True \u80fd\u8fd9\u6837\u8868\u8fbe >>> Foo = type ( 'Foo' , (), { 'bar' : True }) \u800c\u4e14\u88ab\u7528\u6765\u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\u3002 >>> print ( Foo ) < class ' __main__ . Foo '> >>> print ( Foo . bar ) True >>> f = Foo () >>> print ( f ) < __main__ . Foo object at 0x8a9b84c > >>> print ( f . bar ) True \u5f53\u7136\uff0c\u4f60\u4e5f\u80fd\u7ee7\u627f\u5b83\uff0c\u56e0\u6b64\uff1a >>> class FooChild ( Foo ): ... pass \u7b49\u4ef7\u4e8e >>> FooChild = type ( 'FooChild' , ( Foo ,), {}) >>> print ( FooChild ) < class ' __main__ . FooChild '> >>> print ( FooChild . bar ) # bar is inherited from Foo True \u6700\u7ec8\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u7ed9\u8fd9\u4e2a\u7c7b\u6dfb\u52a0\u4e00\u4e9b\u65b9\u6cd5\u3002\u4ec5\u9700\u8981\u5b9a\u4e49\u597d\u51fd\u6570\uff0c\u5e76\u5c06\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5c5e\u6027\u5373\u53ef\u3002 >>> def echo_bar ( self ): ... print ( self . bar ) ... >>> FooChild = type ( 'FooChild' , ( Foo ,), { 'echo_bar' : echo_bar }) >>> hasattr ( Foo , 'echo_bar' ) False >>> hasattr ( FooChild , 'echo_bar' ) True >>> my_foo = FooChild () >>> my_foo . echo_bar () True \u800c\u4e14\uff0c\u751a\u81f3\u5728\u7c7b\u52a8\u6001\u521b\u5efa\u4e4b\u540e\uff0c\u4f60\u4e5f\u80fd\u6dfb\u52a0\u66f4\u591a\u7684\u65b9\u6cd5\uff0c\u5c31\u50cf\u7ed9\u4e00\u4e2a\u666e\u901a\u521b\u5efa\u7684\u7c7b\u5bf9\u8c61\u6dfb\u52a0\u65b9\u6cd5\u4e00\u6837\u3002 >>> def echo_bar_more ( self ): ... print ( 'yet another method' ) ... >>> FooChild . echo_bar_more = echo_bar_more >>> hasattr ( FooChild , 'echo_bar_more' ) True \u5982\u4f60\u6240\u89c1\uff1a\u5728Python\u4e2d\uff0c\u7c7b\u4e5f\u662f\u5bf9\u8c61\uff0c\u800c\u4e14\u4f60\u80fd\u52a8\u6001\u5730\u521b\u5efa\u4e00\u4e2a\u7c7b\u3002 \u8fd9\u5c31\u662f\u5f53\u4f60\u4f7f\u7528 class \u8fd9\u4e2a\u5173\u952e\u5b57\u65f6Python\u6240\u505a\u7684\uff0cPython\u4f7f\u7528\u5143\u7c7b\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002 3\uff09\u4ec0\u4e48\u662f\u5143\u7c7b \u00b6 \u5143\u7c7b\u5c31\u662f\u6211\u4eec\u521b\u5efa\u5bf9\u8c61\u7684\u4e1c\u4e1c\u3002 \u4f60\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u662f\u4e3a\u4e86\u521b\u5efa\u5bf9\u8c61\uff0c\u5bf9\u5417\uff1f \u4f46\u662f\u521a\u624d\u6211\u4eec\u4e86\u89e3\u5230\u4e86Python\u7c7b\u4e5f\u662f\u5bf9\u8c61\u3002 \u5143\u7c7b\u662f\u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4e1c\u4e1c\u3002\u4ed6\u4eec\u662f\u7c7b\u7684\u7c7b\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u53bb\u63cf\u8ff0\u5b83\u3002 MyClass = MetaClass () my_object = MyClass () \u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86 type \u80fd\u8ba9\u4f60\u50cf\u8fd9\u6837\u505a\u3002 MyClass = type ( 'MyClass' , (), {}) \u8fd9\u662f\u56e0\u4e3a type \u8fd9\u4e2a\u51fd\u6570\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u5143\u7c7b\u3002 type \u662fPython\u5728\u80cc\u540e\u7528\u6765\u521b\u5efa\u6240\u6709\u7c7b\u7684\u5143\u7c7b\u3002 \u73b0\u5728\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\uff0c\u4e3a\u4ec0\u4e48type\u9996\u5b57\u6bcd\u8981\u5c0f\u5199\uff0c\u800c\u4e0d\u662f\u5199\u6210 Type \u6211\u731c\uff0c\u8fd9\u4e0e\u8bed\u8a00\u4e00\u81f4\u6027\u6709\u5173\uff0c\u4f8b\u5982 str \u662f\u521b\u5efa\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u7c7b\uff0c int \u662f\u521b\u5efa\u6574\u6570\u5bf9\u8c61d\u7684\u7c7b\uff0c type \u5c31\u662f\u7528\u6765\u521b\u5efa\u7c7b\u5bf9\u8c61\u7684\u7c7b\u3002 \u4f60\u53ef\u4ee5\u68c0\u67e5 __class__ \u5c5e\u6027\u770b\u5230\u3002 \u5728Python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\u3002\u5305\u62ec\u6574\u6570\u3001\u5b57\u7b26\u4e32\u3001\u51fd\u6570\u548c\u7c7b\u3002\u5b83\u4eec\u90fd\u662f\u5bf9\u8c61\uff0c\u800c\u4e14\u5b83\u4eec\u90fd\u662f\u7531\u7c7b\u4ea7\u751f\u7684\u3002 >>> age = 35 >>> age . __class__ < type 'int' > >>> name = 'bob' >>> name . __class__ < type 'str' > >>> def foo (): pass >>> foo . __class__ < type 'function' > >>> class Bar ( object ): pass >>> b = Bar () >>> b . __class__ < class ' __main__ . Bar '> \u73b0\u5728\uff0c\u5982\u4f55 __class__ \u7684 __class__ \u662f\u4ec0\u4e48\u5462\uff1f >>> age . __class__ . __class__ < type 'type' > >>> name . __class__ . __class__ < type 'type' > >>> foo . __class__ . __class__ < type 'type' > >>> b . __class__ . __class__ < type 'type' > \u56e0\u6b64\uff0c\u5143\u7c7b\u5c31\u662f\u521b\u5efa\u7c7b\u5bf9\u8c61\u7684\u4e1c\u4e1c\u3002 \u5982\u679c\u4f60\u613f\u610f\uff0c\u53ef\u4ee5\u79f0\u5b83\u4e3a\"\u7c7b\u5de5\u5382\"\u3002 type \u662fPython\u4f7f\u7528\u7684\u5185\u7f6e\u7684\u5143\u7c7b\uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u80fd\u521b\u5efa\u81ea\u5df1\u7684\u5143\u7c7b\u3002 4\uff09 __metaclass__ \u5c5e\u6027 \u00b6 \u5f53\u4f60\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a __metaclass__ \u5c5e\u6027\u3002 class Foo ( object ): __metaclass__ = something ... [ ... ] \u5982\u679c\u4f60\u8fd9\u6837\u505a\u7684\u8bdd\uff0cPython\u5c06\u4f7f\u7528\u8fd9\u4e2a\u5143\u7c7b\u53bb\u521b\u5efa\u7c7b Foo \u5c0f\u5fc3\uff0c\u8fd9\u6709\u9677\u9631\u3002 \u4f60\u9996\u5148\u5199\u4e86 class Foo(object) \uff0c\u4f46\u662f\u8fd9\u4e2a\u7c7b\u5bf9\u8c61 Foo \u5728\u5185\u5b58\u4e2d\u5e76\u6ca1\u6709\u88ab\u521b\u5efa\u3002 Python\u5c06\u5728\u7c7b\u5b9a\u4e49\u4e2d\u5bfb\u627e __metaclass__ \u5982\u679cPython\u53d1\u73b0\u4e86\u5b83\uff0cPython\u5c06\u4f7f\u7528\u5b83\u53bb\u521b\u5efa\u7c7b\u5bf9\u8c61 Foo \uff0c\u5982\u679c\u6ca1\u6709\uff0cPython\u5c06\u4f7f\u7528 type \u53bb\u521b\u5efa\u8fd9\u4e2a\u7c7b\u3002 \u91cd\u6e29\u51e0\u6b21\u3002 \u5f53\u4f60\u5b9a\u4e49\uff1a class Foo ( Bar ): pass Python\u5c06\u505a\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5728 Foo \u4e2d\u6709 __metaclass__ \u5c5e\u6027\u5417\uff1f \u5982\u679c\u6709\uff0c\u5c31\u4f7f\u7528 __mataclass__ \u4e2d\u5b9a\u4e49\u7684\u4e1c\u4e1c\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u7c7b\u5bf9\u8c61\uff0c\u7c7b\u540d\u4e3a Foo \u3002 \u5982\u679cPython\u6ca1\u6709\u627e\u5230 __metaclass__ \u5c5e\u6027\uff0c\u5b83\u5c06\u5728MODULE\u5c42\u5bfb\u627e\u4e00\u4e2a __metaclass__ \uff0c\u53bb\u505a\u76f8\u540c\u7684\u4e8b\u60c5\uff08\u5bf9\u4e8e\u7c7b\uff0c\u4e0d\u7ee7\u627f\u4efb\u4f55\u4e1c\u897f\uff0c\u57fa\u7840\u7684\u8001\u5f0f\u7c7b\uff09\u3002 \u7136\u540e\u5982\u679cPython\u4e0d\u80fd\u627e\u5230\u4efb\u4f55\u7684 __metaclass__ \uff0c\u5b83\u5c06\u4f7f\u7528 Bar \uff08\u7b2c\u4e00\u4e2a\u7236\u7c7b\uff09\u81ea\u5df1\u7684\u5143\u7c7b\uff08\u53ef\u80fd\u662f type \uff09\u53bb\u521b\u5efa\u7c7b\u5bf9\u8c61\u3002 \u8fd9\u91cc\u5c0f\u5fc3 __metaclass__ \u5c5e\u6027\u5c06\u4e0d\u4f1a\u88ab\u7ee7\u627f\uff0c\u7236\u7c7b\u7684\u5143\u7c7b\uff08 Bar.__class__ \uff09\u4f1a\u88ab\u7ee7\u627f\u3002\u5982\u679c Bar \u4f7f\u7528\u4e86\u4e00\u4e2a\u7528 type \uff08\u4e0d\u662f type.__new__() \uff09\u521b\u5efa Bar \u7684 __metaclass__ \u5c5e\u6027\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u7c7b\u5c06\u4f1a\u7ee7\u627f\u8fd9\u4e2a\u884c\u4e3a\u3002 \u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u4f60\u80fd\u5728 __metaclass__ \u4e2d\u5b9a\u4e49\u4ec0\u4e48\uff1f \u7b54\u6848\u5c31\u662f\uff0c\u80fd\u591f\u521b\u5efa\u7c7b\u7684\u4e1c\u4e1c\u3002 \u4ec0\u4e48\u80fd\u521b\u5efa\u7c7b\u5462\uff1f type \uff0c\u6216\u8005\u5b83\u7684\u5b50\u7c7b\uff0c\u6216\u8005\u7528\u4e86\u5b83\u7684\u4efb\u4f55\u4e1c\u897f\u3002 5\uff09\u81ea\u5b9a\u4e49\u5143\u7c7b \u00b6 \u5143\u7c7b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u521b\u5efa\u65f6\u81ea\u52a8\u5730\u6539\u53d8\u7c7b\u3002 \u7ecf\u5e38\u4e3a\u4e86API\u8fd9\u4e48\u505a\uff0cAPI\u4e2d\u9700\u8981\u521b\u5efa\u7c7b\u53bb\u5339\u914d\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u3002 \u60f3\u8c61\u4e00\u4e2a\u975e\u5e38\u8822\u7684\u4f8b\u5b50\uff0c\u4f60\u51b3\u5b9a\u4f60\u7684\u6a21\u5757\u4e2d\u7684\u6240\u6709\u7c7b\u5b83\u4eec\u7684\u5c5e\u6027\u5e94\u8be5\u5927\u5199\u3002\u6709\u597d\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4ef6\u4e8b\uff0c\u5176\u4e2d\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u5728\u6a21\u5757\u5c42\u8bbe\u7f6e __metaclass__ \u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6a21\u5757\u5185\u6240\u6709\u7684\u7c7b\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u5143\u7c7b\u521b\u5efa\uff0c\u800c\u4e14\u6211\u4eec\u5fc5\u987b\u544a\u8bc9\u5143\u7c7b\u8981\u5c06\u6240\u6709\u7684\u5c5e\u6027\u8f6c\u4e3a\u5927\u5199\u3002 \u5e78\u8fd0\u7684\u662f\uff0c __metaclass__ \u786e\u5b9e\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5b83\u4e0d\u9700\u8981\u662f\u4e00\u4e2a\u6b63\u5f0f\u7684\u7c7b\uff08\u5728\u540d\u5b57\u4e2d\u5e26\u6709\u7c7b\uff0c\u4f46\u662f\u4e0d\u5fc5\u8981\u662f\u4e00\u4e2a\u7c7b\uff0c\u533a\u5206\u4e00\u4e0b\uff0c\u4f46\u662f\u8fd9\u5f88\u6709\u7528\uff09\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u5199\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 # coding=utf-8 # \u9002\u7528\u4e8epython2 # \u5143\u7c7b\u5c06\u81ea\u52a8\u83b7\u53d6\u5230\u76f8\u540c\u7684\u4f60\u7ecf\u5e38\u4f20\u7ed9`type`\u7684\u53c2\u6570\u3002 # \u5373\u53c2\u6570\u5217\u8868\u4e0e`type`\u7684\u4e00\u81f4\u3002 def upper_attr ( future_class_name , future_class_parents , future_class_attr ): \"\"\" \u5c06\u5c5e\u6027\u540d\u8f6c\u4e3a\u5927\u5199\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u3002 \"\"\" # \u7b5b\u9009\u51fa\u6240\u6709\u4e0d\u4ee5__\u5f00\u5934\u7684\u5c5e\u6027\uff0c\u8f6c\u4e3a\u5927\u5199\u3002 uppercase_attr = {} for name , val in future_class_attr . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val # \u4f7f\u7528type\u521b\u5efa\u7c7b return type ( future_class_name , future_class_parents , uppercase_attr ) __metaclass__ = upper_attr # \u8fd9\u5c06\u5f71\u54cd\u8fd9\u4e2a\u6a21\u5757\u5185\u7684\u6240\u6709\u7c7b\u3002 class Foo (): # \u867d\u7136\u5168\u5c40\u7684 __metaclass__ \u5bf9 \u201cobject\u201d\u65e0\u6548 # \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b9a\u4e49 __metaclass__ \u800c\u4e0d\u662f\u4ec5\u4ec5\u5f71\u54cd\u8fd9\u4e2a\u7c7b\u3002 # \u8fd9\u5c06\u5f71\u54cd\u201cobject\u201d\u7684children bar = 'bip' print ( hasattr ( Foo , 'bar' )) # Out: False print ( hasattr ( Foo , 'BAR' )) # Out: True f = Foo () print ( f . BAR ) # Out: 'bip' \u73b0\u5728\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u771f\u5b9e\u7684\u7c7b\u4f5c\u4e3a\u5143\u7c7b\u53bb\u505a\u76f8\u540c\u7684\u4e8b\u60c5\u3002 # coding=utf-8 # \u8bb0\u4f4f`type`\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e`str`\u548c`int`\u7684\u7c7b # \u6240\u4ee5\u4f60\u80fd\u7ee7\u627f\u5b83 class UpperAttrMetaclass ( type ): # __new__ \u65b9\u6cd5\u5728 __init__ \u524d\u6267\u884c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u521b\u5efa\u5bf9\u8c61\u5e76\u8fd4\u56de\u3002 # __init__\u65b9\u6cd5\u4ec5\u4ec5\u521d\u59cb\u5316\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u7684\u5bf9\u8c61\u3002 # \u4f60\u5f88\u5c11\u4f7f\u7528__new__\u65b9\u6cd5\uff0c\u9664\u975e\u4f60\u60f3\u63a7\u5236\u7c7b\u662f\u5982\u4f55\u521b\u5efa\u7684\u3002 # \u8fd9\u91cc\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u7c7b\uff0c\u6211\u4eec\u60f3\u81ea\u5b9a\u4e49\u5b83\uff0c\u56e0\u6b64\u9700\u8981\u8986\u76d6 __new__\u3002 # \u4f60\u4e5f\u80fd\u5728__init__\u4e2d\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u5982\u679c\u613f\u610f\u7684\u8bdd\u3002 # \u4e00\u4e9b\u9ad8\u7ea7\u7528\u6cd5\u8fd8\u5305\u62ec\u8986\u76d6__call__\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u4f7f\u7528\u3002 def __new__ ( upperattr_metaclass , future_class_name , future_class_parents , future_class_attr ): uppercase_attr = {} for name , val in future_class_attr . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val return type ( future_class_name , future_class_parents , uppercase_attr ) \u4e8b\u5b9e\u4e0a\u8fd9\u5e76\u4e0dOOP\uff0c\u6211\u4eec\u76f4\u63a5\u8c03\u7528\u4e86 type \u51fd\u6570\uff0c\u6ca1\u6709\u8986\u76d6\u6216\u8005\u662f\u8c03\u7528\u7236\u7c7b\u7684 __new__ \uff0c\u6539\u4e00\u4e0b\uff1a # coding=utf-8 class UpperAttrMetaclass ( type ): def __new__ ( upperattr_metaclass , future_class_name , future_class_parents , future_class_attr ): uppercase_attr = {} for name , val in future_class_attr . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val # \u91cd\u7528\u4e86type.__new__\u65b9\u6cd5\uff0c\u8fd9\u79cd\u5199\u6cd5\u662fOOP\u7684 return type . __new__ ( upperattr_metaclass , future_class_name , future_class_parents , uppercase_attr ) \u4f60\u53ef\u80fd\u6ce8\u610f\u5230\u989d\u5916\u7684\u53c2\u6570 upperattr_metaclass \uff0c\u8fd9\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff1a __new__ \u65b9\u6cd5\u603b\u662f\u63a5\u53d7\u5b9a\u4e49\u7684\u7c7b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u50cf\u666e\u901a\u65b9\u6cd5\u63a5\u53d7\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 self \uff0c\u7c7b\u65b9\u6cd5\u4f20\u5165\u5b9a\u4e49\u7c7b\u4e00\u6837\u3002 \u5f53\u7136\uff0c\u4e3a\u4e86\u53ef\u8bfb\u6027\uff0c\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u540d\u5b57\u592a\u957f\u4e86\u3002\u4f46\u662f\u5c31\u5982 self \u4e00\u6837\uff0c\u6240\u6709\u7684\u53c2\u6570\u90fd\u6709\u7ea6\u5b9a\u4fd7\u6210\u7684\u540d\u5b57\uff0c\u56e0\u6b64\u4e00\u4e2a\u771f\u5b9e\u7684\u6b63\u5f0f\u7684metaclass\u5e94\u8be5\u50cf\u8fd9\u6837\u5199\uff1a class UpperAttrMetaclass ( type ): def __new__ ( cls , clsname , bases , dct ): uppercase_attr = {} for name , val in dct . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val return type . __new__ ( cls , clsname , bases , uppercase_attr ) \u6211\u4eec\u4f7f\u7528 super \u8ba9\u4ee3\u7801\u770b\u4e0a\u53bb\u66f4\u6e05\u6670\u4e00\u4e9b\uff0c class UpperAttrMetaclass ( type ): def __new__ ( cls , clsname , bases , dct ): uppercase_attr = {} for name , val in dct . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val return super ( UpperAttrMetaclass , cls ) . __new__ ( cls , clsname , bases , uppercase_attr ) \u4ee5\u4e0a\u5c31\u662f\u5168\u90e8\u4e86\uff0c\u5173\u4e8e\u5143\u7c7b\u5df2\u7ecf\u6ca1\u6709\u4ec0\u4e48\u5185\u5bb9\u4e86\u3002 \u4f7f\u7528\u5143\u7c7b\u7684\u4ee3\u7801\u590d\u6742\u7684\u539f\u56e0\u5e76\u4e0d\u5728\u4e8e\u5143\u7c7b\u672c\u8eab\uff0c\u800c\u662f\u56e0\u4e3a\u4f60\u7ecf\u5e38\u4f7f\u7528\u5143\u7c7b\u53bb\u505a\u4e00\u4e9b\u626d\u66f2\u7684\u4e8b\u60c5\uff0c\u64cd\u7eb5\u7ee7\u627f\uff0c\u904d\u5386\u5c5e\u6027\uff08vars\uff09\u4f8b\u5982 __dict__ \u7b49\u7b49\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5143\u7c7b\u5728\u505a\u4e00\u4e9b\u9ed1\u79d1\u6280\u65f6\u975e\u5e38\u6709\u7528\uff0c\u56e0\u6b64\u5f80\u5f80\u662f\u4e00\u4e9b\u590d\u6742\u7684\u4e1c\u897f\u3002\u4f46\u662f\u5c31\u5143\u7c7b\u672c\u8eab\u800c\u8a00\uff0c\u662f\u7b80\u5355\u7684\u3002 \u62e6\u622a\u7c7b\u7684\u521b\u5efa\u3002 \u4fee\u6539\u7c7b\u3002 \u8fd4\u56de\u4fee\u6539\u540e\u7684\u7c7b\u3002 6\uff09\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5143\u7c7b\u65f6\u7528\u7c7b\u800c\u4e0d\u7528\u51fd\u6570\uff1f \u00b6 \u56e0\u4e3a __metaclass__ \u80fd\u591f\u63a5\u53d7\u4efb\u4f55\u53ef\u8c03\u7528\u7684\u4e1c\u897f\uff0c\u4e3a\u4ec0\u4e48\u8981\u53bb\u4f7f\u7528\u660e\u663e\u66f4\u4e3a\u590d\u6742\u7684\u7c7b\u5462\uff1f \u8fd9\u4e48\u505a\u6709\u51e0\u4e2a\u539f\u56e0\uff1a \u76ee\u7684\u66f4\u660e\u786e\uff0c\u5f53\u4f60\u9605\u8bfb UpperAttrMetaclass(type) \uff0c\u4f60\u77e5\u9053\u63a5\u4e0b\u6765\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u66f4OOP\u3002\u5143\u7c7b\u80fd\u591f\u7ee7\u627f\u5143\u7c7b\uff0c\u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5\u3002\u5143\u7c7b\u751a\u81f3\u80fd\u4f7f\u7528\u5143\u7c7b\u3002 \u4e00\u4e2a\u7c7b\u7684\u5b50\u7c7b\u53ef\u4ee5\u662f\u5b83\u7684\u5143\u7c7b\u7684\u5b9e\u4f8b\u5982\u679c\u4f60\u6307\u5b9a\u4e86\u4e00\u4e2a\u5143\u7c7b\u7c7b\uff08metaclass-class\uff09\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5143\u7c7b\u51fd\u6570\uff08metaclass-function\uff09\u3002 \u80fd\u66f4\u597d\u5730\u7ec4\u7ec7\u4ee3\u7801\u3002\u4f60\u4ece\u6765\u6ca1\u6709\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50\u8fd9\u6837\u8bd5\u9a8c\u6027\u5730\u4f7f\u7528\u5143\u7c7b\u3002\u5143\u7c7b\u7ecf\u5e38\u7528\u4e8e\u4e00\u4e9b\u590d\u6742\u573a\u666f\u3002\u4e3a\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u5c06\u597d\u51e0\u4e2a\u65b9\u6cd5\u7ec4\u7ec7\u5728\u4e00\u4e2a\u7c7b\u4e2d\u7684\u80fd\u529b\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u4f60\u80fd\u8986\u76d6 __new__ \uff0c __init__ \u548c __call__ \uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5141\u8bb8\u4f60\u505a\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u5373\u65f6\u5373\u7ecf\u5e38\u53ea\u9700\u8981\u4fee\u6539 __new__ \uff0c\u4e00\u4e9b\u4eba\u89c9\u5f97\u4f7f\u7528 __init__ \u66f4\u8212\u670d\u3002 \u5b83\u4eec\u88ab\u79f0\u4e3a\u5143\u7c7b\uff0c\u5b9e\u9645\u5c31\u5e94\u8be5\u548c\u5b83\u7684\u540d\u79f0\u4e00\u81f4\u3002 7\uff09\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5143\u7c7b \u00b6 \u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u8fd9\u4e48\u6666\u6da9\u7684\u5bb9\u6613\u51fa\u9519\u7684\u7279\u6027\uff1f \u901a\u5e38\u4e0d\u8981\u7528\uff1a \u5143\u7c7b\u662f\u6df1\u9b54\u6cd5\uff0c99%\u7684\u7528\u6237\u90fd\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5982\u679c\u4f60\u5728\u60f3\u662f\u5426\u9700\u8981\u5b83\u4eec\uff0c\u5c31\u4e0d\u8981\u7528\uff08\u9700\u8981\u5143\u7c7b\u7684\u4eba\u786e\u5207\u5730\u77e5\u9053\u9700\u8981\u5b83\uff0c\u65e0\u9700\u89e3\u91ca\uff09\u3002 Python Guru Tim Peters \u5143\u7c7b\u4e3b\u8981\u7684\u4f7f\u7528\u573a\u666f\u662f\u521b\u5efaAPI\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662fDjango\u7684ORM\u3002 \u5b83\u5141\u8bb8\u4f60\u53bb\u8fd9\u6837\u5b9a\u4e49\uff1a class Person ( models . Model ): name = models . CharField ( max_length = 30 ) age = models . IntegerField () \u4f46\u662f\u5982\u679c\u4f60\u8fd9\u6837\u505a\uff1a guy = Person ( name = 'bob' , age = '35' ) print ( guy . age ) \u5b83\u5c06\u4e0d\u4f1a\u8fd4\u56de\u4e00\u4e2a IntegerFiled \u5bf9\u8c61\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a int \uff0c\u800c\u4e14\u751a\u81f3\u76f4\u63a5\u4f20\u7ed9\u6570\u636e\u5e93\u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a models.Model \u5b9a\u4e49\u4e86 __metaclass__ \u800c\u4e14\u8fdb\u884c\u4e86\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u5c06\u4f60\u521a\u521a\u7b80\u5355\u51e0\u53e5\u8bdd\u5b9a\u4e49\u7684 Person \u8f6c\u53d8\u4e3a\u6570\u636e\u5e93\u5b57\u6bb5\u7684\u590d\u6742\u94a9\u5b50\u3002 Django\u901a\u8fc7\u4f7f\u7528\u5143\u7c7b\u66b4\u9732\u7b80\u5355\u7684API\uff0c\u8ba9\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u60c5\u770b\u4e0a\u53bb\u7b80\u5355\uff0c\u901a\u8fc7\u8fd9\u4e9bAPI\u80cc\u540e\u91cd\u65b0\u521b\u5efa\u4ee3\u7801\u53bb\u505a\u771f\u5b9e\u7684\u4e8b\u60c5\u3002 8\uff09\u6700\u540e\u4e00\u70b9 \u00b6 \u9996\u5148\uff0c\u4f60\u77e5\u9053\u7c7b\u662f\u80fd\u591f\u521b\u5efa\u5b9e\u4f8b\u7684\u5bf9\u8c61\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u7c7b\u672c\u8eab\u5c31\u662f\u5bf9\u8c61\uff0c\u5143\u7c7b\u4e5f\u662f\u3002 >>> class Foo ( object ): pass >>> id ( Foo ) 142630324 Python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u800c\u4e14\u4ed6\u4eec\u4e5f\u662f\u7c7b\u7684\u5b9e\u4f8b\u6216\u7c7b\u7684\u5b9e\u4f8b\u3002 \u9664\u4e86 type type \u786e\u5b9e\u662f\u81ea\u5df1\u7684\u5143\u7c7b\uff0c\u8fd9\u53ea\u7528Python\u662f\u4ea7\u751f\u4e0d\u4e86\u7684\uff0c\u8fd9\u662f\u5728\u5b9e\u73b0\u5c42\u9762\u505a\u7684\u3002 \u7b2c\u4e8c\uff0c\u5143\u7c7b\u662f\u590d\u6742\u7684\u3002\u4f60\u53ef\u80fd\u60f3\u53bb\u4f7f\u7528\u4ed6\u4eec\u53bb\u505a\u7b80\u5355\u7684\u7c7b\u4fee\u6539\u3002\u4f60\u80fd\u4f7f\u75282\u79cd\u5176\u4ed6\u7684\u6280\u672f\u53bb\u505a\u8fd9\u4ef6\u4e8b\u3002 \u7334\u5b50\u8865\u4e01\uff08monkey patching\uff09 \u7c7b\u88c5\u9970\u5668\uff08class decorators\uff09 \u7c7b\u4fee\u653999%\u7684\u573a\u666f\u9002\u5408\u4ee5\u4e0a\u65b9\u5f0f\u3002 \u4f46\u662f98%\u7684\u573a\u666f\uff0c\u6839\u672c\u4e0d\u9700\u8981\u53bb\u4fee\u6539\u7c7b\u3002 9\uff09Python3\u8865\u5145 \u00b6 Python3\u548cPython2\u4e2d\u5143\u7c7b\u4f7f\u7528\u6709\u533a\u522b\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u5143\u7c7b\u5b9e\u73b0\u8ffd\u8e2a\u7c7b\u5b9a\u4e49\u987a\u5e8f\u7684\u4f8b\u5b50\u3002 class MyMeta ( type ): counter = 0 def __init__ ( cls , name , bases , dic ): type . __init__ ( cls , name , bases , dic ) cls . _order = MyMeta . counter MyMeta . counter += 1 class MyType ( object ): # Python 2 __metaclass__ = MyMeta class MyType ( metaclass = MyMeta ): # Python 3 pass Python3\u4e2d\u5143\u7c7b\u67092\u4e2a\u5173\u952e\u7684\u65b9\u6cd5\u3002 __prepare__ __new__ __prepare__ \u8ba9\u4f60\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5b57\u5178\uff08\u4f8b\u5982 OrderedDict \uff09\u4f5c\u4e3a\u5143\u7c7b\u521b\u5efa\u65f6\u7684\u547d\u540d\u7a7a\u95f4\u3002\u65e0\u8bba\u9009\u62e9\u4ec0\u4e48\u547d\u540d\u7a7a\u95f4\uff0c\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5982\u679c\u6ca1\u6709\u5b9e\u73b0 __prepare__ \uff0c\u5c06\u4f1a\u4f7f\u7528\u4e00\u4e2a\u666e\u901a\u7684 dict \u3002 class Meta ( type ): def __prepare__ ( metaclass , cls , bases ): return dict () def __new__ ( metacls , cls , bases , clsdict ): return super () . __new__ ( metacls , cls , bases , clsdict ) \u56de\u7b54\u4e8c \u00b6 \u5143\u7c7b\u662f\u7c7b\u7684\u7c7b\u3002\u5c31\u50cf\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u7684\u884c\u4e3a\uff0c\u4e00\u4e2a\u5143\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u7684\u884c\u4e3a\u3002\u7c7b\u662f\u5143\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5728Python\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u53ef\u8c03\u7528\u7684\u5143\u7c7b(\u5982 Jerub \u7684\u56de\u7b54)\uff0c\u66f4\u6709\u7528\u7684\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u4f7f\u5b83\u672c\u8eab\u6210\u4e3a\u4e00\u4e2a\u5b9e\u9645\u7684\u7c7b\u3002\u7c7b\u578b\uff08 type \uff09\u662fPython\u4e2d\u5e38\u7528\u7684\u5143\u7c7b\u3002\u6b63\u5982\u4f60\u6240\u60f3\u7684\u90a3\u6837\uff0c type \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7c7b\uff0c\u5b83\u662f\u5b83\u81ea\u5df1\u7684\u7c7b\u578b\u3002\u4f60\u5c06\u65e0\u9700\u5728Python\u4e2d\u91cd\u65b0\u521b\u5efa\u7c7b\u4f3c\u4e8e type \u7684\u4e1c\u897f\uff0c\u4f46\u662fPython\u6709\u4e00\u70b9\u6709\u4e00\u5b9a\u7684\u6b3a\u9a97\u6027\u3002\u8981\u5728Python\u4e2d\u521b\u5efa\u81ea\u5df1\u7684\u5143\u7c7b\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5b50\u7c7b\u5316 type \u3002 \u5143\u7c7b\u901a\u5e38\u7528\u4f5c\u7c7b\u5de5\u5382\u3002\u5c31\u50cf\u4f60\u901a\u8fc7\u8c03\u7528\u7c7b\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u4e00\u6837\uff0cPython\u901a\u8fc7\u8c03\u7528\u5143\u7c7b\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b(\u5f53\u5b83\u6267\u884c\u201c\u7c7b\u201d\u8bed\u53e5\u65f6)\u3002\u4e0e\u5e38\u7528\u7684 __init__ \u548c __new__ \u65b9\u6cd5\u76f8\u7ed3\u5408\uff0c\u5143\u7c7b\u5141\u8bb8\u4f60\u5728\u521b\u5efa\u7c7b\u65f6\u505a\u201c\u989d\u5916\u7684\u4e8b\u60c5\u201d\uff0c\u6bd4\u5982\u6ce8\u518c\u65b0\u7684\u7c7b\u548c\u4e00\u4e9b\u6ce8\u518c\u8868\uff0c\u751a\u81f3\u5b8c\u5168\u66ff\u6362\u7c7b\u3002 \u5728\u6267\u884c class \u8bed\u53e5\u65f6\uff0cPython\u9996\u5148\u5c06 class \u8bed\u53e5\u7684\u4e3b\u4f53\u4f5c\u4e3a\u6b63\u5e38\u7684\u4ee3\u7801\u5757\u6267\u884c\u3002\u7531\u6b64\u4ea7\u751f\u7684\u547d\u540d\u7a7a\u95f4(\u4e00\u4e2a\u547d\u4ee4)\u5305\u542b\u5c06\u5448\u73b0\u7684\u7c7b\u7684\u5c5e\u6027\u3002\u5143\u7c7b\u662f\u901a\u8fc7\u67e5\u770b\u5c06\u5448\u73b0\u7684\u7c7b\u7684\u57fa\u7c7b(\u5143\u7c7b\u7ee7\u627f\u7684)\uff0c\u5728\u5176 __metaclass__ \u5c5e\u6027(\u5982\u679c\u6709)\u6216 __metaclass__ \u5168\u5c40\u53d8\u91cf\u6765\u786e\u5b9a\u7684\u3002\u7136\u540e\u4f7f\u7528\u7c7b\u7684\u540d\u79f0\u3001\u57fa\u7840\u548c\u5c5e\u6027\u8c03\u7528\u5143\u7c7b\u6765\u5b9e\u4f8b\u5316\u5b83\u3002 \u7136\u800c\uff0c\u5143\u7c7b\u5b9e\u9645\u4e0a\u5b9a\u4e49\u4e86\u7c7b\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b83\u7684\u5de5\u5382\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4e0e\u5b83\u4eec\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u5143\u7c7b\u4e0a\u5b9a\u4e49\u5e38\u89c4\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5143\u7c7b\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u7c7b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u5728\u6ca1\u6709\u5b9e\u4f8b\u7684\u7c7b\u4e0a\u8c03\u7528\u5b83\u4eec\uff0c\u4f46\u662f\u5b83\u4eec\u4e5f\u4e0d\u50cf\u7c7b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u80fd\u5728\u7c7b\u7684\u5b9e\u4f8b\u4e0a\u8c03\u7528\u5b83\u4eec\u3002 __subclasses__ ()\u662f\u5728 type \u5143\u7c7b\u4e0a\u7684\u4e00\u4e2a\u65b9\u6cd5\u7684\u4f8b\u5b50\u3002\u4f60\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u666e\u901a\u7684\u201c\u9b54\u672f\u201d\u65b9\u6cd5\uff0c\u4f8b\u5982 __add__ \u3001 __iter__ \u548c __getattr__ \uff0c\u4ee5\u5b9e\u73b0\u6216\u66f4\u6539\u7c7b\u7684\u884c\u4e3a\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u96f6\u788e\u7684\u4f8b\u5b50: def make_hook ( f ): \"\"\"Decorator to turn 'foo' method into '__foo__'\"\"\" f . is_hook = 1 return f class MyType ( type ): def __new__ ( mcls , name , bases , attrs ): if name . startswith ( 'None' ): return None # Go over attributes and see if they should be renamed. newattrs = {} for attrname , attrvalue in attrs . iteritems (): if getattr ( attrvalue , 'is_hook' , 0 ): newattrs [ '__ %s __' % attrname ] = attrvalue else : newattrs [ attrname ] = attrvalue return super ( MyType , mcls ) . __new__ ( mcls , name , bases , newattrs ) def __init__ ( self , name , bases , attrs ): super ( MyType , self ) . __init__ ( name , bases , attrs ) # classregistry.register(self, self.interfaces) print \"Would register class %s now.\" % self def __add__ ( self , other ): class AutoClass ( self , other ): pass return AutoClass # Alternatively, to autogenerate the classname as well as the class: # return type(self.__name__ + other.__name__, (self, other), {}) def unregister ( self ): # classregistry.unregister(self) print \"Would unregister class %s now.\" % self class MyObject : __metaclass__ = MyType class NoneSample ( MyObject ): pass # Will print \"NoneType None\" print type ( NoneSample ), repr ( NoneSample ) class Example ( MyObject ): def __init__ ( self , value ): self . value = value @make_hook def add ( self , other ): return self . __class__ ( self . value + other . value ) # Will unregister the class Example . unregister () inst = Example ( 10 ) # Will fail with an AttributeError #inst.unregister() print inst + inst class Sibling ( MyObject ): pass ExampleSibling = Example + Sibling # ExampleSibling is now a subclass of both Example and Sibling (with no # content of its own) although it will believe it's called 'AutoClass' print ExampleSibling print ExampleSibling . __mro__","title":"2.\u4ec0\u4e48\u662f\u5143\u7c7b\uff08metaclass\uff09"},{"location":"stackoverflow-python-top-qa/2/#2-metaclass","text":"","title":"2. \u4ec0\u4e48\u662f\u5143\u7c7b\uff08metaclass\uff09"},{"location":"stackoverflow-python-top-qa/2/#_1","text":"\u4ec0\u4e48\u662f\u5143\u7c7b\uff0c\u6211\u4eec\u7528\u5b83\u6765\u5e72\u4ec0\u4e48\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/2/#_2","text":"","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/2/#1","text":"\u5728\u7406\u89e3\u5143\u7c7b\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u638c\u63e1Python\u4e2d\u7684\u7c7b(class)\u3002\u5bf9\u4e8e\u7c7b\u662f\u4ec0\u4e48\uff0cPython\u6709\u72ec\u7279\u7684\u770b\u6cd5\uff0c\u8fd9\u501f\u9274\u4e8eSmalktalk\u3002 \u5728\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\uff0c\u7c7b\u4ec5\u4ec5\u662f\u63cf\u8ff0\u5982\u4f55\u53bb\u4ea7\u751f\u4e00\u4e2a\u5bf9\u8c61\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5728Python\u4e2d\u4e5f\u4e00\u6837\u3002 >>> class ObjectCreator ( object ): ... pass ... >>> my_object = ObjectCreator () >>> print ( my_object ) < __main__ . ObjectCreator object at 0x8974f2c > \u4f46\u662f\u7c7b\u5728Python\u4e2d\u4e0d\u4ec5\u4ec5\u662f\u8fd9\u6837\uff0c\u7c7b\u4e5f\u662f\u5bf9\u8c61\u3002 \u5f53\u4f60\u4f7f\u7528\u5173\u952e\u5b57 class \u65f6\uff0cPython\u6267\u884c\u5b83\u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\u3002\u8fd9\u4e2a\u8bed\u53e5 >>> class ObjectCreator ( object ): ... pass ... \u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a\u201cObjectCreator\u201d\u7684\u5bf9\u8c61\u3002 \u8fd9\u4e2a\u5bf9\u8c61\uff08\u8fd9\u4e2a\u7c7b\uff09\u672c\u8eab\u662f\u80fd\u591f\u521b\u5efa\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\u7684\uff0c\u8fd9\u4e5f\u662f\u79f0\u4e4b\u4e3a\u7c7b\u7684\u539f\u56e0\u3002 \u4f46\u662f\uff0c\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\uff1a \u4f60\u53ef\u4ee5\u628a\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff1b \u4f60\u80fd\u590d\u5236\u5b83\uff1b \u4f60\u80fd\u7ed9\u5b83\u6dfb\u52a0\u5c5e\u6027\uff1b \u4f60\u80fd\u5c06\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3002 \u4f8b\u5982\uff1a >>> print ( ObjectCreator ) # you can print a class because it's an object < class ' __main__ . ObjectCreator '> >>> def echo ( o ): ... print ( o ) ... >>> echo ( ObjectCreator ) # you can pass a class as a parameter < class ' __main__ . ObjectCreator '> >>> print ( hasattr ( ObjectCreator , 'new_attribute' )) False >>> ObjectCreator . new_attribute = 'foo' # you can add attributes to a class >>> print ( hasattr ( ObjectCreator , 'new_attribute' )) True >>> print ( ObjectCreator . new_attribute ) foo >>> ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable >>> print ( ObjectCreatorMirror . new_attribute ) foo >>> print ( ObjectCreatorMirror ()) < __main__ . ObjectCreator object at 0x8997b4c >","title":"1\uff09\u7c7b\u4f5c\u4e3a\u5bf9\u8c61"},{"location":"stackoverflow-python-top-qa/2/#2","text":"\u56e0\u4e3a\u7c7b\u662f\u5bf9\u8c61\uff0c\u4f60\u80fd\u52a8\u6001\u5730\u521b\u5efa\u5b83\u4eec\uff0c\u5c31\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u3002 \u9996\u5148\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528 class \u521b\u5efa\u4e00\u4e2a\u7c7b\u3002 >>> def choose_class ( name ): ... if name == 'foo' : ... class Foo ( object ): ... pass ... return Foo # return the class, not an instance ... else : ... class Bar ( object ): ... pass ... return Bar ... >>> MyClass = choose_class ( 'foo' ) >>> print ( MyClass ) # the function returns a class, not an instance < class ' __main__ . Foo '> >>> print ( MyClass ()) # you can create an object from this class < __main__ . Foo object at 0x89c6d4c > \u4f46\u662f\u8fd9\u4e0d\u591f\u52a8\u6001\uff0c\u56e0\u4e3a\u4f60\u4ecd\u7136\u9700\u8981\u53bb\u5b8c\u6574\u5730\u5b9a\u4e49\u8fd9\u4e2a\u7c7b\u3002 \u56e0\u4e3a\u7c7b\u662f\u5bf9\u8c61\uff0c\u5b83\u4eec\u80af\u5b9a\u80fd\u7528\u5176\u4ed6\u65b9\u5f0f\u751f\u6210\u3002 \u5f53\u4f60\u4f7f\u7528 class \u8fd9\u4e2a\u5173\u952e\u5b57\u65f6\uff0cPython\u81ea\u52a8\u521b\u5efa\u4e86\u8fd9\u4e2a\u5bf9\u8c61\u3002\u4f46\u662f\u6b63\u5982\u5728Python\u4e2d\u505a\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u4e00\u6837\uff0cPython\u540c\u6837\u63d0\u4f9b\u4e86\u624b\u52a8\u89e6\u53d1\u7684\u65b9\u5f0f\u3002 \u8fd8\u8bb0\u5f97\u51fd\u6570 type \u5417\uff1f\u4e00\u4e2a\u53e4\u8001\u800c\u53c8\u6709\u7528\u7684\u51fd\u6570\uff0c\u80fd\u591f\u8ba9\u4f60\u77e5\u9053\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\u3002 >>> print ( type ( 1 )) < type 'int' > >>> print ( type ( \"1\" )) < type 'str' > >>> print ( type ( ObjectCreator )) < type 'type' > >>> print ( type ( ObjectCreator ())) < class ' __main__ . ObjectCreator '> type \u8fd8\u6709\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u5b83\u4e5f\u52a8\u6001\u5730\u521b\u5efa\u5bf9\u8c61\u3002 type \u80fd\u591f\u63a5\u53d7\u4e00\u4e2a\u7c7b\u7684\u63cf\u8ff0\u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u7c7b\u3002 type \u53ef\u4ee5\u8fd9\u6837\u7528\uff1a type ( name of the class , tuple of the parent class ( for inheritance , can be empty ), dictionary containing attributes names and values ) \u4f8b\u5982\uff1a >>> class MyShinyClass ( object ): ... pass \u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u624b\u52a8\u521b\u5efa\u3002 >>> MyShinyClass = type ( 'MyShinyClass' , (), {}) # returns a class object >>> print ( MyShinyClass ) < class ' __main__ . MyShinyClass '> >>> print ( MyShinyClass ()) # create an instance with the class < __main__ . MyShinyClass object at 0x8997cec > \u4f60\u5c06\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u4f7f\u7528\u201dMyShinyClass\u201c\u4f5c\u4e3a\u8fd9\u4e2a\u7c7b\u7684\u540d\u79f0\uff0c\u540c\u6837\u4f5c\u4e3a\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u5e76\u5c06\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u5b83\u3002\u5b83\u4eec\u53ef\u80fd\u6709\u70b9\u533a\u522b\uff0c\u4f46\u662f\u6ca1\u5fc5\u8981\u628a\u4e8b\u60c5\u641e\u590d\u6742\u3002 type \u63a5\u53d7\u4e00\u4e2a\u5b57\u5178\u53bb\u5b9a\u4e49\u7c7b\u7684\u5c5e\u6027\uff0c\u56e0\u6b64\uff1a >>> class Foo ( object ): ... bar = True \u80fd\u8fd9\u6837\u8868\u8fbe >>> Foo = type ( 'Foo' , (), { 'bar' : True }) \u800c\u4e14\u88ab\u7528\u6765\u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\u3002 >>> print ( Foo ) < class ' __main__ . Foo '> >>> print ( Foo . bar ) True >>> f = Foo () >>> print ( f ) < __main__ . Foo object at 0x8a9b84c > >>> print ( f . bar ) True \u5f53\u7136\uff0c\u4f60\u4e5f\u80fd\u7ee7\u627f\u5b83\uff0c\u56e0\u6b64\uff1a >>> class FooChild ( Foo ): ... pass \u7b49\u4ef7\u4e8e >>> FooChild = type ( 'FooChild' , ( Foo ,), {}) >>> print ( FooChild ) < class ' __main__ . FooChild '> >>> print ( FooChild . bar ) # bar is inherited from Foo True \u6700\u7ec8\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u7ed9\u8fd9\u4e2a\u7c7b\u6dfb\u52a0\u4e00\u4e9b\u65b9\u6cd5\u3002\u4ec5\u9700\u8981\u5b9a\u4e49\u597d\u51fd\u6570\uff0c\u5e76\u5c06\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5c5e\u6027\u5373\u53ef\u3002 >>> def echo_bar ( self ): ... print ( self . bar ) ... >>> FooChild = type ( 'FooChild' , ( Foo ,), { 'echo_bar' : echo_bar }) >>> hasattr ( Foo , 'echo_bar' ) False >>> hasattr ( FooChild , 'echo_bar' ) True >>> my_foo = FooChild () >>> my_foo . echo_bar () True \u800c\u4e14\uff0c\u751a\u81f3\u5728\u7c7b\u52a8\u6001\u521b\u5efa\u4e4b\u540e\uff0c\u4f60\u4e5f\u80fd\u6dfb\u52a0\u66f4\u591a\u7684\u65b9\u6cd5\uff0c\u5c31\u50cf\u7ed9\u4e00\u4e2a\u666e\u901a\u521b\u5efa\u7684\u7c7b\u5bf9\u8c61\u6dfb\u52a0\u65b9\u6cd5\u4e00\u6837\u3002 >>> def echo_bar_more ( self ): ... print ( 'yet another method' ) ... >>> FooChild . echo_bar_more = echo_bar_more >>> hasattr ( FooChild , 'echo_bar_more' ) True \u5982\u4f60\u6240\u89c1\uff1a\u5728Python\u4e2d\uff0c\u7c7b\u4e5f\u662f\u5bf9\u8c61\uff0c\u800c\u4e14\u4f60\u80fd\u52a8\u6001\u5730\u521b\u5efa\u4e00\u4e2a\u7c7b\u3002 \u8fd9\u5c31\u662f\u5f53\u4f60\u4f7f\u7528 class \u8fd9\u4e2a\u5173\u952e\u5b57\u65f6Python\u6240\u505a\u7684\uff0cPython\u4f7f\u7528\u5143\u7c7b\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002","title":"2\uff09\u52a8\u6001\u5730\u521b\u5efa\u7c7b"},{"location":"stackoverflow-python-top-qa/2/#3","text":"\u5143\u7c7b\u5c31\u662f\u6211\u4eec\u521b\u5efa\u5bf9\u8c61\u7684\u4e1c\u4e1c\u3002 \u4f60\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u662f\u4e3a\u4e86\u521b\u5efa\u5bf9\u8c61\uff0c\u5bf9\u5417\uff1f \u4f46\u662f\u521a\u624d\u6211\u4eec\u4e86\u89e3\u5230\u4e86Python\u7c7b\u4e5f\u662f\u5bf9\u8c61\u3002 \u5143\u7c7b\u662f\u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4e1c\u4e1c\u3002\u4ed6\u4eec\u662f\u7c7b\u7684\u7c7b\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u53bb\u63cf\u8ff0\u5b83\u3002 MyClass = MetaClass () my_object = MyClass () \u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86 type \u80fd\u8ba9\u4f60\u50cf\u8fd9\u6837\u505a\u3002 MyClass = type ( 'MyClass' , (), {}) \u8fd9\u662f\u56e0\u4e3a type \u8fd9\u4e2a\u51fd\u6570\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u5143\u7c7b\u3002 type \u662fPython\u5728\u80cc\u540e\u7528\u6765\u521b\u5efa\u6240\u6709\u7c7b\u7684\u5143\u7c7b\u3002 \u73b0\u5728\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\uff0c\u4e3a\u4ec0\u4e48type\u9996\u5b57\u6bcd\u8981\u5c0f\u5199\uff0c\u800c\u4e0d\u662f\u5199\u6210 Type \u6211\u731c\uff0c\u8fd9\u4e0e\u8bed\u8a00\u4e00\u81f4\u6027\u6709\u5173\uff0c\u4f8b\u5982 str \u662f\u521b\u5efa\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u7c7b\uff0c int \u662f\u521b\u5efa\u6574\u6570\u5bf9\u8c61d\u7684\u7c7b\uff0c type \u5c31\u662f\u7528\u6765\u521b\u5efa\u7c7b\u5bf9\u8c61\u7684\u7c7b\u3002 \u4f60\u53ef\u4ee5\u68c0\u67e5 __class__ \u5c5e\u6027\u770b\u5230\u3002 \u5728Python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\u3002\u5305\u62ec\u6574\u6570\u3001\u5b57\u7b26\u4e32\u3001\u51fd\u6570\u548c\u7c7b\u3002\u5b83\u4eec\u90fd\u662f\u5bf9\u8c61\uff0c\u800c\u4e14\u5b83\u4eec\u90fd\u662f\u7531\u7c7b\u4ea7\u751f\u7684\u3002 >>> age = 35 >>> age . __class__ < type 'int' > >>> name = 'bob' >>> name . __class__ < type 'str' > >>> def foo (): pass >>> foo . __class__ < type 'function' > >>> class Bar ( object ): pass >>> b = Bar () >>> b . __class__ < class ' __main__ . Bar '> \u73b0\u5728\uff0c\u5982\u4f55 __class__ \u7684 __class__ \u662f\u4ec0\u4e48\u5462\uff1f >>> age . __class__ . __class__ < type 'type' > >>> name . __class__ . __class__ < type 'type' > >>> foo . __class__ . __class__ < type 'type' > >>> b . __class__ . __class__ < type 'type' > \u56e0\u6b64\uff0c\u5143\u7c7b\u5c31\u662f\u521b\u5efa\u7c7b\u5bf9\u8c61\u7684\u4e1c\u4e1c\u3002 \u5982\u679c\u4f60\u613f\u610f\uff0c\u53ef\u4ee5\u79f0\u5b83\u4e3a\"\u7c7b\u5de5\u5382\"\u3002 type \u662fPython\u4f7f\u7528\u7684\u5185\u7f6e\u7684\u5143\u7c7b\uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u80fd\u521b\u5efa\u81ea\u5df1\u7684\u5143\u7c7b\u3002","title":"3\uff09\u4ec0\u4e48\u662f\u5143\u7c7b"},{"location":"stackoverflow-python-top-qa/2/#4__metaclass__","text":"\u5f53\u4f60\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a __metaclass__ \u5c5e\u6027\u3002 class Foo ( object ): __metaclass__ = something ... [ ... ] \u5982\u679c\u4f60\u8fd9\u6837\u505a\u7684\u8bdd\uff0cPython\u5c06\u4f7f\u7528\u8fd9\u4e2a\u5143\u7c7b\u53bb\u521b\u5efa\u7c7b Foo \u5c0f\u5fc3\uff0c\u8fd9\u6709\u9677\u9631\u3002 \u4f60\u9996\u5148\u5199\u4e86 class Foo(object) \uff0c\u4f46\u662f\u8fd9\u4e2a\u7c7b\u5bf9\u8c61 Foo \u5728\u5185\u5b58\u4e2d\u5e76\u6ca1\u6709\u88ab\u521b\u5efa\u3002 Python\u5c06\u5728\u7c7b\u5b9a\u4e49\u4e2d\u5bfb\u627e __metaclass__ \u5982\u679cPython\u53d1\u73b0\u4e86\u5b83\uff0cPython\u5c06\u4f7f\u7528\u5b83\u53bb\u521b\u5efa\u7c7b\u5bf9\u8c61 Foo \uff0c\u5982\u679c\u6ca1\u6709\uff0cPython\u5c06\u4f7f\u7528 type \u53bb\u521b\u5efa\u8fd9\u4e2a\u7c7b\u3002 \u91cd\u6e29\u51e0\u6b21\u3002 \u5f53\u4f60\u5b9a\u4e49\uff1a class Foo ( Bar ): pass Python\u5c06\u505a\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5728 Foo \u4e2d\u6709 __metaclass__ \u5c5e\u6027\u5417\uff1f \u5982\u679c\u6709\uff0c\u5c31\u4f7f\u7528 __mataclass__ \u4e2d\u5b9a\u4e49\u7684\u4e1c\u4e1c\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u7c7b\u5bf9\u8c61\uff0c\u7c7b\u540d\u4e3a Foo \u3002 \u5982\u679cPython\u6ca1\u6709\u627e\u5230 __metaclass__ \u5c5e\u6027\uff0c\u5b83\u5c06\u5728MODULE\u5c42\u5bfb\u627e\u4e00\u4e2a __metaclass__ \uff0c\u53bb\u505a\u76f8\u540c\u7684\u4e8b\u60c5\uff08\u5bf9\u4e8e\u7c7b\uff0c\u4e0d\u7ee7\u627f\u4efb\u4f55\u4e1c\u897f\uff0c\u57fa\u7840\u7684\u8001\u5f0f\u7c7b\uff09\u3002 \u7136\u540e\u5982\u679cPython\u4e0d\u80fd\u627e\u5230\u4efb\u4f55\u7684 __metaclass__ \uff0c\u5b83\u5c06\u4f7f\u7528 Bar \uff08\u7b2c\u4e00\u4e2a\u7236\u7c7b\uff09\u81ea\u5df1\u7684\u5143\u7c7b\uff08\u53ef\u80fd\u662f type \uff09\u53bb\u521b\u5efa\u7c7b\u5bf9\u8c61\u3002 \u8fd9\u91cc\u5c0f\u5fc3 __metaclass__ \u5c5e\u6027\u5c06\u4e0d\u4f1a\u88ab\u7ee7\u627f\uff0c\u7236\u7c7b\u7684\u5143\u7c7b\uff08 Bar.__class__ \uff09\u4f1a\u88ab\u7ee7\u627f\u3002\u5982\u679c Bar \u4f7f\u7528\u4e86\u4e00\u4e2a\u7528 type \uff08\u4e0d\u662f type.__new__() \uff09\u521b\u5efa Bar \u7684 __metaclass__ \u5c5e\u6027\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u7c7b\u5c06\u4f1a\u7ee7\u627f\u8fd9\u4e2a\u884c\u4e3a\u3002 \u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u4f60\u80fd\u5728 __metaclass__ \u4e2d\u5b9a\u4e49\u4ec0\u4e48\uff1f \u7b54\u6848\u5c31\u662f\uff0c\u80fd\u591f\u521b\u5efa\u7c7b\u7684\u4e1c\u4e1c\u3002 \u4ec0\u4e48\u80fd\u521b\u5efa\u7c7b\u5462\uff1f type \uff0c\u6216\u8005\u5b83\u7684\u5b50\u7c7b\uff0c\u6216\u8005\u7528\u4e86\u5b83\u7684\u4efb\u4f55\u4e1c\u897f\u3002","title":"4\uff09__metaclass__ \u5c5e\u6027"},{"location":"stackoverflow-python-top-qa/2/#5","text":"\u5143\u7c7b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u521b\u5efa\u65f6\u81ea\u52a8\u5730\u6539\u53d8\u7c7b\u3002 \u7ecf\u5e38\u4e3a\u4e86API\u8fd9\u4e48\u505a\uff0cAPI\u4e2d\u9700\u8981\u521b\u5efa\u7c7b\u53bb\u5339\u914d\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u3002 \u60f3\u8c61\u4e00\u4e2a\u975e\u5e38\u8822\u7684\u4f8b\u5b50\uff0c\u4f60\u51b3\u5b9a\u4f60\u7684\u6a21\u5757\u4e2d\u7684\u6240\u6709\u7c7b\u5b83\u4eec\u7684\u5c5e\u6027\u5e94\u8be5\u5927\u5199\u3002\u6709\u597d\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4ef6\u4e8b\uff0c\u5176\u4e2d\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u5728\u6a21\u5757\u5c42\u8bbe\u7f6e __metaclass__ \u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6a21\u5757\u5185\u6240\u6709\u7684\u7c7b\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u5143\u7c7b\u521b\u5efa\uff0c\u800c\u4e14\u6211\u4eec\u5fc5\u987b\u544a\u8bc9\u5143\u7c7b\u8981\u5c06\u6240\u6709\u7684\u5c5e\u6027\u8f6c\u4e3a\u5927\u5199\u3002 \u5e78\u8fd0\u7684\u662f\uff0c __metaclass__ \u786e\u5b9e\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5b83\u4e0d\u9700\u8981\u662f\u4e00\u4e2a\u6b63\u5f0f\u7684\u7c7b\uff08\u5728\u540d\u5b57\u4e2d\u5e26\u6709\u7c7b\uff0c\u4f46\u662f\u4e0d\u5fc5\u8981\u662f\u4e00\u4e2a\u7c7b\uff0c\u533a\u5206\u4e00\u4e0b\uff0c\u4f46\u662f\u8fd9\u5f88\u6709\u7528\uff09\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u5199\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 # coding=utf-8 # \u9002\u7528\u4e8epython2 # \u5143\u7c7b\u5c06\u81ea\u52a8\u83b7\u53d6\u5230\u76f8\u540c\u7684\u4f60\u7ecf\u5e38\u4f20\u7ed9`type`\u7684\u53c2\u6570\u3002 # \u5373\u53c2\u6570\u5217\u8868\u4e0e`type`\u7684\u4e00\u81f4\u3002 def upper_attr ( future_class_name , future_class_parents , future_class_attr ): \"\"\" \u5c06\u5c5e\u6027\u540d\u8f6c\u4e3a\u5927\u5199\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u3002 \"\"\" # \u7b5b\u9009\u51fa\u6240\u6709\u4e0d\u4ee5__\u5f00\u5934\u7684\u5c5e\u6027\uff0c\u8f6c\u4e3a\u5927\u5199\u3002 uppercase_attr = {} for name , val in future_class_attr . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val # \u4f7f\u7528type\u521b\u5efa\u7c7b return type ( future_class_name , future_class_parents , uppercase_attr ) __metaclass__ = upper_attr # \u8fd9\u5c06\u5f71\u54cd\u8fd9\u4e2a\u6a21\u5757\u5185\u7684\u6240\u6709\u7c7b\u3002 class Foo (): # \u867d\u7136\u5168\u5c40\u7684 __metaclass__ \u5bf9 \u201cobject\u201d\u65e0\u6548 # \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b9a\u4e49 __metaclass__ \u800c\u4e0d\u662f\u4ec5\u4ec5\u5f71\u54cd\u8fd9\u4e2a\u7c7b\u3002 # \u8fd9\u5c06\u5f71\u54cd\u201cobject\u201d\u7684children bar = 'bip' print ( hasattr ( Foo , 'bar' )) # Out: False print ( hasattr ( Foo , 'BAR' )) # Out: True f = Foo () print ( f . BAR ) # Out: 'bip' \u73b0\u5728\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u771f\u5b9e\u7684\u7c7b\u4f5c\u4e3a\u5143\u7c7b\u53bb\u505a\u76f8\u540c\u7684\u4e8b\u60c5\u3002 # coding=utf-8 # \u8bb0\u4f4f`type`\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e`str`\u548c`int`\u7684\u7c7b # \u6240\u4ee5\u4f60\u80fd\u7ee7\u627f\u5b83 class UpperAttrMetaclass ( type ): # __new__ \u65b9\u6cd5\u5728 __init__ \u524d\u6267\u884c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u521b\u5efa\u5bf9\u8c61\u5e76\u8fd4\u56de\u3002 # __init__\u65b9\u6cd5\u4ec5\u4ec5\u521d\u59cb\u5316\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u7684\u5bf9\u8c61\u3002 # \u4f60\u5f88\u5c11\u4f7f\u7528__new__\u65b9\u6cd5\uff0c\u9664\u975e\u4f60\u60f3\u63a7\u5236\u7c7b\u662f\u5982\u4f55\u521b\u5efa\u7684\u3002 # \u8fd9\u91cc\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u7c7b\uff0c\u6211\u4eec\u60f3\u81ea\u5b9a\u4e49\u5b83\uff0c\u56e0\u6b64\u9700\u8981\u8986\u76d6 __new__\u3002 # \u4f60\u4e5f\u80fd\u5728__init__\u4e2d\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u5982\u679c\u613f\u610f\u7684\u8bdd\u3002 # \u4e00\u4e9b\u9ad8\u7ea7\u7528\u6cd5\u8fd8\u5305\u62ec\u8986\u76d6__call__\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u4f7f\u7528\u3002 def __new__ ( upperattr_metaclass , future_class_name , future_class_parents , future_class_attr ): uppercase_attr = {} for name , val in future_class_attr . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val return type ( future_class_name , future_class_parents , uppercase_attr ) \u4e8b\u5b9e\u4e0a\u8fd9\u5e76\u4e0dOOP\uff0c\u6211\u4eec\u76f4\u63a5\u8c03\u7528\u4e86 type \u51fd\u6570\uff0c\u6ca1\u6709\u8986\u76d6\u6216\u8005\u662f\u8c03\u7528\u7236\u7c7b\u7684 __new__ \uff0c\u6539\u4e00\u4e0b\uff1a # coding=utf-8 class UpperAttrMetaclass ( type ): def __new__ ( upperattr_metaclass , future_class_name , future_class_parents , future_class_attr ): uppercase_attr = {} for name , val in future_class_attr . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val # \u91cd\u7528\u4e86type.__new__\u65b9\u6cd5\uff0c\u8fd9\u79cd\u5199\u6cd5\u662fOOP\u7684 return type . __new__ ( upperattr_metaclass , future_class_name , future_class_parents , uppercase_attr ) \u4f60\u53ef\u80fd\u6ce8\u610f\u5230\u989d\u5916\u7684\u53c2\u6570 upperattr_metaclass \uff0c\u8fd9\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff1a __new__ \u65b9\u6cd5\u603b\u662f\u63a5\u53d7\u5b9a\u4e49\u7684\u7c7b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u50cf\u666e\u901a\u65b9\u6cd5\u63a5\u53d7\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 self \uff0c\u7c7b\u65b9\u6cd5\u4f20\u5165\u5b9a\u4e49\u7c7b\u4e00\u6837\u3002 \u5f53\u7136\uff0c\u4e3a\u4e86\u53ef\u8bfb\u6027\uff0c\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u540d\u5b57\u592a\u957f\u4e86\u3002\u4f46\u662f\u5c31\u5982 self \u4e00\u6837\uff0c\u6240\u6709\u7684\u53c2\u6570\u90fd\u6709\u7ea6\u5b9a\u4fd7\u6210\u7684\u540d\u5b57\uff0c\u56e0\u6b64\u4e00\u4e2a\u771f\u5b9e\u7684\u6b63\u5f0f\u7684metaclass\u5e94\u8be5\u50cf\u8fd9\u6837\u5199\uff1a class UpperAttrMetaclass ( type ): def __new__ ( cls , clsname , bases , dct ): uppercase_attr = {} for name , val in dct . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val return type . __new__ ( cls , clsname , bases , uppercase_attr ) \u6211\u4eec\u4f7f\u7528 super \u8ba9\u4ee3\u7801\u770b\u4e0a\u53bb\u66f4\u6e05\u6670\u4e00\u4e9b\uff0c class UpperAttrMetaclass ( type ): def __new__ ( cls , clsname , bases , dct ): uppercase_attr = {} for name , val in dct . items (): if not name . startswith ( '__' ): uppercase_attr [ name . upper ()] = val else : uppercase_attr [ name ] = val return super ( UpperAttrMetaclass , cls ) . __new__ ( cls , clsname , bases , uppercase_attr ) \u4ee5\u4e0a\u5c31\u662f\u5168\u90e8\u4e86\uff0c\u5173\u4e8e\u5143\u7c7b\u5df2\u7ecf\u6ca1\u6709\u4ec0\u4e48\u5185\u5bb9\u4e86\u3002 \u4f7f\u7528\u5143\u7c7b\u7684\u4ee3\u7801\u590d\u6742\u7684\u539f\u56e0\u5e76\u4e0d\u5728\u4e8e\u5143\u7c7b\u672c\u8eab\uff0c\u800c\u662f\u56e0\u4e3a\u4f60\u7ecf\u5e38\u4f7f\u7528\u5143\u7c7b\u53bb\u505a\u4e00\u4e9b\u626d\u66f2\u7684\u4e8b\u60c5\uff0c\u64cd\u7eb5\u7ee7\u627f\uff0c\u904d\u5386\u5c5e\u6027\uff08vars\uff09\u4f8b\u5982 __dict__ \u7b49\u7b49\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5143\u7c7b\u5728\u505a\u4e00\u4e9b\u9ed1\u79d1\u6280\u65f6\u975e\u5e38\u6709\u7528\uff0c\u56e0\u6b64\u5f80\u5f80\u662f\u4e00\u4e9b\u590d\u6742\u7684\u4e1c\u897f\u3002\u4f46\u662f\u5c31\u5143\u7c7b\u672c\u8eab\u800c\u8a00\uff0c\u662f\u7b80\u5355\u7684\u3002 \u62e6\u622a\u7c7b\u7684\u521b\u5efa\u3002 \u4fee\u6539\u7c7b\u3002 \u8fd4\u56de\u4fee\u6539\u540e\u7684\u7c7b\u3002","title":"5\uff09\u81ea\u5b9a\u4e49\u5143\u7c7b"},{"location":"stackoverflow-python-top-qa/2/#6","text":"\u56e0\u4e3a __metaclass__ \u80fd\u591f\u63a5\u53d7\u4efb\u4f55\u53ef\u8c03\u7528\u7684\u4e1c\u897f\uff0c\u4e3a\u4ec0\u4e48\u8981\u53bb\u4f7f\u7528\u660e\u663e\u66f4\u4e3a\u590d\u6742\u7684\u7c7b\u5462\uff1f \u8fd9\u4e48\u505a\u6709\u51e0\u4e2a\u539f\u56e0\uff1a \u76ee\u7684\u66f4\u660e\u786e\uff0c\u5f53\u4f60\u9605\u8bfb UpperAttrMetaclass(type) \uff0c\u4f60\u77e5\u9053\u63a5\u4e0b\u6765\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u66f4OOP\u3002\u5143\u7c7b\u80fd\u591f\u7ee7\u627f\u5143\u7c7b\uff0c\u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5\u3002\u5143\u7c7b\u751a\u81f3\u80fd\u4f7f\u7528\u5143\u7c7b\u3002 \u4e00\u4e2a\u7c7b\u7684\u5b50\u7c7b\u53ef\u4ee5\u662f\u5b83\u7684\u5143\u7c7b\u7684\u5b9e\u4f8b\u5982\u679c\u4f60\u6307\u5b9a\u4e86\u4e00\u4e2a\u5143\u7c7b\u7c7b\uff08metaclass-class\uff09\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5143\u7c7b\u51fd\u6570\uff08metaclass-function\uff09\u3002 \u80fd\u66f4\u597d\u5730\u7ec4\u7ec7\u4ee3\u7801\u3002\u4f60\u4ece\u6765\u6ca1\u6709\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50\u8fd9\u6837\u8bd5\u9a8c\u6027\u5730\u4f7f\u7528\u5143\u7c7b\u3002\u5143\u7c7b\u7ecf\u5e38\u7528\u4e8e\u4e00\u4e9b\u590d\u6742\u573a\u666f\u3002\u4e3a\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u5c06\u597d\u51e0\u4e2a\u65b9\u6cd5\u7ec4\u7ec7\u5728\u4e00\u4e2a\u7c7b\u4e2d\u7684\u80fd\u529b\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u4f60\u80fd\u8986\u76d6 __new__ \uff0c __init__ \u548c __call__ \uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5141\u8bb8\u4f60\u505a\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\u5373\u65f6\u5373\u7ecf\u5e38\u53ea\u9700\u8981\u4fee\u6539 __new__ \uff0c\u4e00\u4e9b\u4eba\u89c9\u5f97\u4f7f\u7528 __init__ \u66f4\u8212\u670d\u3002 \u5b83\u4eec\u88ab\u79f0\u4e3a\u5143\u7c7b\uff0c\u5b9e\u9645\u5c31\u5e94\u8be5\u548c\u5b83\u7684\u540d\u79f0\u4e00\u81f4\u3002","title":"6\uff09\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5143\u7c7b\u65f6\u7528\u7c7b\u800c\u4e0d\u7528\u51fd\u6570\uff1f"},{"location":"stackoverflow-python-top-qa/2/#7","text":"\u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u8fd9\u4e48\u6666\u6da9\u7684\u5bb9\u6613\u51fa\u9519\u7684\u7279\u6027\uff1f \u901a\u5e38\u4e0d\u8981\u7528\uff1a \u5143\u7c7b\u662f\u6df1\u9b54\u6cd5\uff0c99%\u7684\u7528\u6237\u90fd\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5982\u679c\u4f60\u5728\u60f3\u662f\u5426\u9700\u8981\u5b83\u4eec\uff0c\u5c31\u4e0d\u8981\u7528\uff08\u9700\u8981\u5143\u7c7b\u7684\u4eba\u786e\u5207\u5730\u77e5\u9053\u9700\u8981\u5b83\uff0c\u65e0\u9700\u89e3\u91ca\uff09\u3002 Python Guru Tim Peters \u5143\u7c7b\u4e3b\u8981\u7684\u4f7f\u7528\u573a\u666f\u662f\u521b\u5efaAPI\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662fDjango\u7684ORM\u3002 \u5b83\u5141\u8bb8\u4f60\u53bb\u8fd9\u6837\u5b9a\u4e49\uff1a class Person ( models . Model ): name = models . CharField ( max_length = 30 ) age = models . IntegerField () \u4f46\u662f\u5982\u679c\u4f60\u8fd9\u6837\u505a\uff1a guy = Person ( name = 'bob' , age = '35' ) print ( guy . age ) \u5b83\u5c06\u4e0d\u4f1a\u8fd4\u56de\u4e00\u4e2a IntegerFiled \u5bf9\u8c61\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a int \uff0c\u800c\u4e14\u751a\u81f3\u76f4\u63a5\u4f20\u7ed9\u6570\u636e\u5e93\u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a models.Model \u5b9a\u4e49\u4e86 __metaclass__ \u800c\u4e14\u8fdb\u884c\u4e86\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u5c06\u4f60\u521a\u521a\u7b80\u5355\u51e0\u53e5\u8bdd\u5b9a\u4e49\u7684 Person \u8f6c\u53d8\u4e3a\u6570\u636e\u5e93\u5b57\u6bb5\u7684\u590d\u6742\u94a9\u5b50\u3002 Django\u901a\u8fc7\u4f7f\u7528\u5143\u7c7b\u66b4\u9732\u7b80\u5355\u7684API\uff0c\u8ba9\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u60c5\u770b\u4e0a\u53bb\u7b80\u5355\uff0c\u901a\u8fc7\u8fd9\u4e9bAPI\u80cc\u540e\u91cd\u65b0\u521b\u5efa\u4ee3\u7801\u53bb\u505a\u771f\u5b9e\u7684\u4e8b\u60c5\u3002","title":"7\uff09\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5143\u7c7b"},{"location":"stackoverflow-python-top-qa/2/#8","text":"\u9996\u5148\uff0c\u4f60\u77e5\u9053\u7c7b\u662f\u80fd\u591f\u521b\u5efa\u5b9e\u4f8b\u7684\u5bf9\u8c61\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u7c7b\u672c\u8eab\u5c31\u662f\u5bf9\u8c61\uff0c\u5143\u7c7b\u4e5f\u662f\u3002 >>> class Foo ( object ): pass >>> id ( Foo ) 142630324 Python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u800c\u4e14\u4ed6\u4eec\u4e5f\u662f\u7c7b\u7684\u5b9e\u4f8b\u6216\u7c7b\u7684\u5b9e\u4f8b\u3002 \u9664\u4e86 type type \u786e\u5b9e\u662f\u81ea\u5df1\u7684\u5143\u7c7b\uff0c\u8fd9\u53ea\u7528Python\u662f\u4ea7\u751f\u4e0d\u4e86\u7684\uff0c\u8fd9\u662f\u5728\u5b9e\u73b0\u5c42\u9762\u505a\u7684\u3002 \u7b2c\u4e8c\uff0c\u5143\u7c7b\u662f\u590d\u6742\u7684\u3002\u4f60\u53ef\u80fd\u60f3\u53bb\u4f7f\u7528\u4ed6\u4eec\u53bb\u505a\u7b80\u5355\u7684\u7c7b\u4fee\u6539\u3002\u4f60\u80fd\u4f7f\u75282\u79cd\u5176\u4ed6\u7684\u6280\u672f\u53bb\u505a\u8fd9\u4ef6\u4e8b\u3002 \u7334\u5b50\u8865\u4e01\uff08monkey patching\uff09 \u7c7b\u88c5\u9970\u5668\uff08class decorators\uff09 \u7c7b\u4fee\u653999%\u7684\u573a\u666f\u9002\u5408\u4ee5\u4e0a\u65b9\u5f0f\u3002 \u4f46\u662f98%\u7684\u573a\u666f\uff0c\u6839\u672c\u4e0d\u9700\u8981\u53bb\u4fee\u6539\u7c7b\u3002","title":"8\uff09\u6700\u540e\u4e00\u70b9"},{"location":"stackoverflow-python-top-qa/2/#9python3","text":"Python3\u548cPython2\u4e2d\u5143\u7c7b\u4f7f\u7528\u6709\u533a\u522b\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u5143\u7c7b\u5b9e\u73b0\u8ffd\u8e2a\u7c7b\u5b9a\u4e49\u987a\u5e8f\u7684\u4f8b\u5b50\u3002 class MyMeta ( type ): counter = 0 def __init__ ( cls , name , bases , dic ): type . __init__ ( cls , name , bases , dic ) cls . _order = MyMeta . counter MyMeta . counter += 1 class MyType ( object ): # Python 2 __metaclass__ = MyMeta class MyType ( metaclass = MyMeta ): # Python 3 pass Python3\u4e2d\u5143\u7c7b\u67092\u4e2a\u5173\u952e\u7684\u65b9\u6cd5\u3002 __prepare__ __new__ __prepare__ \u8ba9\u4f60\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5b57\u5178\uff08\u4f8b\u5982 OrderedDict \uff09\u4f5c\u4e3a\u5143\u7c7b\u521b\u5efa\u65f6\u7684\u547d\u540d\u7a7a\u95f4\u3002\u65e0\u8bba\u9009\u62e9\u4ec0\u4e48\u547d\u540d\u7a7a\u95f4\uff0c\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5982\u679c\u6ca1\u6709\u5b9e\u73b0 __prepare__ \uff0c\u5c06\u4f1a\u4f7f\u7528\u4e00\u4e2a\u666e\u901a\u7684 dict \u3002 class Meta ( type ): def __prepare__ ( metaclass , cls , bases ): return dict () def __new__ ( metacls , cls , bases , clsdict ): return super () . __new__ ( metacls , cls , bases , clsdict )","title":"9\uff09Python3\u8865\u5145"},{"location":"stackoverflow-python-top-qa/2/#_3","text":"\u5143\u7c7b\u662f\u7c7b\u7684\u7c7b\u3002\u5c31\u50cf\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u7684\u884c\u4e3a\uff0c\u4e00\u4e2a\u5143\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u7684\u884c\u4e3a\u3002\u7c7b\u662f\u5143\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5728Python\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u53ef\u8c03\u7528\u7684\u5143\u7c7b(\u5982 Jerub \u7684\u56de\u7b54)\uff0c\u66f4\u6709\u7528\u7684\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u4f7f\u5b83\u672c\u8eab\u6210\u4e3a\u4e00\u4e2a\u5b9e\u9645\u7684\u7c7b\u3002\u7c7b\u578b\uff08 type \uff09\u662fPython\u4e2d\u5e38\u7528\u7684\u5143\u7c7b\u3002\u6b63\u5982\u4f60\u6240\u60f3\u7684\u90a3\u6837\uff0c type \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7c7b\uff0c\u5b83\u662f\u5b83\u81ea\u5df1\u7684\u7c7b\u578b\u3002\u4f60\u5c06\u65e0\u9700\u5728Python\u4e2d\u91cd\u65b0\u521b\u5efa\u7c7b\u4f3c\u4e8e type \u7684\u4e1c\u897f\uff0c\u4f46\u662fPython\u6709\u4e00\u70b9\u6709\u4e00\u5b9a\u7684\u6b3a\u9a97\u6027\u3002\u8981\u5728Python\u4e2d\u521b\u5efa\u81ea\u5df1\u7684\u5143\u7c7b\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5b50\u7c7b\u5316 type \u3002 \u5143\u7c7b\u901a\u5e38\u7528\u4f5c\u7c7b\u5de5\u5382\u3002\u5c31\u50cf\u4f60\u901a\u8fc7\u8c03\u7528\u7c7b\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u4e00\u6837\uff0cPython\u901a\u8fc7\u8c03\u7528\u5143\u7c7b\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b(\u5f53\u5b83\u6267\u884c\u201c\u7c7b\u201d\u8bed\u53e5\u65f6)\u3002\u4e0e\u5e38\u7528\u7684 __init__ \u548c __new__ \u65b9\u6cd5\u76f8\u7ed3\u5408\uff0c\u5143\u7c7b\u5141\u8bb8\u4f60\u5728\u521b\u5efa\u7c7b\u65f6\u505a\u201c\u989d\u5916\u7684\u4e8b\u60c5\u201d\uff0c\u6bd4\u5982\u6ce8\u518c\u65b0\u7684\u7c7b\u548c\u4e00\u4e9b\u6ce8\u518c\u8868\uff0c\u751a\u81f3\u5b8c\u5168\u66ff\u6362\u7c7b\u3002 \u5728\u6267\u884c class \u8bed\u53e5\u65f6\uff0cPython\u9996\u5148\u5c06 class \u8bed\u53e5\u7684\u4e3b\u4f53\u4f5c\u4e3a\u6b63\u5e38\u7684\u4ee3\u7801\u5757\u6267\u884c\u3002\u7531\u6b64\u4ea7\u751f\u7684\u547d\u540d\u7a7a\u95f4(\u4e00\u4e2a\u547d\u4ee4)\u5305\u542b\u5c06\u5448\u73b0\u7684\u7c7b\u7684\u5c5e\u6027\u3002\u5143\u7c7b\u662f\u901a\u8fc7\u67e5\u770b\u5c06\u5448\u73b0\u7684\u7c7b\u7684\u57fa\u7c7b(\u5143\u7c7b\u7ee7\u627f\u7684)\uff0c\u5728\u5176 __metaclass__ \u5c5e\u6027(\u5982\u679c\u6709)\u6216 __metaclass__ \u5168\u5c40\u53d8\u91cf\u6765\u786e\u5b9a\u7684\u3002\u7136\u540e\u4f7f\u7528\u7c7b\u7684\u540d\u79f0\u3001\u57fa\u7840\u548c\u5c5e\u6027\u8c03\u7528\u5143\u7c7b\u6765\u5b9e\u4f8b\u5316\u5b83\u3002 \u7136\u800c\uff0c\u5143\u7c7b\u5b9e\u9645\u4e0a\u5b9a\u4e49\u4e86\u7c7b\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b83\u7684\u5de5\u5382\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4e0e\u5b83\u4eec\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u5143\u7c7b\u4e0a\u5b9a\u4e49\u5e38\u89c4\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5143\u7c7b\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u7c7b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u5728\u6ca1\u6709\u5b9e\u4f8b\u7684\u7c7b\u4e0a\u8c03\u7528\u5b83\u4eec\uff0c\u4f46\u662f\u5b83\u4eec\u4e5f\u4e0d\u50cf\u7c7b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u80fd\u5728\u7c7b\u7684\u5b9e\u4f8b\u4e0a\u8c03\u7528\u5b83\u4eec\u3002 __subclasses__ ()\u662f\u5728 type \u5143\u7c7b\u4e0a\u7684\u4e00\u4e2a\u65b9\u6cd5\u7684\u4f8b\u5b50\u3002\u4f60\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u666e\u901a\u7684\u201c\u9b54\u672f\u201d\u65b9\u6cd5\uff0c\u4f8b\u5982 __add__ \u3001 __iter__ \u548c __getattr__ \uff0c\u4ee5\u5b9e\u73b0\u6216\u66f4\u6539\u7c7b\u7684\u884c\u4e3a\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u96f6\u788e\u7684\u4f8b\u5b50: def make_hook ( f ): \"\"\"Decorator to turn 'foo' method into '__foo__'\"\"\" f . is_hook = 1 return f class MyType ( type ): def __new__ ( mcls , name , bases , attrs ): if name . startswith ( 'None' ): return None # Go over attributes and see if they should be renamed. newattrs = {} for attrname , attrvalue in attrs . iteritems (): if getattr ( attrvalue , 'is_hook' , 0 ): newattrs [ '__ %s __' % attrname ] = attrvalue else : newattrs [ attrname ] = attrvalue return super ( MyType , mcls ) . __new__ ( mcls , name , bases , newattrs ) def __init__ ( self , name , bases , attrs ): super ( MyType , self ) . __init__ ( name , bases , attrs ) # classregistry.register(self, self.interfaces) print \"Would register class %s now.\" % self def __add__ ( self , other ): class AutoClass ( self , other ): pass return AutoClass # Alternatively, to autogenerate the classname as well as the class: # return type(self.__name__ + other.__name__, (self, other), {}) def unregister ( self ): # classregistry.unregister(self) print \"Would unregister class %s now.\" % self class MyObject : __metaclass__ = MyType class NoneSample ( MyObject ): pass # Will print \"NoneType None\" print type ( NoneSample ), repr ( NoneSample ) class Example ( MyObject ): def __init__ ( self , value ): self . value = value @make_hook def add ( self , other ): return self . __class__ ( self . value + other . value ) # Will unregister the class Example . unregister () inst = Example ( 10 ) # Will fail with an AttributeError #inst.unregister() print inst + inst class Sibling ( MyObject ): pass ExampleSibling = Example + Sibling # ExampleSibling is now a subclass of both Example and Sibling (with no # content of its own) although it will believe it's called 'AutoClass' print ExampleSibling print ExampleSibling . __mro__","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/20/","text":"20. \u5b57\u5178\u5982\u4f55\u5224\u65ad\u952e\u5df2\u5b58\u5728 \u00b6 \u95ee\u9898 \u00b6 \u5728\u66f4\u65b0\u67d0\u4e2a\u952e\u7684\u503c\u524d\u60f3\u5224\u65ad\u952e\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u662f\u8fd9\u4e48\u5199\u7684\uff1a if 'key1' in dict . keys (): print \"blah\" else : print \"boo\" \u6211\u89c9\u5f97\u8fd9\u5e76\u4e0d\u662f\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u5417\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 in \u662f dict \u4e2d\u68c0\u67e5\u952e\u7684\u5b58\u5728\u6027\u7684\u63a8\u8350\u65b9\u5f0f d = dict () for i in xrange ( 100 ): key = i % 10 if key in d : d [ key ] += 1 else : d [ key ] = 1 \u5982\u679c\u9700\u8981\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u603b\u662f\u4f7f\u7528 d = dict () for i in xrange ( 100 ): key = i % 10 d [ key ] = d . get ( key , 0 ) + 1 \u5982\u679c\u60f3\u603b\u662f\u786e\u4fdd\u5bf9\u4e8e\u4efb\u4f55\u952e\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 defaultdict \uff08 collections \u6a21\u5757\uff09\uff0c\u50cf\u8fd9\u6837\uff1a from collections import defaultdict d = defaultdict ( lambda : 0 ) for i in xrange ( 100 ): d [ i % 10 ] += 1 \u4f46\u662f\uff0c\u4e00\u822c\u800c\u8a00\uff0c in \u5173\u952e\u5b57\u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002","title":"20.\u5b57\u5178\u5982\u4f55\u5224\u65ad\u952e\u5df2\u5b58\u5728"},{"location":"stackoverflow-python-top-qa/20/#20","text":"","title":"20. \u5b57\u5178\u5982\u4f55\u5224\u65ad\u952e\u5df2\u5b58\u5728"},{"location":"stackoverflow-python-top-qa/20/#_1","text":"\u5728\u66f4\u65b0\u67d0\u4e2a\u952e\u7684\u503c\u524d\u60f3\u5224\u65ad\u952e\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u662f\u8fd9\u4e48\u5199\u7684\uff1a if 'key1' in dict . keys (): print \"blah\" else : print \"boo\" \u6211\u89c9\u5f97\u8fd9\u5e76\u4e0d\u662f\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u5417\uff1f \u94fe\u63a5","title":"\u95ee\u9898"},{"location":"stackoverflow-python-top-qa/20/#_2","text":"in \u662f dict \u4e2d\u68c0\u67e5\u952e\u7684\u5b58\u5728\u6027\u7684\u63a8\u8350\u65b9\u5f0f d = dict () for i in xrange ( 100 ): key = i % 10 if key in d : d [ key ] += 1 else : d [ key ] = 1 \u5982\u679c\u9700\u8981\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u603b\u662f\u4f7f\u7528 d = dict () for i in xrange ( 100 ): key = i % 10 d [ key ] = d . get ( key , 0 ) + 1 \u5982\u679c\u60f3\u603b\u662f\u786e\u4fdd\u5bf9\u4e8e\u4efb\u4f55\u952e\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 defaultdict \uff08 collections \u6a21\u5757\uff09\uff0c\u50cf\u8fd9\u6837\uff1a from collections import defaultdict d = defaultdict ( lambda : 0 ) for i in xrange ( 100 ): d [ i % 10 ] += 1 \u4f46\u662f\uff0c\u4e00\u822c\u800c\u8a00\uff0c in \u5173\u952e\u5b57\u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/21/","text":"21. \u5982\u4f55\u5728Windows\u4e0a\u5b89\u88c5pip \u00b6 \u95ee\u9898 \u00b6 pip \u662f easy_install \u7684\u66ff\u4ee3\u3002\u4f46\u662f\u5728Windows\u4e0a\uff0c\u6211\u5e94\u8be5\u5982\u4f55\u7528 easy_install \u5b89\u88c5 pip \u5462\uff1f\u8fd9\u91cc\u6709\u597d\u7684\u65b9\u6cd5\u5417\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 Python 2.7.9+ and 3.4+ \u00b6 \u597d\u6d88\u606f\uff01 Python 3.4 (2014/03\u53d1\u5e03) \u548c Python 2.7.9 (2014/12\u53d1\u5e03) \u5b89\u88c5\u5305\u81ea\u5e26pip\u3002\u5bf9\u4efb\u4f55Python\u53d1\u5e03\u7248\u6765\u8bf4\u90fd\u662f\u5f88\u597d\u7684\u7279\u6027\u3002\u8fd9\u4f7f\u5f97\u6bcf\u4e2a\u4eba\u90fd\u80fd\u591f\u63a5\u89e6\u5230\u793e\u533a\u7684\u5404\u4e2a\u5e93\u3002\u521d\u5b66\u8005\u4e0d\u518d\u56e0\u4e3a\u96be\u4ee5\u5b89\u88c5\u4e8c\u88ab\u6392\u9664\u5728\u793e\u533a\u5e93\u4e4b\u5916\u3002\u548c Ruby , Node.js , Haskell , Perl , Go \u7b49\u62e5\u6709\u5f00\u6e90\u793e\u533a\u7684\u73b0\u4ee3\u8bed\u8a00\u4e00\u6837\uff0cPython\u53d1\u5e03\u7248\u81ea\u5e26\u4e86\u4e00\u4e2a\u5305\u7ba1\u7406\u5668\u3002\u611f\u8c22Python\u3002 \u5f53\u7136\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740Python\u5305\u7ba1\u7406\u5668\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u3002\u7ecf\u5386\u4ee4\u4eba\u4e0d\u60a6\u3002\u6211\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0b\u8ba8\u8bba\u8fc7\u3002 in Stack Overflow question Does Python have a package/module management system? \u3002 \u800c\u4e14\uff0c\u5bf9\u4e8e\u4f7f\u7528Python 2.7.8 \u6216\u8005\u4e4b\u524d\u7684\u7248\u672c\u7684\u6bcf\u4e00\u4e2a\u4eba\uff0c\u6ca1\u6709\u81ea\u5e26\u7684pip\u53ef\u7528\uff0c\u4ee5\u4e0b\u662f\u6559\u7a0b\u3002 Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3 \u00b6 \u5b98\u65b9\u6559\u7a0b \u00b6 https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip : \u4e0b\u8f7d get-pip.py , \u4fdd\u5b58\u65f6\u6ce8\u610f\u540e\u7f00\u662f .py \u800c\u4e0d\u662f .txt \u3002\u7136\u540e\uff0c\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4 python get-pip.py \u4f60\u53ef\u80fd\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u53bb\u8fd0\u884c\u3002 Start a Command Prompt as an Administrator (Microsoft TechNet). \u5b89\u88c5\u4e4b\u540e\uff0c...\\Scripts\\pip.exe\u9700\u8981\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u624d\u80fd\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u3002 \u5176\u4ed6\u65b9\u6cd5 \u00b6 \u5b98\u65b9\u6587\u6863\u8981\u6c42\u7528\u6237\u5b89\u88c5pip\u548c\u76f8\u5173\u7684\u4f9d\u8d56\uff0c\u6709\u7ecf\u9a8c\u7684\u4eba\u89c9\u5f97\u4e4f\u5473\uff0c\u65b0\u624b\u89c9\u5f97\u56f0\u96be\u3002 \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0cChristoph Gohlke\u5236\u4f5c\u4e86\u4e00\u4e2aWindows\u7684\u5b89\u88c5\u5305\uff08.msi\uff09\uff0c\u9002\u7528\u5404\u4e2a\u7248\u672c\u7684Python\uff0c\u5305\u62ec32\u4f4d\u548c64\u4f4d\u3002\u4f60\u9700\u8981\uff1a \u5b89\u88c5 setuptools \u5b89\u88c5 pip \u5bf9\u6211\u800c\u8a00\uff0c\u5b89\u88c5\u597d\u7684pip\u4f4d\u4e8e C:\\Python27\\Scripts\\pip.exe \uff0c\u5728\u4f60\u7684\u7535\u8111\u4e0a\u627e\u5230 pip.exe \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6587\u4ef6\u5939\uff08\u4f8b\u5982 C:\\Python27\\Scripts \uff09\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\u7684path\u4e2d\u3002\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u80fd\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 pip \uff0c\u8bd5\u8bd5\u5b89\u88c5\u4e00\u4e2a\u5305\uff1a pip install httpie \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u95ee\u9898\u7684\u89e3\u51b3\u529e\u6cd5\u3002 \u4ee3\u7406\u95ee\u9898 \u00b6 \u5982\u679c\u4f60\u5728\u529e\u516c\u5ba4\u91cc\u5de5\u4f5c\uff0c\u4f60\u53ef\u80fd\u7ecf\u8fc7\u4e86HTTP\u4ee3\u7406\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf http_proxy \u548c https_proxy \u3002\u5bf9\u5927\u90e8\u5206Python\u5e94\u7528\uff08\u4ee5\u53ca\u5176\u4ed6\u81ea\u7531\u8f6f\u4ef6\uff09\u6709\u7528\u3002\u4f8b\u5982\uff1a http://proxy_url:port http://username:password@proxy_url:port \u5982\u679c\u4f60\u975e\u5e38\u4e0d\u5e78\uff0c\u4ee3\u7406\u662f\u5fae\u8f6f\u7684 NTLM \u3002\u552f\u4e00\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u5b89\u88c5\u4e00\u4e2a\u5bf9\u81ea\u7531\u8f6f\u4ef6\u53cb\u597d\u7684\u4ee3\u7406\uff0c\u8f6c\u53d1\u5230\u5fae\u8f6f\u4ee3\u7406\u3002 http://cntlm.sourceforge.net/ \u65e0\u6cd5\u627e\u5230vcvarsall.bat \u00b6 Python\u6a21\u5757\u90e8\u5206\u662f\u7528C\u6216C++\u5199\u7684\u3002pip\u5c1d\u8bd5\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u3002\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\u914d\u7f6eC/C++\u7f16\u8bd1\u5668\uff0c\u4f60\u5c06\u770b\u5230\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u3002 Error: Unable to find vcvarsall.bat \u4f60\u53ef\u4ee5 \u5b89\u88c5 C++ \u7f16\u8bd1\u5668 \u4f8b\u5982 MinGW \u6216 Visual C++ \u6765\u89e3\u51b3\u3002\u5fae\u8f6f\u5b9e\u9645\u4e0a\u53d1\u5e03\u4e86\u4e00\u4e2a\u4e13\u7528\u4e8ePython\u7684\u8f6f\u4ef6\uff0c\u8bd5\u4e00\u8bd5* Microsoft Visual C++ Compiler for Python 2.7 * \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5728 Christoph's \u7f51\u7ad9 \u67e5\u627e\u5305\u4f1a\u66f4\u5bb9\u6613\u3002","title":"21.\u5982\u4f55\u5728Windows\u4e0a\u5b89\u88c5pip"},{"location":"stackoverflow-python-top-qa/21/#21-windowspip","text":"","title":"21. \u5982\u4f55\u5728Windows\u4e0a\u5b89\u88c5pip"},{"location":"stackoverflow-python-top-qa/21/#_1","text":"pip \u662f easy_install \u7684\u66ff\u4ee3\u3002\u4f46\u662f\u5728Windows\u4e0a\uff0c\u6211\u5e94\u8be5\u5982\u4f55\u7528 easy_install \u5b89\u88c5 pip \u5462\uff1f\u8fd9\u91cc\u6709\u597d\u7684\u65b9\u6cd5\u5417\uff1f \u94fe\u63a5","title":"\u95ee\u9898"},{"location":"stackoverflow-python-top-qa/21/#_2","text":"","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/21/#python-279-and-34","text":"\u597d\u6d88\u606f\uff01 Python 3.4 (2014/03\u53d1\u5e03) \u548c Python 2.7.9 (2014/12\u53d1\u5e03) \u5b89\u88c5\u5305\u81ea\u5e26pip\u3002\u5bf9\u4efb\u4f55Python\u53d1\u5e03\u7248\u6765\u8bf4\u90fd\u662f\u5f88\u597d\u7684\u7279\u6027\u3002\u8fd9\u4f7f\u5f97\u6bcf\u4e2a\u4eba\u90fd\u80fd\u591f\u63a5\u89e6\u5230\u793e\u533a\u7684\u5404\u4e2a\u5e93\u3002\u521d\u5b66\u8005\u4e0d\u518d\u56e0\u4e3a\u96be\u4ee5\u5b89\u88c5\u4e8c\u88ab\u6392\u9664\u5728\u793e\u533a\u5e93\u4e4b\u5916\u3002\u548c Ruby , Node.js , Haskell , Perl , Go \u7b49\u62e5\u6709\u5f00\u6e90\u793e\u533a\u7684\u73b0\u4ee3\u8bed\u8a00\u4e00\u6837\uff0cPython\u53d1\u5e03\u7248\u81ea\u5e26\u4e86\u4e00\u4e2a\u5305\u7ba1\u7406\u5668\u3002\u611f\u8c22Python\u3002 \u5f53\u7136\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740Python\u5305\u7ba1\u7406\u5668\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u3002\u7ecf\u5386\u4ee4\u4eba\u4e0d\u60a6\u3002\u6211\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0b\u8ba8\u8bba\u8fc7\u3002 in Stack Overflow question Does Python have a package/module management system? \u3002 \u800c\u4e14\uff0c\u5bf9\u4e8e\u4f7f\u7528Python 2.7.8 \u6216\u8005\u4e4b\u524d\u7684\u7248\u672c\u7684\u6bcf\u4e00\u4e2a\u4eba\uff0c\u6ca1\u6709\u81ea\u5e26\u7684pip\u53ef\u7528\uff0c\u4ee5\u4e0b\u662f\u6559\u7a0b\u3002","title":"Python 2.7.9+ and 3.4+"},{"location":"stackoverflow-python-top-qa/21/#python-2-278-and-python-3-33","text":"","title":"Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3"},{"location":"stackoverflow-python-top-qa/21/#_3","text":"https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip : \u4e0b\u8f7d get-pip.py , \u4fdd\u5b58\u65f6\u6ce8\u610f\u540e\u7f00\u662f .py \u800c\u4e0d\u662f .txt \u3002\u7136\u540e\uff0c\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4 python get-pip.py \u4f60\u53ef\u80fd\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u53bb\u8fd0\u884c\u3002 Start a Command Prompt as an Administrator (Microsoft TechNet). \u5b89\u88c5\u4e4b\u540e\uff0c...\\Scripts\\pip.exe\u9700\u8981\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u624d\u80fd\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u3002","title":"\u5b98\u65b9\u6559\u7a0b"},{"location":"stackoverflow-python-top-qa/21/#_4","text":"\u5b98\u65b9\u6587\u6863\u8981\u6c42\u7528\u6237\u5b89\u88c5pip\u548c\u76f8\u5173\u7684\u4f9d\u8d56\uff0c\u6709\u7ecf\u9a8c\u7684\u4eba\u89c9\u5f97\u4e4f\u5473\uff0c\u65b0\u624b\u89c9\u5f97\u56f0\u96be\u3002 \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0cChristoph Gohlke\u5236\u4f5c\u4e86\u4e00\u4e2aWindows\u7684\u5b89\u88c5\u5305\uff08.msi\uff09\uff0c\u9002\u7528\u5404\u4e2a\u7248\u672c\u7684Python\uff0c\u5305\u62ec32\u4f4d\u548c64\u4f4d\u3002\u4f60\u9700\u8981\uff1a \u5b89\u88c5 setuptools \u5b89\u88c5 pip \u5bf9\u6211\u800c\u8a00\uff0c\u5b89\u88c5\u597d\u7684pip\u4f4d\u4e8e C:\\Python27\\Scripts\\pip.exe \uff0c\u5728\u4f60\u7684\u7535\u8111\u4e0a\u627e\u5230 pip.exe \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6587\u4ef6\u5939\uff08\u4f8b\u5982 C:\\Python27\\Scripts \uff09\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\u7684path\u4e2d\u3002\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u80fd\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 pip \uff0c\u8bd5\u8bd5\u5b89\u88c5\u4e00\u4e2a\u5305\uff1a pip install httpie \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u95ee\u9898\u7684\u89e3\u51b3\u529e\u6cd5\u3002","title":"\u5176\u4ed6\u65b9\u6cd5"},{"location":"stackoverflow-python-top-qa/21/#_5","text":"\u5982\u679c\u4f60\u5728\u529e\u516c\u5ba4\u91cc\u5de5\u4f5c\uff0c\u4f60\u53ef\u80fd\u7ecf\u8fc7\u4e86HTTP\u4ee3\u7406\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf http_proxy \u548c https_proxy \u3002\u5bf9\u5927\u90e8\u5206Python\u5e94\u7528\uff08\u4ee5\u53ca\u5176\u4ed6\u81ea\u7531\u8f6f\u4ef6\uff09\u6709\u7528\u3002\u4f8b\u5982\uff1a http://proxy_url:port http://username:password@proxy_url:port \u5982\u679c\u4f60\u975e\u5e38\u4e0d\u5e78\uff0c\u4ee3\u7406\u662f\u5fae\u8f6f\u7684 NTLM \u3002\u552f\u4e00\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u5b89\u88c5\u4e00\u4e2a\u5bf9\u81ea\u7531\u8f6f\u4ef6\u53cb\u597d\u7684\u4ee3\u7406\uff0c\u8f6c\u53d1\u5230\u5fae\u8f6f\u4ee3\u7406\u3002 http://cntlm.sourceforge.net/","title":"\u4ee3\u7406\u95ee\u9898"},{"location":"stackoverflow-python-top-qa/21/#vcvarsallbat","text":"Python\u6a21\u5757\u90e8\u5206\u662f\u7528C\u6216C++\u5199\u7684\u3002pip\u5c1d\u8bd5\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u3002\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\u914d\u7f6eC/C++\u7f16\u8bd1\u5668\uff0c\u4f60\u5c06\u770b\u5230\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u3002 Error: Unable to find vcvarsall.bat \u4f60\u53ef\u4ee5 \u5b89\u88c5 C++ \u7f16\u8bd1\u5668 \u4f8b\u5982 MinGW \u6216 Visual C++ \u6765\u89e3\u51b3\u3002\u5fae\u8f6f\u5b9e\u9645\u4e0a\u53d1\u5e03\u4e86\u4e00\u4e2a\u4e13\u7528\u4e8ePython\u7684\u8f6f\u4ef6\uff0c\u8bd5\u4e00\u8bd5* Microsoft Visual C++ Compiler for Python 2.7 * \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5728 Christoph's \u7f51\u7ad9 \u67e5\u627e\u5305\u4f1a\u66f4\u5bb9\u6613\u3002","title":"\u65e0\u6cd5\u627e\u5230vcvarsall.bat"},{"location":"stackoverflow-python-top-qa/22/","text":"22. \u4f7f\u7528'for'\u5faa\u73af\u8fed\u4ee3\u5b57\u5178 \u00b6 \u9898\u76ee \u00b6 \u6211\u5bf9\u4ee5\u4e0b\u4ee3\u7801\u6709\u4e9b\u7591\u60d1\uff1a d = { 'x' : 1 , 'y' : 2 , 'z' : 3 } for key in d : print key , 'corresponds to' , d [ key ] \u6211\u4e0d\u7406\u89e3\u7684\u662f key \uff0c Python\u662f\u5982\u4f55\u610f\u8bc6\u5230\u53ea\u9700\u8981\u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6\u952e\u7684\u5462\uff1f key \u5728Python\u4e2d\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8bcd\u5417\uff1f\u6216\u8005\u5b83\u53ea\u662f\u4e00\u4e2a\u53d8\u91cf\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 key \u4ec5\u4ec5\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\u3002 for key in d : \u5c06\u7b80\u5355\u5faa\u73af\u904d\u5386\u5b57\u5178\u7684\u952e\uff0c\u800c\u4e0d\u662f\u952e\u548c\u503c\u3002\u540c\u65f6\u904d\u5386\u952e\u548c\u503c\uff0c\u9700\u8981\u8fd9\u4e48\u4f7f\u7528\u3002 \u5bf9\u4e8ePython 2.x\uff1a for key , value in d . iteritems (): \u5bf9\u4e8ePython 3.x\uff1a for key , value in d . items (): \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a\u53d8\u91cf key \u6539\u4e3a poop \u3002 \u5728Python 3.x\u4e2d\uff0c iteritems() \u5df2\u7ecf\u88ab items() \u66ff\u4ee3\u4e86\uff0c\u4ec5\u8fd4\u56de\u7531\u5b57\u5178\u652f\u6301\u7684\u7c7b\u4f3c\u4e8e\u96c6\u5408\u7684\u89c6\u56fe\uff0c\u5c31\u50cf iteritems() \u4e00\u6837\uff0c\u751a\u81f3\u6027\u80fd\u66f4\u597d\u3002\u57282.7 \u4e2d\u4e5f\u53ef\u4ee5\u7528 viewitems() \u6765\u4ee3\u66ff\u3002 items() \u65b9\u6cd5\u57282\u548c3\u4e2d\u90fd\u652f\u6301\uff0c\u4f46\u662f\u57282\u4e2d\u4f1a\u8fd4\u56de\u5b57\u5178\u952e\u503c\u5bf9\u7ec4\u6210\u7684\u5217\u8868\uff0c\u8fd9\u4e2a\u5217\u8868\u4e0d\u4f1a\u53cd\u5e94\u5bf9\u5b57\u5178\u7684\u66f4\u6539\u3002\u5982\u679c\u60f3\u57283.x\u4e2d\u5b9e\u73b02.x\u4e2d\u7684\u6548\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 list(d.items()) \u3002 \u53ea\u904d\u5386\u952e\uff1a for key in d . keys (): \u53ea\u904d\u5386\u503c\uff1a for value in d . values ():","title":"22.\u4f7f\u7528'for'\u5faa\u73af\u8fed\u4ee3\u5b57\u5178"},{"location":"stackoverflow-python-top-qa/22/#22-for","text":"","title":"22. \u4f7f\u7528'for'\u5faa\u73af\u8fed\u4ee3\u5b57\u5178"},{"location":"stackoverflow-python-top-qa/22/#_1","text":"\u6211\u5bf9\u4ee5\u4e0b\u4ee3\u7801\u6709\u4e9b\u7591\u60d1\uff1a d = { 'x' : 1 , 'y' : 2 , 'z' : 3 } for key in d : print key , 'corresponds to' , d [ key ] \u6211\u4e0d\u7406\u89e3\u7684\u662f key \uff0c Python\u662f\u5982\u4f55\u610f\u8bc6\u5230\u53ea\u9700\u8981\u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6\u952e\u7684\u5462\uff1f key \u5728Python\u4e2d\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8bcd\u5417\uff1f\u6216\u8005\u5b83\u53ea\u662f\u4e00\u4e2a\u53d8\u91cf\u3002 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/22/#_2","text":"key \u4ec5\u4ec5\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\u3002 for key in d : \u5c06\u7b80\u5355\u5faa\u73af\u904d\u5386\u5b57\u5178\u7684\u952e\uff0c\u800c\u4e0d\u662f\u952e\u548c\u503c\u3002\u540c\u65f6\u904d\u5386\u952e\u548c\u503c\uff0c\u9700\u8981\u8fd9\u4e48\u4f7f\u7528\u3002 \u5bf9\u4e8ePython 2.x\uff1a for key , value in d . iteritems (): \u5bf9\u4e8ePython 3.x\uff1a for key , value in d . items (): \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a\u53d8\u91cf key \u6539\u4e3a poop \u3002 \u5728Python 3.x\u4e2d\uff0c iteritems() \u5df2\u7ecf\u88ab items() \u66ff\u4ee3\u4e86\uff0c\u4ec5\u8fd4\u56de\u7531\u5b57\u5178\u652f\u6301\u7684\u7c7b\u4f3c\u4e8e\u96c6\u5408\u7684\u89c6\u56fe\uff0c\u5c31\u50cf iteritems() \u4e00\u6837\uff0c\u751a\u81f3\u6027\u80fd\u66f4\u597d\u3002\u57282.7 \u4e2d\u4e5f\u53ef\u4ee5\u7528 viewitems() \u6765\u4ee3\u66ff\u3002 items() \u65b9\u6cd5\u57282\u548c3\u4e2d\u90fd\u652f\u6301\uff0c\u4f46\u662f\u57282\u4e2d\u4f1a\u8fd4\u56de\u5b57\u5178\u952e\u503c\u5bf9\u7ec4\u6210\u7684\u5217\u8868\uff0c\u8fd9\u4e2a\u5217\u8868\u4e0d\u4f1a\u53cd\u5e94\u5bf9\u5b57\u5178\u7684\u66f4\u6539\u3002\u5982\u679c\u60f3\u57283.x\u4e2d\u5b9e\u73b02.x\u4e2d\u7684\u6548\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 list(d.items()) \u3002 \u53ea\u904d\u5386\u952e\uff1a for key in d . keys (): \u53ea\u904d\u5386\u503c\uff1a for value in d . values ():","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/23/","text":"23. __str__ \u548c __repr__\u7684\u533a\u522b \u00b6 \u9898\u76ee \u00b6 python \u4e2d __str__ \u548c __repr__ \u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 __str__ \u548c __repr__ \u90fd\u662f\u57fa\u4e8e\u5bf9\u8c61\u72b6\u6001\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u7279\u6b8a\u65b9\u6cd5\u3002 \u5982\u679c\u7f3a\u5c11 __str__ \uff0c __repr__ \u63d0\u4f9b\u5907\u4efd\u884c\u4e3a\uff0c\u5373\u5982\u679c\u7f3a\u5c11 __str__ \uff0c __str__ \u7684\u884c\u4e3a\u4e0e __repr__ \u4e00\u81f4\u3002 \u56e0\u6b64\uff0c\u9996\u5148\u5e94\u8be5\u7f16\u5199\u4e00\u4e2a __repr__ \uff0c\u5b83\u5141\u8bb8\u4f60\u6839\u636e\u5b83\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u91cd\u65b0\u5b9e\u4f8b\u5316\u4e3a\u7b49\u4ef7\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 eval \u6216\u8005\u5728Python shell\u4e2d\u9010\u4e2a\u5b57\u7b26\u952e\u5165\u6765\u5f97\u5230\u7b49\u4ef7\u5bf9\u8c61\u3002 \u8fd9\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0 __str__ \u4f5c\u4e3a\u7528\u6237\u53ef\u8bfb\u7684\u5b9e\u4f8b\u63cf\u8ff0\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u8fd9\u6709\u5fc5\u8981\u7684\u8bdd\u3002 __str__ \u00b6 \u5982\u679c\u6253\u5370\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6216\u8005\u628a\u5bf9\u8c61\u4f20\u7ed9 format \uff0c str.format \uff0c\u5982\u679c __str__ \u65b9\u6cd5\u5b9a\u4e49\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u5426\u5219\uff0c\u4f1a\u6267\u884c __repr__ \u3002 __repr__ \u00b6 \u5185\u7f6e\u51fd\u6570 repr \u4f1a\u8c03\u7528 __repr__ \uff0c\u5f53\u4f60\u5728Python shell\u4e2d\u8ba1\u7b97\u4e00\u4e2a\u8868\u8fbe\u5f0f\u65f6\uff0c\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u5bf9\u8c61\u5728shell\u4e2d\u663e\u793a\u4e3a __repr__ \u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u3002 \u56e0\u4e3a\u5b83\u662f __str__ \u7684\u56de\u9000\uff0c\u5982\u679c\u4f60\u53ea\u80fd\u5199\u4e00\u4e2a\uff0c\u90a3\u4e48\u4e45\u5b9e\u73b0 __repr__ \u3002 \u4ee5\u4e0b\u662f repr \u51fd\u6570\u7684\u5185\u7f6e\u5e2e\u52a9\u3002 repr ( ... ) repr ( object ) -> string Return the canonical string representation of the object . For most object types , eval ( repr ( object )) == object . \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u5bf9\u8c61\uff0c\u5982\u679c\u4f60\u952e\u5165 repr \u6253\u5370\u51fa\u6765\u7684\u5185\u5bb9\uff0c\u4f60\u5e94\u8be5\u80fd\u591f\u521b\u5efa\u4e00\u4e2a\u7b49\u4ef7\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u8fd9\u5e76\u4e0d\u662fPython\u8bed\u8a00\u9ed8\u8ba4\u7684\u5b9e\u73b0\u3002 __repr__ \u7684\u9ed8\u8ba4\u5b9e\u73b0 \u00b6 __repr__ \u7684\u9ed8\u8ba4\u5b9e\u73b0( C Python source ) \u7c7b\u4f3c\u8fd9\u6837\uff1a def __repr__ ( self ): return '<{0}.{1} object at {2}>' . format ( self . __module__ , type ( self ) . __name__ , hex ( id ( self ))) \u8fd9\u610f\u5473\u7740\u9ed8\u8ba4\u6253\u5370\u51fa\u6a21\u5757\u6765\u81ea\u54ea\uff0c\u7c7b\u540d\u548c\u5185\u5b58\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff1a < __main__ . Foo object at 0x7f80665abdd0 > \u8fd9\u4e9b\u4fe1\u606f\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u7528\u8fd9\u4e9b\u4fe1\u606f\u4e5f\u4e0d\u80fd\u591f\u51c6\u786e\u5730\u521b\u5efa\u51fa\u7ed9\u5b9a\u7684\u793a\u4f8b\uff0c\u4f46\u6709\u603b\u6bd4\u6ca1\u6709\u597d\uff0c\u81f3\u5c11\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u552f\u4e00\u8bc6\u522b\u5b83\u3002 __repr__ \u6709\u4ec0\u4e48\u7528\uff1f \u00b6 \u8ba9\u6211\u4eec\u770b\u770b\u5b83\u7684\u7528\u5904\uff0c\u4f7f\u7528Python shell\u548c datatime \u5bf9\u8c61\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u5bfc\u5165 datetime \u6a21\u5757\u3002 import datetime \u5982\u679c\u6211\u4eec\u5728shell\u4e2d\u8c03\u7528 datetime.now \uff0c\u6211\u4eec\u5c06\u770b\u5230\u53ef\u4ee5\u91cd\u65b0\u521b\u5efa\u51fa\u7b49\u4ef7datetime\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u8fd9\u5c31\u662fdatetime\u7684 __repr__ \u751f\u6210\u7684\uff1a >>> datetime . datetime . now () datetime . datetime ( 2015 , 1 , 24 , 20 , 5 , 36 , 491180 ) \u5982\u679c\u6211\u4eec\u6253\u5370\u4e00\u4e2adatetime\u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u770b\u5230\u9002\u5408\u4eba\u7c7b\u9605\u8bfb\u7684\uff08ISO\u8868\u793a\uff09\u683c\u5f0f\uff0c\u8fd9\u662f\u7531datetime\u7684 __str__ \u5b9e\u73b0\u7684\uff1a >>> print ( datetime . datetime . now ()) 2015 - 01 - 24 20 : 05 : 44.977951 \u5229\u7528 __repr__ \u7684\u4fe1\u606f\u91cd\u65b0\u521b\u5efa\u51fa\u4e00\u4e2a\u5bf9\u8c61\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff0c\u7136\u540e\u6253\u5370\u5b83\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u548c\u4e0a\u9762\u793a\u4f8b\u4e00\u6837\u7684\u53ef\u8bfb\u6027\u5f3a\u7684\u8f93\u51fa\uff1a >>> the_past = datetime . datetime ( 2015 , 1 , 24 , 20 , 5 , 36 , 491180 ) >>> print ( the_past ) 2015 - 01 - 24 20 : 05 : 36.491180 \u5982\u4f55\u5b9e\u73b0\u5b83\u4eec \u00b6 \u4f60\u53ef\u80fd\u4f1a\u60f3\u5982\u4f55\u518d\u6b21\u751f\u6210\u76f8\u540c\u72b6\u6001\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff0cdatetime\u5bf9\u8c61\u7684 __repr__ \uff08 Python source \uff09\u662f\u5982\u4f55\u5b9a\u4e49\u7684\u3002\u5f88\u590d\u6742\uff0c\u56e0\u4e3a\u9700\u8981\u91cd\u5efa\u8fd9\u4e00\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\u3002 def __repr__ ( self ): \"\"\"Convert to formal string, for repr().\"\"\" L = [ self . _year , self . _month , self . _day , # These are never zero self . _hour , self . _minute , self . _second , self . _microsecond ] if L [ - 1 ] == 0 : del L [ - 1 ] if L [ - 1 ] == 0 : del L [ - 1 ] s = \", \" . join ( map ( str , L )) s = \" %s ( %s )\" % ( 'datetime.' + self . __class__ . __name__ , s ) if self . _tzinfo is not None : assert s [ - 1 :] == \")\" s = s [: - 1 ] + \", tzinfo= %r \" % self . _tzinfo + \")\" return s \u5982\u679c\u4f60\u60f3\u8ba9\u5bf9\u8c61\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u5b9e\u73b0 __str__ \u4e86\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u662fdatetime\u5bf9\u8c61\u5982\u4f55\u5b9e\u73b0 __str__ \uff0c\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6709\u8f6c\u6362\u4e3aISO\u683c\u5f0f\u7684\u51fd\u6570\u76f4\u63a5\u8c03\u7528\u3002 def __str__ ( self ): \"Convert to string, for str().\" return self . isoformat ( sep = ' ' ) \u8bbe __repr__ = __str__ \uff1f \u00b6 \u8fd9\u79cd\u505a\u6cd5\u662f\u611a\u8822\u7684\u3002 __repr__ \u662f __str__ \u7684\u56de\u9000\u884c\u4e3a\uff0c __repr__ \u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u5b9a\u4f4d\u95ee\u9898\u7684\uff0c\u5e94\u8be5\u5728 __str__ \u4e4b\u524d\u5b9e\u73b0\u3002 \u4ec5\u4ec5\u5f53\u4f60\u9700\u8981\u5bf9\u8c61\u7684\u6587\u672c\u8868\u793a\u7684\u65f6\u5019\uff0c\u624d\u9700\u8981\u5b9e\u73b0 __str__ \u3002 \u7ed3\u8bba \u00b6 \u4e3a\u4f60\u5199\u7684\u6240\u6709\u5bf9\u8c61\u5b9a\u4e49 __repr__ \uff0c\u8fd9\u6837\u4f60\u6216\u8005\u5176\u4ed6\u5f00\u53d1\u8005\u6709\u4e86\u91cd\u5efa\u8fd9\u4e2a\u5bf9\u8c61\u7684\u793a\u4f8b\u3002 \u5f53\u4f60\u9700\u8981\u4eba\u7c7b\u53ef\u9605\u8bfb\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u5019\uff0c\u5b9a\u4e49 __str__ \u3002","title":"23.__str__\u548c__repr__\u7684\u533a\u522b"},{"location":"stackoverflow-python-top-qa/23/#23-9595str9595-9595repr9595","text":"","title":"23. __str__ \u548c __repr__\u7684\u533a\u522b"},{"location":"stackoverflow-python-top-qa/23/#_1","text":"python \u4e2d __str__ \u548c __repr__ \u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/23/#_2","text":"__str__ \u548c __repr__ \u90fd\u662f\u57fa\u4e8e\u5bf9\u8c61\u72b6\u6001\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u7279\u6b8a\u65b9\u6cd5\u3002 \u5982\u679c\u7f3a\u5c11 __str__ \uff0c __repr__ \u63d0\u4f9b\u5907\u4efd\u884c\u4e3a\uff0c\u5373\u5982\u679c\u7f3a\u5c11 __str__ \uff0c __str__ \u7684\u884c\u4e3a\u4e0e __repr__ \u4e00\u81f4\u3002 \u56e0\u6b64\uff0c\u9996\u5148\u5e94\u8be5\u7f16\u5199\u4e00\u4e2a __repr__ \uff0c\u5b83\u5141\u8bb8\u4f60\u6839\u636e\u5b83\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u91cd\u65b0\u5b9e\u4f8b\u5316\u4e3a\u7b49\u4ef7\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 eval \u6216\u8005\u5728Python shell\u4e2d\u9010\u4e2a\u5b57\u7b26\u952e\u5165\u6765\u5f97\u5230\u7b49\u4ef7\u5bf9\u8c61\u3002 \u8fd9\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0 __str__ \u4f5c\u4e3a\u7528\u6237\u53ef\u8bfb\u7684\u5b9e\u4f8b\u63cf\u8ff0\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u8fd9\u6709\u5fc5\u8981\u7684\u8bdd\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/23/#__str__","text":"\u5982\u679c\u6253\u5370\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6216\u8005\u628a\u5bf9\u8c61\u4f20\u7ed9 format \uff0c str.format \uff0c\u5982\u679c __str__ \u65b9\u6cd5\u5b9a\u4e49\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u5426\u5219\uff0c\u4f1a\u6267\u884c __repr__ \u3002","title":"__str__"},{"location":"stackoverflow-python-top-qa/23/#__repr__","text":"\u5185\u7f6e\u51fd\u6570 repr \u4f1a\u8c03\u7528 __repr__ \uff0c\u5f53\u4f60\u5728Python shell\u4e2d\u8ba1\u7b97\u4e00\u4e2a\u8868\u8fbe\u5f0f\u65f6\uff0c\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u5bf9\u8c61\u5728shell\u4e2d\u663e\u793a\u4e3a __repr__ \u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u3002 \u56e0\u4e3a\u5b83\u662f __str__ \u7684\u56de\u9000\uff0c\u5982\u679c\u4f60\u53ea\u80fd\u5199\u4e00\u4e2a\uff0c\u90a3\u4e48\u4e45\u5b9e\u73b0 __repr__ \u3002 \u4ee5\u4e0b\u662f repr \u51fd\u6570\u7684\u5185\u7f6e\u5e2e\u52a9\u3002 repr ( ... ) repr ( object ) -> string Return the canonical string representation of the object . For most object types , eval ( repr ( object )) == object . \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u5bf9\u8c61\uff0c\u5982\u679c\u4f60\u952e\u5165 repr \u6253\u5370\u51fa\u6765\u7684\u5185\u5bb9\uff0c\u4f60\u5e94\u8be5\u80fd\u591f\u521b\u5efa\u4e00\u4e2a\u7b49\u4ef7\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u8fd9\u5e76\u4e0d\u662fPython\u8bed\u8a00\u9ed8\u8ba4\u7684\u5b9e\u73b0\u3002","title":"__repr__"},{"location":"stackoverflow-python-top-qa/23/#__repr___1","text":"__repr__ \u7684\u9ed8\u8ba4\u5b9e\u73b0( C Python source ) \u7c7b\u4f3c\u8fd9\u6837\uff1a def __repr__ ( self ): return '<{0}.{1} object at {2}>' . format ( self . __module__ , type ( self ) . __name__ , hex ( id ( self ))) \u8fd9\u610f\u5473\u7740\u9ed8\u8ba4\u6253\u5370\u51fa\u6a21\u5757\u6765\u81ea\u54ea\uff0c\u7c7b\u540d\u548c\u5185\u5b58\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff1a < __main__ . Foo object at 0x7f80665abdd0 > \u8fd9\u4e9b\u4fe1\u606f\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u7528\u8fd9\u4e9b\u4fe1\u606f\u4e5f\u4e0d\u80fd\u591f\u51c6\u786e\u5730\u521b\u5efa\u51fa\u7ed9\u5b9a\u7684\u793a\u4f8b\uff0c\u4f46\u6709\u603b\u6bd4\u6ca1\u6709\u597d\uff0c\u81f3\u5c11\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u552f\u4e00\u8bc6\u522b\u5b83\u3002","title":"__repr__\u7684\u9ed8\u8ba4\u5b9e\u73b0"},{"location":"stackoverflow-python-top-qa/23/#__repr___2","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5b83\u7684\u7528\u5904\uff0c\u4f7f\u7528Python shell\u548c datatime \u5bf9\u8c61\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u5bfc\u5165 datetime \u6a21\u5757\u3002 import datetime \u5982\u679c\u6211\u4eec\u5728shell\u4e2d\u8c03\u7528 datetime.now \uff0c\u6211\u4eec\u5c06\u770b\u5230\u53ef\u4ee5\u91cd\u65b0\u521b\u5efa\u51fa\u7b49\u4ef7datetime\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u8fd9\u5c31\u662fdatetime\u7684 __repr__ \u751f\u6210\u7684\uff1a >>> datetime . datetime . now () datetime . datetime ( 2015 , 1 , 24 , 20 , 5 , 36 , 491180 ) \u5982\u679c\u6211\u4eec\u6253\u5370\u4e00\u4e2adatetime\u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u770b\u5230\u9002\u5408\u4eba\u7c7b\u9605\u8bfb\u7684\uff08ISO\u8868\u793a\uff09\u683c\u5f0f\uff0c\u8fd9\u662f\u7531datetime\u7684 __str__ \u5b9e\u73b0\u7684\uff1a >>> print ( datetime . datetime . now ()) 2015 - 01 - 24 20 : 05 : 44.977951 \u5229\u7528 __repr__ \u7684\u4fe1\u606f\u91cd\u65b0\u521b\u5efa\u51fa\u4e00\u4e2a\u5bf9\u8c61\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff0c\u7136\u540e\u6253\u5370\u5b83\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u548c\u4e0a\u9762\u793a\u4f8b\u4e00\u6837\u7684\u53ef\u8bfb\u6027\u5f3a\u7684\u8f93\u51fa\uff1a >>> the_past = datetime . datetime ( 2015 , 1 , 24 , 20 , 5 , 36 , 491180 ) >>> print ( the_past ) 2015 - 01 - 24 20 : 05 : 36.491180","title":"__repr__ \u6709\u4ec0\u4e48\u7528\uff1f"},{"location":"stackoverflow-python-top-qa/23/#_3","text":"\u4f60\u53ef\u80fd\u4f1a\u60f3\u5982\u4f55\u518d\u6b21\u751f\u6210\u76f8\u540c\u72b6\u6001\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff0cdatetime\u5bf9\u8c61\u7684 __repr__ \uff08 Python source \uff09\u662f\u5982\u4f55\u5b9a\u4e49\u7684\u3002\u5f88\u590d\u6742\uff0c\u56e0\u4e3a\u9700\u8981\u91cd\u5efa\u8fd9\u4e00\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\u3002 def __repr__ ( self ): \"\"\"Convert to formal string, for repr().\"\"\" L = [ self . _year , self . _month , self . _day , # These are never zero self . _hour , self . _minute , self . _second , self . _microsecond ] if L [ - 1 ] == 0 : del L [ - 1 ] if L [ - 1 ] == 0 : del L [ - 1 ] s = \", \" . join ( map ( str , L )) s = \" %s ( %s )\" % ( 'datetime.' + self . __class__ . __name__ , s ) if self . _tzinfo is not None : assert s [ - 1 :] == \")\" s = s [: - 1 ] + \", tzinfo= %r \" % self . _tzinfo + \")\" return s \u5982\u679c\u4f60\u60f3\u8ba9\u5bf9\u8c61\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u5b9e\u73b0 __str__ \u4e86\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u662fdatetime\u5bf9\u8c61\u5982\u4f55\u5b9e\u73b0 __str__ \uff0c\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6709\u8f6c\u6362\u4e3aISO\u683c\u5f0f\u7684\u51fd\u6570\u76f4\u63a5\u8c03\u7528\u3002 def __str__ ( self ): \"Convert to string, for str().\" return self . isoformat ( sep = ' ' )","title":"\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec"},{"location":"stackoverflow-python-top-qa/23/#__repr____str__","text":"\u8fd9\u79cd\u505a\u6cd5\u662f\u611a\u8822\u7684\u3002 __repr__ \u662f __str__ \u7684\u56de\u9000\u884c\u4e3a\uff0c __repr__ \u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u5b9a\u4f4d\u95ee\u9898\u7684\uff0c\u5e94\u8be5\u5728 __str__ \u4e4b\u524d\u5b9e\u73b0\u3002 \u4ec5\u4ec5\u5f53\u4f60\u9700\u8981\u5bf9\u8c61\u7684\u6587\u672c\u8868\u793a\u7684\u65f6\u5019\uff0c\u624d\u9700\u8981\u5b9e\u73b0 __str__ \u3002","title":"\u8bbe__repr__=__str__\uff1f"},{"location":"stackoverflow-python-top-qa/23/#_4","text":"\u4e3a\u4f60\u5199\u7684\u6240\u6709\u5bf9\u8c61\u5b9a\u4e49 __repr__ \uff0c\u8fd9\u6837\u4f60\u6216\u8005\u5176\u4ed6\u5f00\u53d1\u8005\u6709\u4e86\u91cd\u5efa\u8fd9\u4e2a\u5bf9\u8c61\u7684\u793a\u4f8b\u3002 \u5f53\u4f60\u9700\u8981\u4eba\u7c7b\u53ef\u9605\u8bfb\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u5019\uff0c\u5b9a\u4e49 __str__ \u3002","title":"\u7ed3\u8bba"},{"location":"stackoverflow-python-top-qa/24/","text":"24. Python\u4e2d\u5982\u4f55\u5c55\u5f00\u5d4c\u5957\u5217\u8868 \u00b6 \u9898\u76ee \u00b6 \u6211\u60f3\u77e5\u9053Python\u4e2d\u662f\u5426\u6709\u4ec0\u4e48\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u4ee5\u5c55\u5f00\u5d4c\u5957\u5217\u8868\u3002 \u6211\u53ef\u4ee5\u7528\u5faa\u73af\u5b9e\u73b0\uff0c\u4f46\u662f\u6709\u6ca1\u6709\u66f4\u9177\u7684\u4e00\u884c\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u6211\u5c1d\u8bd5\u4e86*reduce*\uff0c\u4f46\u662f\u5931\u8d25\u4e86\u3002 \u94fe\u63a5 \u4ee3\u7801\uff1a l = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 ], [ 8 , 9 ]] reduce ( lambda x , y : x . extend ( y ), l ) \u9519\u8bef\u4fe1\u606f\uff1a Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 1 , in < lambda > AttributeError : 'NoneType' object has no attribute 'extend' \u56de\u7b54\u4e00 \u00b6 flat_list = [ item for sublist in l for item in sublist ] \u7b49\u4ef7\u4e8e\uff1a for sublist in l : for item in sublist : flat_list . append ( item ) \u901f\u5ea6\u5f88\u5feb\u3002( l \u662f\u5c06\u8981\u88ab\u5c55\u5f00\u7684\u5d4c\u5957\u5217\u8868) \u8fd9\u91cc\u662f\u5bf9\u5e94\u7684\u51fd\u6570\uff1a flatten = lambda l : [ item for sublist in l for item in sublist ] \u53e3\u8bf4\u65e0\u51ed\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 timeit \u6a21\u5757\u6d4b\u8bd5\uff1a $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]' 10000 loops , best of 3 : 143 usec per loop $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])' 1000 loops , best of 3 : 969 usec per loop $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)' 1000 loops , best of 3 : 1.1 msec per loop \u56de\u7b54\u4e8c \u00b6 \u53ef\u4ee5\u4f7f\u7528 itertools.chain() : >>> import itertools >>> list2d = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ], [ 7 ], [ 8 , 9 ]] >>> merged = list ( itertools . chain ( * list2d )) Python >= 2.6\uff0c\u4f7f\u7528 itertools.chain.from_iterable() \uff0c\u4e0d\u7528\u5c55\u5f00\u5217\u8868\u3002 >>> import itertools >>> list2d = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ], [ 7 ], [ 8 , 9 ]] >>> merged = list ( itertools . chain . from_iterable ( list2d )) \u8fd9\u79cd\u65b9\u6cd5\u6bd4 [item for sublist in l for item in sublist] \u53ef\u8bfb\u6027\u66f4\u597d\uff0c\u901f\u5ea6\u4e5f\u66f4\u5feb\uff1a [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99;import itertools' 'list(itertools.chain.from_iterable(l))' 10000 loops , best of 3 : 24.2 usec per loop [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]' 10000 loops , best of 3 : 45.2 usec per loop [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])' 1000 loops , best of 3 : 488 usec per loop [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)' 1000 loops , best of 3 : 522 usec per loop [ me @home ] $ python -- version Python 2.7 . 3","title":"24.Python\u4e2d\u5982\u4f55\u5c55\u5f00\u5d4c\u5957\u5217\u8868"},{"location":"stackoverflow-python-top-qa/24/#24-python","text":"","title":"24. Python\u4e2d\u5982\u4f55\u5c55\u5f00\u5d4c\u5957\u5217\u8868"},{"location":"stackoverflow-python-top-qa/24/#_1","text":"\u6211\u60f3\u77e5\u9053Python\u4e2d\u662f\u5426\u6709\u4ec0\u4e48\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u4ee5\u5c55\u5f00\u5d4c\u5957\u5217\u8868\u3002 \u6211\u53ef\u4ee5\u7528\u5faa\u73af\u5b9e\u73b0\uff0c\u4f46\u662f\u6709\u6ca1\u6709\u66f4\u9177\u7684\u4e00\u884c\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u6211\u5c1d\u8bd5\u4e86*reduce*\uff0c\u4f46\u662f\u5931\u8d25\u4e86\u3002 \u94fe\u63a5 \u4ee3\u7801\uff1a l = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 ], [ 8 , 9 ]] reduce ( lambda x , y : x . extend ( y ), l ) \u9519\u8bef\u4fe1\u606f\uff1a Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 1 , in < lambda > AttributeError : 'NoneType' object has no attribute 'extend'","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/24/#_2","text":"flat_list = [ item for sublist in l for item in sublist ] \u7b49\u4ef7\u4e8e\uff1a for sublist in l : for item in sublist : flat_list . append ( item ) \u901f\u5ea6\u5f88\u5feb\u3002( l \u662f\u5c06\u8981\u88ab\u5c55\u5f00\u7684\u5d4c\u5957\u5217\u8868) \u8fd9\u91cc\u662f\u5bf9\u5e94\u7684\u51fd\u6570\uff1a flatten = lambda l : [ item for sublist in l for item in sublist ] \u53e3\u8bf4\u65e0\u51ed\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 timeit \u6a21\u5757\u6d4b\u8bd5\uff1a $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]' 10000 loops , best of 3 : 143 usec per loop $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])' 1000 loops , best of 3 : 969 usec per loop $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)' 1000 loops , best of 3 : 1.1 msec per loop","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/24/#_3","text":"\u53ef\u4ee5\u4f7f\u7528 itertools.chain() : >>> import itertools >>> list2d = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ], [ 7 ], [ 8 , 9 ]] >>> merged = list ( itertools . chain ( * list2d )) Python >= 2.6\uff0c\u4f7f\u7528 itertools.chain.from_iterable() \uff0c\u4e0d\u7528\u5c55\u5f00\u5217\u8868\u3002 >>> import itertools >>> list2d = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ], [ 7 ], [ 8 , 9 ]] >>> merged = list ( itertools . chain . from_iterable ( list2d )) \u8fd9\u79cd\u65b9\u6cd5\u6bd4 [item for sublist in l for item in sublist] \u53ef\u8bfb\u6027\u66f4\u597d\uff0c\u901f\u5ea6\u4e5f\u66f4\u5feb\uff1a [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99;import itertools' 'list(itertools.chain.from_iterable(l))' 10000 loops , best of 3 : 24.2 usec per loop [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]' 10000 loops , best of 3 : 45.2 usec per loop [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])' 1000 loops , best of 3 : 488 usec per loop [ me @home ] $ python - mtimeit - s 'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)' 1000 loops , best of 3 : 522 usec per loop [ me @home ] $ python -- version Python 2.7 . 3","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/25/","text":"25. \u6700\u5c0f\u7ecf\u9a8c\u539f\u5219\uff08POLA\uff09\u4e0e\u53ef\u53d8\u9ed8\u8ba4\u53c2\u6570 \u00b6 \u9898\u76ee \u00b6 \u4efb\u4f55\u957f\u65f6\u95f4\u5b66\u4e60Python\u7684\u4eba\u90fd\u4f1a\u9047\u5230\u4e0b\u9762\u7684\u95ee\u9898\u3002 def foo ( a = []): a . append ( 5 ) return a Python\u521d\u5b66\u8005\u671f\u671b\u8fd9\u4e2a\u51fd\u6570\u603b\u662f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff1a[5]\uff0c\u7ed3\u679c\u5e76\u975e\u5982\u6b64\u3002 >>> foo () [ 5 ] >>> foo () [ 5 , 5 ] >>> foo () [ 5 , 5 , 5 ] >>> foo () [ 5 , 5 , 5 , 5 ] >>> foo () \u6211\u7684\u4e3b\u7ba1\u66fe\u9047\u5230\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u79f0\u5176\u4e3a\u8bed\u8a00\u7684\u201c\u620f\u5267\u6027\u8bbe\u8ba1\u7f3a\u9677\u201d\u3002\u6211\u56de\u7b54\u8bf4\u8fd9\u4e2a\u884c\u4e3a\u53ef\u80fd\u53e6\u6709\u6df1\u610f\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u5185\u90e8\u5b9e\u73b0\uff0c\u90a3\u786e\u5b9e\u4ee4\u4eba\u8d39\u89e3\u3002\u4f46\u662f\uff0c\u6211\u6ca1\u6cd5\u89e3\u91ca\uff1a\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u7ed1\u5b9a\u9ed8\u8ba4\u53c2\u6570\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f\u5728\u51fd\u6570\u6267\u884c\u65f6\uff1f\u6211\u6000\u7591\u8fd9\u79cd\u65b9\u5f0f\u662f\u5426\u5177\u6709\u5b9e\u9645\u7528\u5904\uff08\u5c31\u5982\u5728C\u4e2d\u4f7f\u7528\u9759\u6001\u53d8\u91cf\u800c\u6ca1\u6709\u5f15\u53d1bug\uff09\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\uff1a >>> def a (): ... print ( \"a executed\" ) ... return [] ... >>> >>> def b ( x = a ()): ... x . append ( 5 ) ... print ( x ) ... a executed >>> b () [ 5 ] >>> b () [ 5 , 5 ] \u9ed8\u8ba4\u53c2\u6570\u5728\u51fd\u6570\u5b9a\u4e49\u65f6\u5c31\u5df2\u7ecf\u8ba1\u7b97\u597d\u4e86\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u8bbe\u8ba1\u7f3a\u9677\uff0c\u800c\u4e14\u4e0e\u5185\u90e8\u5b9e\u73b0\u3001\u6027\u80fd\u65e0\u5173\u3002 \u8fd9\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5728Python\u4e2d\u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11\uff0c\u800c\u4e0d\u53ea\u662f\u4ee3\u7801\u7247\u6bb5\u3002 \u7ee7\u7eed\u6df1\u5165\u601d\u8003\uff0c\u4f60\u4f1a\u89c9\u5f97\u8fd9\u662f\u5408\u7406\u7684\uff1a\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61\uff0c\u5728\u5b9a\u4e49\u65f6\u88ab\u6267\u884c\u5f97\u5230\u7684\u5bf9\u8c61\uff1b\u9ed8\u8ba4\u53c2\u6570\u7c7b\u4f3c\u201c\u6210\u5458\u6570\u636e\u201d\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\u72b6\u6001\u5728\u591a\u6b21\u8c03\u7528\u540e\u4f1a\u53d1\u751f\u6539\u53d8\u2014\u2014\u5c31\u5982\u5728\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\u91cc\u4e00\u6837\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0cEffbot\u5728 Default Parameter Values in Python \u5b8c\u7f8e\u5730\u89e3\u91ca\u4e86\u8fd9\u79cd\u884c\u4e3a\u7684\u539f\u56e0\u3002 \u6211\u89c9\u5f97\u8fd9\u7bc7\u6587\u7ae0\u7b80\u6d01\u660e\u4e86\uff0c\u5982\u679c\u60f3\u5bf9\u51fd\u6570\u5bf9\u8c61\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u6709\u66f4\u597d\u7684\u7406\u89e3\uff0c\u4e5f\u5efa\u8bae\u9605\u8bfb\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837 \u00b6 \u9ed8\u8ba4\u53c2\u6570\u503c\u4f1a\u88ab\u8ba1\u7b97\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u5c5e\u7684 def \u8bed\u53e5\u88ab\u6267\u884c\u3002 def \u662fPython\u4e2d\u7684\u53ef\u6267\u884c\u8bed\u53e5\uff0c\u800c\u4e14\u9ed8\u8ba4\u53c2\u6570\u662f\u5728 def \u8bed\u53e5\u73af\u5883\u91cc\u88ab\u8ba1\u7b97\u3002\u5982\u679c\u6267\u884c def \u8bed\u53e5\u591a\u6b21\uff0c\u6bcf\u6b21\u5b83\u5c06\u4f1a\u4ea7\u751f\u65b0\u7684\u51fd\u6570\u5bf9\u8c61\uff08\u9ed8\u8ba4\u53c2\u6570\u4e5f\u4f1a\u91cd\u65b0\u8ba1\u7b97\uff09 \u66ff\u4ee3\u65b9\u6cd5 \u00b6 \u4f7f\u7528\u5360\u4f4d\u7b26\u4ee3\u66ff\u4fee\u6539\u9ed8\u8ba4\u503c\uff0c None \u662f\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 def myfunc ( value = None ): if value is None : value = [] # modify value here \u5177\u4f53\u662f\u600e\u4e48\u6267\u884c\u7684 \u00b6 \u5f53Python\u6267\u884c def \u8bed\u53e5\u65f6\uff0c\u5b83\u9700\u8981\u4e00\u4e9b\u5df2\u7ecf\u751f\u6210\u7684\u90e8\u5206\uff08\u5305\u62ec\u51fd\u6570\u4f53\u548c\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7684\u7f16\u8bd1\u4ee3\u7801\uff09\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u5bf9\u8c61\u3002\u9ed8\u8ba4\u53c2\u6570\u4e5f\u662f\u5728\u8fd9\u65f6\u5019\u88ab\u8ba1\u7b97\u7684\u3002 \u5404\u4e2a\u90e8\u5206\u4f5c\u4e3a\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\uff1a >>> function . func_name 'function' >>> function . func_code < code object function at 00 BEC770 , file \"<stdin>\" , line 1 > >>> function . func_defaults ([ 1 , 1 , 1 ],) >>> function . func_globals { 'function' : < function function at 0x00BF1C30 > , '__builtins__' : < module '__builtin__' ( built - in ) > , '__name__' : '__main__' , '__doc__' : None } \u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5230\u9ed8\u8ba4\u53c2\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u6539\u53d8\u5b83\u4eec >>> function . func_defaults [ 0 ][:] = [] >>> function () [ 1 ] >>> function . func_defaults ([ 1 ],) \u53e6\u4e00\u79cd\u91cd\u7f6e\u9ed8\u8ba4\u53c2\u6570\u7684\u65b9\u6cd5\u65f6\u7b80\u5355\u5730\u91cd\u65b0\u6267\u884c\u76f8\u540c\u7684 def \u8bed\u53e5\u3002Python\u5c06\u4f1a\u521b\u5efa\u521b\u5efa\u65b0\u7684\u7ed1\u5b9a\u7ed9\u8fd9\u4e2a\u51fd\u6570\u5bf9\u8c61\uff0c\u91cd\u65b0\u8ba1\u7b97\u9ed8\u8ba4\u53c2\u6570\uff0c\u50cf\u4e4b\u524d\u4e00\u6837\u5c06\u51fd\u6570\u5bf9\u8c61\u8d4b\u503c\u7ed9\u540c\u4e00\u4e2a\u53d8\u91cf\u3002\u4f46\u662f\u8bdd\u8bf4\u56de\u6765\uff0c\u5f53\u4e14\u4ec5\u5f53\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\u65f6\u624d\u8fd9\u4e48\u53bb\u4f7f\u7528\u3002","title":"25.\u6700\u5c0f\u7ecf\u9a8c\u539f\u5219\uff08POLA\uff09\u4e0e\u53ef\u53d8\u9ed8\u8ba4\u53c2\u6570"},{"location":"stackoverflow-python-top-qa/25/#25-pola","text":"","title":"25. \u6700\u5c0f\u7ecf\u9a8c\u539f\u5219\uff08POLA\uff09\u4e0e\u53ef\u53d8\u9ed8\u8ba4\u53c2\u6570"},{"location":"stackoverflow-python-top-qa/25/#_1","text":"\u4efb\u4f55\u957f\u65f6\u95f4\u5b66\u4e60Python\u7684\u4eba\u90fd\u4f1a\u9047\u5230\u4e0b\u9762\u7684\u95ee\u9898\u3002 def foo ( a = []): a . append ( 5 ) return a Python\u521d\u5b66\u8005\u671f\u671b\u8fd9\u4e2a\u51fd\u6570\u603b\u662f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff1a[5]\uff0c\u7ed3\u679c\u5e76\u975e\u5982\u6b64\u3002 >>> foo () [ 5 ] >>> foo () [ 5 , 5 ] >>> foo () [ 5 , 5 , 5 ] >>> foo () [ 5 , 5 , 5 , 5 ] >>> foo () \u6211\u7684\u4e3b\u7ba1\u66fe\u9047\u5230\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u79f0\u5176\u4e3a\u8bed\u8a00\u7684\u201c\u620f\u5267\u6027\u8bbe\u8ba1\u7f3a\u9677\u201d\u3002\u6211\u56de\u7b54\u8bf4\u8fd9\u4e2a\u884c\u4e3a\u53ef\u80fd\u53e6\u6709\u6df1\u610f\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u5185\u90e8\u5b9e\u73b0\uff0c\u90a3\u786e\u5b9e\u4ee4\u4eba\u8d39\u89e3\u3002\u4f46\u662f\uff0c\u6211\u6ca1\u6cd5\u89e3\u91ca\uff1a\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u7ed1\u5b9a\u9ed8\u8ba4\u53c2\u6570\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f\u5728\u51fd\u6570\u6267\u884c\u65f6\uff1f\u6211\u6000\u7591\u8fd9\u79cd\u65b9\u5f0f\u662f\u5426\u5177\u6709\u5b9e\u9645\u7528\u5904\uff08\u5c31\u5982\u5728C\u4e2d\u4f7f\u7528\u9759\u6001\u53d8\u91cf\u800c\u6ca1\u6709\u5f15\u53d1bug\uff09\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\uff1a >>> def a (): ... print ( \"a executed\" ) ... return [] ... >>> >>> def b ( x = a ()): ... x . append ( 5 ) ... print ( x ) ... a executed >>> b () [ 5 ] >>> b () [ 5 , 5 ] \u9ed8\u8ba4\u53c2\u6570\u5728\u51fd\u6570\u5b9a\u4e49\u65f6\u5c31\u5df2\u7ecf\u8ba1\u7b97\u597d\u4e86\u3002 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/25/#_2","text":"\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u8bbe\u8ba1\u7f3a\u9677\uff0c\u800c\u4e14\u4e0e\u5185\u90e8\u5b9e\u73b0\u3001\u6027\u80fd\u65e0\u5173\u3002 \u8fd9\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5728Python\u4e2d\u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11\uff0c\u800c\u4e0d\u53ea\u662f\u4ee3\u7801\u7247\u6bb5\u3002 \u7ee7\u7eed\u6df1\u5165\u601d\u8003\uff0c\u4f60\u4f1a\u89c9\u5f97\u8fd9\u662f\u5408\u7406\u7684\uff1a\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61\uff0c\u5728\u5b9a\u4e49\u65f6\u88ab\u6267\u884c\u5f97\u5230\u7684\u5bf9\u8c61\uff1b\u9ed8\u8ba4\u53c2\u6570\u7c7b\u4f3c\u201c\u6210\u5458\u6570\u636e\u201d\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\u72b6\u6001\u5728\u591a\u6b21\u8c03\u7528\u540e\u4f1a\u53d1\u751f\u6539\u53d8\u2014\u2014\u5c31\u5982\u5728\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\u91cc\u4e00\u6837\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0cEffbot\u5728 Default Parameter Values in Python \u5b8c\u7f8e\u5730\u89e3\u91ca\u4e86\u8fd9\u79cd\u884c\u4e3a\u7684\u539f\u56e0\u3002 \u6211\u89c9\u5f97\u8fd9\u7bc7\u6587\u7ae0\u7b80\u6d01\u660e\u4e86\uff0c\u5982\u679c\u60f3\u5bf9\u51fd\u6570\u5bf9\u8c61\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u6709\u66f4\u597d\u7684\u7406\u89e3\uff0c\u4e5f\u5efa\u8bae\u9605\u8bfb\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/25/#_3","text":"\u9ed8\u8ba4\u53c2\u6570\u503c\u4f1a\u88ab\u8ba1\u7b97\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u5c5e\u7684 def \u8bed\u53e5\u88ab\u6267\u884c\u3002 def \u662fPython\u4e2d\u7684\u53ef\u6267\u884c\u8bed\u53e5\uff0c\u800c\u4e14\u9ed8\u8ba4\u53c2\u6570\u662f\u5728 def \u8bed\u53e5\u73af\u5883\u91cc\u88ab\u8ba1\u7b97\u3002\u5982\u679c\u6267\u884c def \u8bed\u53e5\u591a\u6b21\uff0c\u6bcf\u6b21\u5b83\u5c06\u4f1a\u4ea7\u751f\u65b0\u7684\u51fd\u6570\u5bf9\u8c61\uff08\u9ed8\u8ba4\u53c2\u6570\u4e5f\u4f1a\u91cd\u65b0\u8ba1\u7b97\uff09","title":"\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837"},{"location":"stackoverflow-python-top-qa/25/#_4","text":"\u4f7f\u7528\u5360\u4f4d\u7b26\u4ee3\u66ff\u4fee\u6539\u9ed8\u8ba4\u503c\uff0c None \u662f\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 def myfunc ( value = None ): if value is None : value = [] # modify value here","title":"\u66ff\u4ee3\u65b9\u6cd5"},{"location":"stackoverflow-python-top-qa/25/#_5","text":"\u5f53Python\u6267\u884c def \u8bed\u53e5\u65f6\uff0c\u5b83\u9700\u8981\u4e00\u4e9b\u5df2\u7ecf\u751f\u6210\u7684\u90e8\u5206\uff08\u5305\u62ec\u51fd\u6570\u4f53\u548c\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7684\u7f16\u8bd1\u4ee3\u7801\uff09\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u5bf9\u8c61\u3002\u9ed8\u8ba4\u53c2\u6570\u4e5f\u662f\u5728\u8fd9\u65f6\u5019\u88ab\u8ba1\u7b97\u7684\u3002 \u5404\u4e2a\u90e8\u5206\u4f5c\u4e3a\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\uff1a >>> function . func_name 'function' >>> function . func_code < code object function at 00 BEC770 , file \"<stdin>\" , line 1 > >>> function . func_defaults ([ 1 , 1 , 1 ],) >>> function . func_globals { 'function' : < function function at 0x00BF1C30 > , '__builtins__' : < module '__builtin__' ( built - in ) > , '__name__' : '__main__' , '__doc__' : None } \u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5230\u9ed8\u8ba4\u53c2\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u6539\u53d8\u5b83\u4eec >>> function . func_defaults [ 0 ][:] = [] >>> function () [ 1 ] >>> function . func_defaults ([ 1 ],) \u53e6\u4e00\u79cd\u91cd\u7f6e\u9ed8\u8ba4\u53c2\u6570\u7684\u65b9\u6cd5\u65f6\u7b80\u5355\u5730\u91cd\u65b0\u6267\u884c\u76f8\u540c\u7684 def \u8bed\u53e5\u3002Python\u5c06\u4f1a\u521b\u5efa\u521b\u5efa\u65b0\u7684\u7ed1\u5b9a\u7ed9\u8fd9\u4e2a\u51fd\u6570\u5bf9\u8c61\uff0c\u91cd\u65b0\u8ba1\u7b97\u9ed8\u8ba4\u53c2\u6570\uff0c\u50cf\u4e4b\u524d\u4e00\u6837\u5c06\u51fd\u6570\u5bf9\u8c61\u8d4b\u503c\u7ed9\u540c\u4e00\u4e2a\u53d8\u91cf\u3002\u4f46\u662f\u8bdd\u8bf4\u56de\u6765\uff0c\u5f53\u4e14\u4ec5\u5f53\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\u65f6\u624d\u8fd9\u4e48\u53bb\u4f7f\u7528\u3002","title":"\u5177\u4f53\u662f\u600e\u4e48\u6267\u884c\u7684"},{"location":"stackoverflow-python-top-qa/26/","text":"26. \u5982\u4f55\u6309\u5f15\u7528\u4f20\u503c \u00b6 \u9898\u76ee \u00b6 \u5173\u4e8e\u53c2\u6570\u662f\u6309\u503c\u4f20\u9012\u8fd8\u662f\u6309\u5f15\u7528\u4f20\u9012\uff0cPython\u6587\u6863\u5199\u5f97\u4e0d\u591f\u6e05\u6670\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u503c Original \u5e76\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002 class PassByReference : def __init__ ( self ): self . variable = 'Original' self . change ( self . variable ) print ( self . variable ) def change ( self , var ): var = 'Changed' \u6709\u4ec0\u4e48\u65b9\u5f0f\u53ef\u4ee5\u771f\u6b63\u6309\u5f15\u7528\u4f20\u9012\u5462\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u53c2\u6570\u662f\u6309 passed by assignment \uff0c\u8fd9\u53e5\u8bdd\u67092\u5c42\u542b\u4e49\uff1a \u4f20\u9012\u7684\u53c2\u6570\u7684\u786e\u662f\u5bf9\u8c61\u7684\u5f15\u7528\uff08\u4f46\u662f\u5f15\u7528\u662f\u6309\u503c\u4f20\u9012\u7684\uff09\u3002 \u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u662f\u53ef\u53d8\u7684\uff0c\u4e00\u4e9b\u4e0d\u662f\u3002 \u56e0\u6b64\uff1a \u5982\u679c\u7ed9\u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5f97\u5230\u4e86\u6307\u5411\u539f\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f60\u53ef\u4ee5\u968f\u610f\u6539\u53d8\u5b83\u3002\u4f46\u662f\u5982\u679c\u4f60\u5728\u65b9\u6cd5\u5185\u628a\u5f15\u7528\u91cd\u65b0\u7ed1\u5b9a\u7ed9\u5176\u4ed6\u53d8\u91cf\uff0c\u5916\u90e8\u5e76\u4e0d\u77e5\u9053\uff0c\u8fd9\u4e48\u505a\u4e4b\u540e\uff0c\u5916\u90e8\u7684\u5f15\u7528\u4ecd\u7136\u6307\u5411\u539f\u6765\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u7ed9\u65b9\u6cd5\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4f60\u4ecd\u7136\u4e0d\u80fd\u91cd\u7ed1\u5b9a\u5916\u90e8\u7684\u5f15\u7528\uff0c\u56e0\u4e3a\u4f60\u751a\u81f3\u4e0d\u80fd\u591f\u6539\u53d8\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u4e3e\u4e00\u4e9b\u4f8b\u5b50\uff1a List - \u53ef\u53d8\u7c7b\u578b \u00b6 \u6211\u4eec\u5c1d\u8bd5\u6539\u53d8\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u5217\u8868 \u00b6 def try_to_change_list_contents ( the_list ): print ( 'got' , the_list ) the_list . append ( 'four' ) print ( 'changed to' , the_list ) outer_list = [ 'one' , 'two' , 'three' ] print ( 'before, outer_list =' , outer_list ) try_to_change_list_contents ( outer_list ) print ( 'after, outer_list =' , outer_list ) \u8f93\u51fa\uff1a before , outer_list = [ 'one' , 'two' , 'three' ] got [ 'one' , 'two' , 'three' ] changed to [ 'one' , 'two' , 'three' , 'four' ] after , outer_list = [ 'one' , 'two' , 'three' , 'four' ] \u56e0\u4e3a\u4f20\u9012\u7684\u53c2\u6570\u662f outer_list \u7684\u5f15\u7528\uff0c\u5e76\u4e0d\u662f\u5b83\u7684\u62f7\u8d1d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6539\u53d8\u5217\u8868\u7684\u65b9\u6cd5\u53bb\u6539\u53d8\u5b83\uff0c\u5e76\u4e14\u6539\u53d8\u5c06\u53cd\u5e94\u5230\u5916\u90e8\u7684\u3002 \u5982\u679c\u5c1d\u8bd5\u6539\u53d8\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u5f15\u7528\u5462\uff1f \u00b6 def try_to_change_list_reference ( the_list ): print ( 'got' , the_list ) the_list = [ 'and' , 'we' , 'can' , 'not' , 'lie' ] print ( 'set to' , the_list ) outer_list = [ 'we' , 'like' , 'proper' , 'English' ] print ( 'before, outer_list =' , outer_list ) try_to_change_list_reference ( outer_list ) print ( 'after, outer_list =' , outer_list ) \u8f93\u51fa\uff1a before , outer_list = [ 'we' , 'like' , 'proper' , 'English' ] got [ 'we' , 'like' , 'proper' , 'English' ] set to [ 'and' , 'we' , 'can' , 'not' , 'lie' ] after , outer_list = [ 'we' , 'like' , 'proper' , 'English' ] \u56e0\u4e3a the_list \u53c2\u6570\u662f\u6309\u503c\u4f20\u9012\u7684\uff0c\u628a\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u65b0\u5217\u8868\u5bf9\u5916\u90e8\u4ee3\u7801\u6ca1\u6709\u5f71\u54cd\u3002 the_list \u662f\u5916\u90e8 outer_list \u5f15\u7528\u7684\u62f7\u8d1d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06 the_list \u6307\u5411\u4e86\u4e00\u4e2a\u65b0\u5217\u8868\uff0c\u4f46\u662f\u4e0d\u80fd\u6539\u53d8 outer_list \u7684\u6307\u5411\u3002 String - \u4e0d\u53ef\u53d8\u7c7b\u578b \u00b6 \u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u80fd\u6539\u53d8\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002 \u5c1d\u8bd5\u6539\u53d8\u5f15\u7528 \u00b6 def try_to_change_string_reference ( the_string ): print ( 'got' , the_string ) the_string = 'In a kingdom by the sea' print ( 'set to' , the_string ) outer_string = 'It was many and many a year ago' print ( 'before, outer_string =' , outer_string ) try_to_change_string_reference ( outer_string ) print ( 'after, outer_string =' , outer_string ) \u8f93\u51fa\uff1a before, outer_string = It was many and many a year ago got It was many and many a year ago set to In a kingdom by the sea after, outer_string = It was many and many a year ago \u56e0\u4e3a the_string \u662f\u6309\u503c\u4f20\u9012\u7684\uff0c\u8d4b\u503c\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\u7ed9\u5b83\u4e0d\u4f1a\u5bf9\u5916\u90e8\u7684\u4ee3\u7801\u4ea7\u751f\u5f71\u54cd\u3002 the_string \u662f out_string \u5f15\u7528\u7684\u62f7\u8d1d\uff0c the_string \u6307\u5411\u4e86\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u4e0d\u80fd\u6539\u53d8 out_string \u7684\u6307\u5411\u3002 \u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f \u00b6 \u53ef\u4ee5\u8fd4\u56de\u65b0\u7684\u503c\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u6539\u53d8\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u80fd\u591f\u5f97\u5230\u5e0c\u671b\u8fd4\u56de\u7684\u4fe1\u606f\u3002 def return_a_whole_new_string ( the_string ): new_string = something_to_do_with_the_old_string ( the_string ) return new_string # then you could call it like my_string = return_a_whole_new_string ( my_string ) \u5982\u679c\u4f60\u786e\u5b9e\u60f3\u907f\u514d\u4f7f\u7528\u8fd4\u56de\u503c\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6240\u9700\u8981\u7684\u503c\u7684\u7c7b\uff0c\u5c06\u5b83\u4f20\u9012\u7ed9\u65b9\u6cd5\uff0c\u5c31\u50cf\u5217\u8868\u4e00\u6837\u3002 def use_a_wrapper_to_simulate_pass_by_reference ( stuff_to_change ): new_string = something_to_do_with_the_old_string ( stuff_to_change [ 0 ]) stuff_to_change [ 0 ] = new_string # then you could call it like wrapper = [ my_string ] use_a_wrapper_to_simulate_pass_by_reference ( wrapper ) do_something_with ( wrapper [ 0 ]) \u867d\u7136\u8fd9\u770b\u8d77\u6765\u4e0d\u591f\u7b80\u6d01\u3002","title":"26.\u5982\u4f55\u6309\u5f15\u7528\u4f20\u503c"},{"location":"stackoverflow-python-top-qa/26/#26","text":"","title":"26. \u5982\u4f55\u6309\u5f15\u7528\u4f20\u503c"},{"location":"stackoverflow-python-top-qa/26/#_1","text":"\u5173\u4e8e\u53c2\u6570\u662f\u6309\u503c\u4f20\u9012\u8fd8\u662f\u6309\u5f15\u7528\u4f20\u9012\uff0cPython\u6587\u6863\u5199\u5f97\u4e0d\u591f\u6e05\u6670\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u503c Original \u5e76\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002 class PassByReference : def __init__ ( self ): self . variable = 'Original' self . change ( self . variable ) print ( self . variable ) def change ( self , var ): var = 'Changed' \u6709\u4ec0\u4e48\u65b9\u5f0f\u53ef\u4ee5\u771f\u6b63\u6309\u5f15\u7528\u4f20\u9012\u5462\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/26/#_2","text":"\u53c2\u6570\u662f\u6309 passed by assignment \uff0c\u8fd9\u53e5\u8bdd\u67092\u5c42\u542b\u4e49\uff1a \u4f20\u9012\u7684\u53c2\u6570\u7684\u786e\u662f\u5bf9\u8c61\u7684\u5f15\u7528\uff08\u4f46\u662f\u5f15\u7528\u662f\u6309\u503c\u4f20\u9012\u7684\uff09\u3002 \u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u662f\u53ef\u53d8\u7684\uff0c\u4e00\u4e9b\u4e0d\u662f\u3002 \u56e0\u6b64\uff1a \u5982\u679c\u7ed9\u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5f97\u5230\u4e86\u6307\u5411\u539f\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f60\u53ef\u4ee5\u968f\u610f\u6539\u53d8\u5b83\u3002\u4f46\u662f\u5982\u679c\u4f60\u5728\u65b9\u6cd5\u5185\u628a\u5f15\u7528\u91cd\u65b0\u7ed1\u5b9a\u7ed9\u5176\u4ed6\u53d8\u91cf\uff0c\u5916\u90e8\u5e76\u4e0d\u77e5\u9053\uff0c\u8fd9\u4e48\u505a\u4e4b\u540e\uff0c\u5916\u90e8\u7684\u5f15\u7528\u4ecd\u7136\u6307\u5411\u539f\u6765\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u7ed9\u65b9\u6cd5\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4f60\u4ecd\u7136\u4e0d\u80fd\u91cd\u7ed1\u5b9a\u5916\u90e8\u7684\u5f15\u7528\uff0c\u56e0\u4e3a\u4f60\u751a\u81f3\u4e0d\u80fd\u591f\u6539\u53d8\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u4e3e\u4e00\u4e9b\u4f8b\u5b50\uff1a","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/26/#list-","text":"","title":"List - \u53ef\u53d8\u7c7b\u578b"},{"location":"stackoverflow-python-top-qa/26/#_3","text":"def try_to_change_list_contents ( the_list ): print ( 'got' , the_list ) the_list . append ( 'four' ) print ( 'changed to' , the_list ) outer_list = [ 'one' , 'two' , 'three' ] print ( 'before, outer_list =' , outer_list ) try_to_change_list_contents ( outer_list ) print ( 'after, outer_list =' , outer_list ) \u8f93\u51fa\uff1a before , outer_list = [ 'one' , 'two' , 'three' ] got [ 'one' , 'two' , 'three' ] changed to [ 'one' , 'two' , 'three' , 'four' ] after , outer_list = [ 'one' , 'two' , 'three' , 'four' ] \u56e0\u4e3a\u4f20\u9012\u7684\u53c2\u6570\u662f outer_list \u7684\u5f15\u7528\uff0c\u5e76\u4e0d\u662f\u5b83\u7684\u62f7\u8d1d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6539\u53d8\u5217\u8868\u7684\u65b9\u6cd5\u53bb\u6539\u53d8\u5b83\uff0c\u5e76\u4e14\u6539\u53d8\u5c06\u53cd\u5e94\u5230\u5916\u90e8\u7684\u3002","title":"\u6211\u4eec\u5c1d\u8bd5\u6539\u53d8\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u5217\u8868"},{"location":"stackoverflow-python-top-qa/26/#_4","text":"def try_to_change_list_reference ( the_list ): print ( 'got' , the_list ) the_list = [ 'and' , 'we' , 'can' , 'not' , 'lie' ] print ( 'set to' , the_list ) outer_list = [ 'we' , 'like' , 'proper' , 'English' ] print ( 'before, outer_list =' , outer_list ) try_to_change_list_reference ( outer_list ) print ( 'after, outer_list =' , outer_list ) \u8f93\u51fa\uff1a before , outer_list = [ 'we' , 'like' , 'proper' , 'English' ] got [ 'we' , 'like' , 'proper' , 'English' ] set to [ 'and' , 'we' , 'can' , 'not' , 'lie' ] after , outer_list = [ 'we' , 'like' , 'proper' , 'English' ] \u56e0\u4e3a the_list \u53c2\u6570\u662f\u6309\u503c\u4f20\u9012\u7684\uff0c\u628a\u5b83\u8d4b\u503c\u7ed9\u4e00\u4e2a\u65b0\u5217\u8868\u5bf9\u5916\u90e8\u4ee3\u7801\u6ca1\u6709\u5f71\u54cd\u3002 the_list \u662f\u5916\u90e8 outer_list \u5f15\u7528\u7684\u62f7\u8d1d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06 the_list \u6307\u5411\u4e86\u4e00\u4e2a\u65b0\u5217\u8868\uff0c\u4f46\u662f\u4e0d\u80fd\u6539\u53d8 outer_list \u7684\u6307\u5411\u3002","title":"\u5982\u679c\u5c1d\u8bd5\u6539\u53d8\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u5f15\u7528\u5462\uff1f"},{"location":"stackoverflow-python-top-qa/26/#string-","text":"\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u80fd\u6539\u53d8\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002","title":"String - \u4e0d\u53ef\u53d8\u7c7b\u578b"},{"location":"stackoverflow-python-top-qa/26/#_5","text":"def try_to_change_string_reference ( the_string ): print ( 'got' , the_string ) the_string = 'In a kingdom by the sea' print ( 'set to' , the_string ) outer_string = 'It was many and many a year ago' print ( 'before, outer_string =' , outer_string ) try_to_change_string_reference ( outer_string ) print ( 'after, outer_string =' , outer_string ) \u8f93\u51fa\uff1a before, outer_string = It was many and many a year ago got It was many and many a year ago set to In a kingdom by the sea after, outer_string = It was many and many a year ago \u56e0\u4e3a the_string \u662f\u6309\u503c\u4f20\u9012\u7684\uff0c\u8d4b\u503c\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\u7ed9\u5b83\u4e0d\u4f1a\u5bf9\u5916\u90e8\u7684\u4ee3\u7801\u4ea7\u751f\u5f71\u54cd\u3002 the_string \u662f out_string \u5f15\u7528\u7684\u62f7\u8d1d\uff0c the_string \u6307\u5411\u4e86\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u4e0d\u80fd\u6539\u53d8 out_string \u7684\u6307\u5411\u3002","title":"\u5c1d\u8bd5\u6539\u53d8\u5f15\u7528"},{"location":"stackoverflow-python-top-qa/26/#_6","text":"\u53ef\u4ee5\u8fd4\u56de\u65b0\u7684\u503c\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u6539\u53d8\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u80fd\u591f\u5f97\u5230\u5e0c\u671b\u8fd4\u56de\u7684\u4fe1\u606f\u3002 def return_a_whole_new_string ( the_string ): new_string = something_to_do_with_the_old_string ( the_string ) return new_string # then you could call it like my_string = return_a_whole_new_string ( my_string ) \u5982\u679c\u4f60\u786e\u5b9e\u60f3\u907f\u514d\u4f7f\u7528\u8fd4\u56de\u503c\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6240\u9700\u8981\u7684\u503c\u7684\u7c7b\uff0c\u5c06\u5b83\u4f20\u9012\u7ed9\u65b9\u6cd5\uff0c\u5c31\u50cf\u5217\u8868\u4e00\u6837\u3002 def use_a_wrapper_to_simulate_pass_by_reference ( stuff_to_change ): new_string = something_to_do_with_the_old_string ( stuff_to_change [ 0 ]) stuff_to_change [ 0 ] = new_string # then you could call it like wrapper = [ my_string ] use_a_wrapper_to_simulate_pass_by_reference ( wrapper ) do_something_with ( wrapper [ 0 ]) \u867d\u7136\u8fd9\u770b\u8d77\u6765\u4e0d\u591f\u7b80\u6d01\u3002","title":"\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f"},{"location":"stackoverflow-python-top-qa/3/","text":"3. Python\u4e2d\u6709\u4e09\u76ee\u8fd0\u7b97\u7b26\u5417 \u00b6 \u9898\u76ee \u00b6 \u5982\u679cPython\u6ca1\u6709\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u662f\u5426\u6709\u53ef\u80fd\u4f7f\u7528\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u6765\u6a21\u62df\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 Python2.5\u5f00\u59cb \u52a0\u5165 \u4e09\u76ee\u8fd0\u7b97\u7b26 \u8bed\u6cd5\u5982\u4e0b a if condition else b \u9996\u5148\u8ba1\u7b97 condition , \u7136\u540e\u6839\u636e condition \u7684\u503c\u8fd4\u56de a \u6216 b \u4f8b\u5982 >>> 'true' if True else 'false' 'true' >>> 'true' if False else 'false' 'false' \u6ce8\u610f\uff1a conditionals \u662f\u8868\u8fbe\u5f0f\uff0c\u800c\u975e\u8bed\u53e5\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u5728 conditionals \u4e2d\u4f7f\u7528\u8d4b\u503c\u3001pass\u6216\u5176\u4ed6\u8bed\u53e5\u3002 >>> pass if False else x = 3 File \"<stdin>\" , line 1 pass if False else x = 3 ^ SyntaxError : invalid syntax \u5728\u4e0a\u4f8b\u4e2d\uff0c\u4ec5\u4f7f\u7528if\u8bed\u53e5\u5373\u53ef\u3002 \u8fd9\u4e2a\u8bed\u6cd5\u5728Python\u793e\u533a\u4e5f\u5f15\u53d1\u4e86\u5f88\u591a\u4e89\u8bba\uff0c\u539f\u56e0\u5982\u4e0b \u53c2\u6570\u7684\u987a\u5e8f\u4e0eC\u8bed\u8a00\u3001Ruby\u3001Java\u7b49\u4e0d\u540c\uff0cPython\u7684\u521d\u5b66\u8005\u6613\u5199\u51fabug \u6709\u4eba\u8ba4\u4e3a\u4e0d\u65b9\u4fbf\u5199\uff08unwieldy\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e0e\u6b63\u5e38\u7684\u601d\u7ef4\u65b9\u5f0f\uff08\u5148\u8003\u8651\u6761\u4ef6\uff0c\u518d\u8003\u8651\u6548\u679c\uff09\u76f8\u6096 \u98ce\u683c\u4e0a\u7684\u539f\u56e0 \u5b98\u65b9\u6587\u6863\uff1a Conditional expressions Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator? \u56de\u7b54\u4e8c \u00b6 \u7528\u5143\u7ec4\u7684\u4e0b\u6807\uff08index\uff09\u6765\u6a21\u62df: (falseValue, trueValue)[test] \uff0ctest\u9700\u8981\u8fd4\u56detrue\u6216\u8005\u662ffalse \u8fd9\u6837\u5b9e\u73b0\u66f4\u5b89\u5168\uff1a (falseValue, trueValue)[test == True] \u6216\u8005\u4f7f\u7528\u5185\u7f6e\u7684 bool \u786e\u4fdd\u662f\u4e2a\u5e03\u5c14\u503c\uff1a(falseValue, trueValue)[bool( <expression> )] >>> a = 10 >>> ( 'kid' , 'adult' )[ a >= 18 ] 'kid'","title":"3.Python\u4e2d\u6709\u4e09\u76ee\u8fd0\u7b97\u7b26\u5417"},{"location":"stackoverflow-python-top-qa/3/#3-python","text":"","title":"3. Python\u4e2d\u6709\u4e09\u76ee\u8fd0\u7b97\u7b26\u5417"},{"location":"stackoverflow-python-top-qa/3/#_1","text":"\u5982\u679cPython\u6ca1\u6709\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u662f\u5426\u6709\u53ef\u80fd\u4f7f\u7528\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u6765\u6a21\u62df\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/3/#_2","text":"Python2.5\u5f00\u59cb \u52a0\u5165 \u4e09\u76ee\u8fd0\u7b97\u7b26 \u8bed\u6cd5\u5982\u4e0b a if condition else b \u9996\u5148\u8ba1\u7b97 condition , \u7136\u540e\u6839\u636e condition \u7684\u503c\u8fd4\u56de a \u6216 b \u4f8b\u5982 >>> 'true' if True else 'false' 'true' >>> 'true' if False else 'false' 'false' \u6ce8\u610f\uff1a conditionals \u662f\u8868\u8fbe\u5f0f\uff0c\u800c\u975e\u8bed\u53e5\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u5728 conditionals \u4e2d\u4f7f\u7528\u8d4b\u503c\u3001pass\u6216\u5176\u4ed6\u8bed\u53e5\u3002 >>> pass if False else x = 3 File \"<stdin>\" , line 1 pass if False else x = 3 ^ SyntaxError : invalid syntax \u5728\u4e0a\u4f8b\u4e2d\uff0c\u4ec5\u4f7f\u7528if\u8bed\u53e5\u5373\u53ef\u3002 \u8fd9\u4e2a\u8bed\u6cd5\u5728Python\u793e\u533a\u4e5f\u5f15\u53d1\u4e86\u5f88\u591a\u4e89\u8bba\uff0c\u539f\u56e0\u5982\u4e0b \u53c2\u6570\u7684\u987a\u5e8f\u4e0eC\u8bed\u8a00\u3001Ruby\u3001Java\u7b49\u4e0d\u540c\uff0cPython\u7684\u521d\u5b66\u8005\u6613\u5199\u51fabug \u6709\u4eba\u8ba4\u4e3a\u4e0d\u65b9\u4fbf\u5199\uff08unwieldy\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e0e\u6b63\u5e38\u7684\u601d\u7ef4\u65b9\u5f0f\uff08\u5148\u8003\u8651\u6761\u4ef6\uff0c\u518d\u8003\u8651\u6548\u679c\uff09\u76f8\u6096 \u98ce\u683c\u4e0a\u7684\u539f\u56e0 \u5b98\u65b9\u6587\u6863\uff1a Conditional expressions Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/3/#_3","text":"\u7528\u5143\u7ec4\u7684\u4e0b\u6807\uff08index\uff09\u6765\u6a21\u62df: (falseValue, trueValue)[test] \uff0ctest\u9700\u8981\u8fd4\u56detrue\u6216\u8005\u662ffalse \u8fd9\u6837\u5b9e\u73b0\u66f4\u5b89\u5168\uff1a (falseValue, trueValue)[test == True] \u6216\u8005\u4f7f\u7528\u5185\u7f6e\u7684 bool \u786e\u4fdd\u662f\u4e2a\u5e03\u5c14\u503c\uff1a(falseValue, trueValue)[bool( <expression> )] >>> a = 10 >>> ( 'kid' , 'adult' )[ a >= 18 ] 'kid'","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/4/","text":"4. \u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728 \u00b6 \u9898\u76ee \u00b6 \u4e0d\u4f7f\u7528 try \u8bed\u53e5\uff0c\u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u5982\u679c\u68c0\u67e5\u6587\u4ef6\u5b58\u5728\u6027\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u6253\u5f00\u5b83\uff0c\u90a3\u4e48\u4f7f\u7528 try \u8bed\u53e5\u53bb\u5c1d\u8bd5\u6253\u5f00\u5b83\u4f1a\u66f4\u5b89\u5168\u4e00\u4e9b\u3002\u56e0\u4e3a\u5148\u68c0\u67e5\u7136\u540e\u518d\u6253\u5f00\uff0c\u867d\u7136\u68c0\u67e5\u5230\u5b58\u5728\uff0c\u4f46\u6253\u5f00\u4e4b\u524d\u6587\u4ef6\u53ef\u80fd\u88ab\u5220\u9664\u6216\u8005\u88ab\u79fb\u52a8\u3002 \u5982\u679c\u4e0d\u6253\u7b97\u7acb\u5373\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\uff0c\u90a3\u4e48\u4f7f\u7528 os.path.isfile \u5982\u679c\u8fd9\u4e2a\u8def\u5f84\u662f\u4e00\u4e2a\u5b58\u5728\u7684\u6b63\u5e38\u7684\u6587\u4ef6\uff0c\u5c06\u8fd4\u56de True \u3002\u80fd\u8ddf\u8e2a\u7b26\u53f7\u94fe\u63a5\uff08follow symbolic links\uff09\uff0c\u56e0\u6b64\u5bf9\u4e8e\u76f8\u540c\u7684\u8def\u5f84 islink() \u548c isfile() \u90fd\u4f1a\u8fd4\u56de True import os.path os . path . isfile ( fname ) \u5982\u679c\u4e0d\u9700\u8981\u786e\u8ba4\u662f\u5426\u662f\u4e00\u4e2a\u6587\u4ef6 \u4ece Python 3.4 \u5f00\u59cb\uff0c pathlib \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\uff08 Python 2.7 \u4e2d\u53ef\u4ee5\u5bfc\u5165 pathlib2 \uff09 from pathlib import Path my_file = Path ( \"/path/to/file\" ) if my_file . is_file (): # \u6587\u4ef6\u5b58\u5728 \u68c0\u6d4b\u4e00\u4e2a\u76ee\u5f55 if my_file . is_dir (): # \u76ee\u5f55\u5b58\u5728 \u68c0\u6d4b\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u533a\u5206\u76ee\u5f55\u548c\u6587\u4ef6 if my_file . exists (): # \u8def\u5f84\u5b58\u5728 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 resolve() \u5728 try \u8bed\u53e5\u4e2d try : my_abs_path = my_file . resolve (): except FileNotFoundError : # \u4e0d\u5b58\u5728 else : # \u5b58\u5728 \u56de\u7b54\u4e8c \u00b6 os.path.exists \u65b9\u6cd5\u53ef\u4ee5 import os.path os . path . exists ( file_path ) \u4e0d\u533a\u5206\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u8def\u5f84\u5b58\u5728\u5c31\u4f1a\u8fd4\u56de True \uff0c\u5982\u679c\u9700\u8981\u533a\u5206\u53ef\u4ee5\u4f7f\u7528 os . path . isfile ( file_name ) \u6765\u68c0\u6d4b\u662f\u5426\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u80fd\u8ddf\u8e2a\u7b26\u53f7\u94fe\u63a5\u3002","title":"4.\u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728"},{"location":"stackoverflow-python-top-qa/4/#4","text":"","title":"4. \u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728"},{"location":"stackoverflow-python-top-qa/4/#_1","text":"\u4e0d\u4f7f\u7528 try \u8bed\u53e5\uff0c\u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/4/#_2","text":"\u5982\u679c\u68c0\u67e5\u6587\u4ef6\u5b58\u5728\u6027\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u6253\u5f00\u5b83\uff0c\u90a3\u4e48\u4f7f\u7528 try \u8bed\u53e5\u53bb\u5c1d\u8bd5\u6253\u5f00\u5b83\u4f1a\u66f4\u5b89\u5168\u4e00\u4e9b\u3002\u56e0\u4e3a\u5148\u68c0\u67e5\u7136\u540e\u518d\u6253\u5f00\uff0c\u867d\u7136\u68c0\u67e5\u5230\u5b58\u5728\uff0c\u4f46\u6253\u5f00\u4e4b\u524d\u6587\u4ef6\u53ef\u80fd\u88ab\u5220\u9664\u6216\u8005\u88ab\u79fb\u52a8\u3002 \u5982\u679c\u4e0d\u6253\u7b97\u7acb\u5373\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\uff0c\u90a3\u4e48\u4f7f\u7528 os.path.isfile \u5982\u679c\u8fd9\u4e2a\u8def\u5f84\u662f\u4e00\u4e2a\u5b58\u5728\u7684\u6b63\u5e38\u7684\u6587\u4ef6\uff0c\u5c06\u8fd4\u56de True \u3002\u80fd\u8ddf\u8e2a\u7b26\u53f7\u94fe\u63a5\uff08follow symbolic links\uff09\uff0c\u56e0\u6b64\u5bf9\u4e8e\u76f8\u540c\u7684\u8def\u5f84 islink() \u548c isfile() \u90fd\u4f1a\u8fd4\u56de True import os.path os . path . isfile ( fname ) \u5982\u679c\u4e0d\u9700\u8981\u786e\u8ba4\u662f\u5426\u662f\u4e00\u4e2a\u6587\u4ef6 \u4ece Python 3.4 \u5f00\u59cb\uff0c pathlib \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\uff08 Python 2.7 \u4e2d\u53ef\u4ee5\u5bfc\u5165 pathlib2 \uff09 from pathlib import Path my_file = Path ( \"/path/to/file\" ) if my_file . is_file (): # \u6587\u4ef6\u5b58\u5728 \u68c0\u6d4b\u4e00\u4e2a\u76ee\u5f55 if my_file . is_dir (): # \u76ee\u5f55\u5b58\u5728 \u68c0\u6d4b\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u533a\u5206\u76ee\u5f55\u548c\u6587\u4ef6 if my_file . exists (): # \u8def\u5f84\u5b58\u5728 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 resolve() \u5728 try \u8bed\u53e5\u4e2d try : my_abs_path = my_file . resolve (): except FileNotFoundError : # \u4e0d\u5b58\u5728 else : # \u5b58\u5728","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/4/#_3","text":"os.path.exists \u65b9\u6cd5\u53ef\u4ee5 import os.path os . path . exists ( file_path ) \u4e0d\u533a\u5206\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u8def\u5f84\u5b58\u5728\u5c31\u4f1a\u8fd4\u56de True \uff0c\u5982\u679c\u9700\u8981\u533a\u5206\u53ef\u4ee5\u4f7f\u7528 os . path . isfile ( file_name ) \u6765\u68c0\u6d4b\u662f\u5426\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u80fd\u8ddf\u8e2a\u7b26\u53f7\u94fe\u63a5\u3002","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/5/","text":"5. if name == \"main\": \u8fd9\u53e5\u8bdd\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5 \u00b6 \u9898\u76ee \u00b6 if name == \"main\": \u8fd9\u53e5\u8bdd\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\uff1f \u94fe\u63a5 # Threading example import time , thread def myfunction ( string , sleeptime , lock , * args ): while True : lock . acquire () time . sleep ( sleeptime ) lock . release () time . sleep ( sleeptime ) if __name__ == \"__main__\" : lock = thread . allocate_lock () thread . start_new_thread ( myfunction , ( \"Thread #: 1\" , 2 , lock )) thread . start_new_thread ( myfunction , ( \"Thread #: 2\" , 2 , lock )) \u56de\u7b54\u4e00 \u00b6 \u5f53python\u89e3\u91ca\u5668\u8bfb\u53d6\u4e00\u4efd\u6e90\u6587\u4ef6\u65f6\uff0c\u5b83\u4f1a\u6267\u884c\u91cc\u9762\u6240\u6709\u7684\u4ee3\u7801\u3002 \u5f53\u6267\u884c\u4ee3\u7801\u4e4b\u524d\uff0c\u5b83\u4f1a\u5b9a\u4e49\u4e00\u4e9b\u7279\u6b8a\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5f53python\u89e3\u91ca\u5668\u628a\u6e90\u6587\u4ef6\u4f5c\u4e3amain\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u5c06\u53d8\u91cf __name__ \u8bbe\u7f6e\u4e3a __main__ \uff0c\u800c\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u522b\u7684\u6a21\u5757\u5f15\u5165\uff0c __name__ \u5219\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u8fd9\u4e2a\u6a21\u5757\u7684\u540d\u5b57\u3002 \u5728\u4f60\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9\u4efd\u6587\u4ef6\u662f\u88ab\u5f53\u4f5c\u6e90\u6587\u4ef6\u8fd0\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u5728\u547d\u4ee4\u884c\u8f93\u5165\u5982\u4e0b\u5185\u5bb9\uff1a python threading_example . py \u8bbe\u7f6e\u5b8c\u4e00\u4e9b\u53d8\u91cf\u4ee5\u540e\uff0c\u5b83\u4f1a\u6267\u884cimport\u8bed\u53e5\u52a0\u8f7d\u4e00\u4e9b\u6a21\u5757\uff0c\u7136\u540e\u5b83\u4f1a\u89e3\u6790def\u8bed\u53e5\uff0c\u521b\u9020\u4e00\u4e2afunction\u5bf9\u8c61\u548c\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\u7684\u53d8\u91cfmyfunction\u3002\u7136\u540e\u5b83\u4f1a\u6267\u884cif\u8bed\u53e5\u5224\u65ad __name__ \u662f\u5426\u7b49\u4e8e __main__ \uff0c\u8fd9\u91cc\u7b49\u4e8e\uff0c\u7136\u540e\u5b83\u5c31\u4f1a\u6267\u884c\u5269\u4e0b\u7684\u4ee3\u7801\u6bb5\u3002 \u8fd9\u4e48\u505a\u7684\u4e00\u4e2a\u7406\u7531\u662f\uff0c\u6709\u65f6\u4f60\u5199\u4e86\u4e00\u4e2a\u76f4\u63a5\u53ef\u4ee5\u88ab\u8fd0\u884c\u7684py\u6587\u4ef6\u3002\u7136\u800c\uff0c\u5b83\u4e5f\u53ef\u4ee5\u88ab\u5176\u4ed6\u6a21\u5757import\u4f7f\u7528\uff0c\u6211\u4eec\u505a\u8fd9\u6837\u4e00\u4e2a\u662f\u5426\u662fmain\u7684\u5224\u65ad\uff0c\u4f60\u53ef\u4ee5\u8ba9\u90a3\u4e9b\u4ee3\u7801\u4ec5\u4ec5\u5728\u6587\u4ef6\u4f5c\u4e3amain\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8fd0\u884c\uff0c\u800c\u5728\u522b\u4eba\u53ea\u662f\u60f3\u5f15\u7528\u4f60\u7684\u6a21\u5757\u4f7f\u7528\u4f60\u7684\u5176\u4ed6\u51fd\u6570\u65f6\u4e0d\u8fd0\u884c\u90a3\u4e9b\u4ee3\u7801\u3002","title":"5.if name == \"main\"\u8fd9\u53e5\u8bdd\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5"},{"location":"stackoverflow-python-top-qa/5/#5-if-name-main","text":"","title":"5. if name == \"main\": \u8fd9\u53e5\u8bdd\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5"},{"location":"stackoverflow-python-top-qa/5/#_1","text":"if name == \"main\": \u8fd9\u53e5\u8bdd\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\uff1f \u94fe\u63a5 # Threading example import time , thread def myfunction ( string , sleeptime , lock , * args ): while True : lock . acquire () time . sleep ( sleeptime ) lock . release () time . sleep ( sleeptime ) if __name__ == \"__main__\" : lock = thread . allocate_lock () thread . start_new_thread ( myfunction , ( \"Thread #: 1\" , 2 , lock )) thread . start_new_thread ( myfunction , ( \"Thread #: 2\" , 2 , lock ))","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/5/#_2","text":"\u5f53python\u89e3\u91ca\u5668\u8bfb\u53d6\u4e00\u4efd\u6e90\u6587\u4ef6\u65f6\uff0c\u5b83\u4f1a\u6267\u884c\u91cc\u9762\u6240\u6709\u7684\u4ee3\u7801\u3002 \u5f53\u6267\u884c\u4ee3\u7801\u4e4b\u524d\uff0c\u5b83\u4f1a\u5b9a\u4e49\u4e00\u4e9b\u7279\u6b8a\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5f53python\u89e3\u91ca\u5668\u628a\u6e90\u6587\u4ef6\u4f5c\u4e3amain\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u5c06\u53d8\u91cf __name__ \u8bbe\u7f6e\u4e3a __main__ \uff0c\u800c\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u522b\u7684\u6a21\u5757\u5f15\u5165\uff0c __name__ \u5219\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u8fd9\u4e2a\u6a21\u5757\u7684\u540d\u5b57\u3002 \u5728\u4f60\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9\u4efd\u6587\u4ef6\u662f\u88ab\u5f53\u4f5c\u6e90\u6587\u4ef6\u8fd0\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u5728\u547d\u4ee4\u884c\u8f93\u5165\u5982\u4e0b\u5185\u5bb9\uff1a python threading_example . py \u8bbe\u7f6e\u5b8c\u4e00\u4e9b\u53d8\u91cf\u4ee5\u540e\uff0c\u5b83\u4f1a\u6267\u884cimport\u8bed\u53e5\u52a0\u8f7d\u4e00\u4e9b\u6a21\u5757\uff0c\u7136\u540e\u5b83\u4f1a\u89e3\u6790def\u8bed\u53e5\uff0c\u521b\u9020\u4e00\u4e2afunction\u5bf9\u8c61\u548c\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\u7684\u53d8\u91cfmyfunction\u3002\u7136\u540e\u5b83\u4f1a\u6267\u884cif\u8bed\u53e5\u5224\u65ad __name__ \u662f\u5426\u7b49\u4e8e __main__ \uff0c\u8fd9\u91cc\u7b49\u4e8e\uff0c\u7136\u540e\u5b83\u5c31\u4f1a\u6267\u884c\u5269\u4e0b\u7684\u4ee3\u7801\u6bb5\u3002 \u8fd9\u4e48\u505a\u7684\u4e00\u4e2a\u7406\u7531\u662f\uff0c\u6709\u65f6\u4f60\u5199\u4e86\u4e00\u4e2a\u76f4\u63a5\u53ef\u4ee5\u88ab\u8fd0\u884c\u7684py\u6587\u4ef6\u3002\u7136\u800c\uff0c\u5b83\u4e5f\u53ef\u4ee5\u88ab\u5176\u4ed6\u6a21\u5757import\u4f7f\u7528\uff0c\u6211\u4eec\u505a\u8fd9\u6837\u4e00\u4e2a\u662f\u5426\u662fmain\u7684\u5224\u65ad\uff0c\u4f60\u53ef\u4ee5\u8ba9\u90a3\u4e9b\u4ee3\u7801\u4ec5\u4ec5\u5728\u6587\u4ef6\u4f5c\u4e3amain\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8fd0\u884c\uff0c\u800c\u5728\u522b\u4eba\u53ea\u662f\u60f3\u5f15\u7528\u4f60\u7684\u6a21\u5757\u4f7f\u7528\u4f60\u7684\u5176\u4ed6\u51fd\u6570\u65f6\u4e0d\u8fd0\u884c\u90a3\u4e9b\u4ee3\u7801\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/6/","text":"6. \u5728Python\u4e2d\u8c03\u7528\u5916\u90e8\u547d\u4ee4 \u00b6 \u9898\u76ee \u00b6 \u5982\u4f55\u4ecePython\u811a\u672c\u4e2d\u8c03\u7528\u5916\u90e8\u547d\u4ee4(\u5c31\u50cf\u6211\u5728Unix shell\u6216Windows\u547d\u4ee4\u63d0\u793a\u7b26\u4e2d\u6572\u5165\u5b83\u4e00\u6837)? \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u67e5\u770b\u6807\u51c6\u5e93\u4e2d\u7684 \u5b50\u6d41\u7a0b(subprocess)\u6a21\u5757 : from subprocess import call call ([ \"ls\" , \"-l\" ]) \u5b50\u6d41\u7a0b( subprocess )vs\u7cfb\u7edf( system )\u7684\u4f18\u70b9\u662f\u5b83\u66f4\u7075\u6d3b\uff08\u60a8\u53ef\u4ee5\u83b7\u5f97stdout\u3001stderr\u3001\u201c\u771f\u6b63\u7684\u201d\u72b6\u6001\u4ee3\u7801\u3001\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u7b49\uff09\u3002 \u5b98\u65b9\u7684\u6587\u6863\u5efa\u8bae\u4f7f\u7528\u5b50\u6d41\u7a0b\u6a21\u5757,os.system()\u4f5c\u4e3a\u5907\u9009: \u5b50\u8fc7\u7a0b( subprocess )\u6a21\u5757\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u5de5\u5177\u6765\u751f\u6210\u65b0\u8fdb\u7a0b\u548c\u68c0\u7d22\u7ed3\u679c;\u76f8\u6bd4\u4f7f\u7528[os.system()]\u51fd\u6570\u66f4\u63a8\u8350\u4f7f\u7528\u8be5\u6a21\u5757\u3002 \u5728\u5b50\u8fc7\u7a0b( subprocess )\u6587\u6863\u4e2d \u7528\u5b50\u6d41\u7a0b\u6a21\u5757\u66ff\u6362\u65e7\u51fd\u6570\uff08Replacing Older Functions with the subprocess Module\uff09 \u201d\u53ef\u80fd\u6709\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u3002 \u5b50\u8fc7\u7a0b\u6a21\u5757\u7684\u5b98\u65b9\u6587\u4ef6: Python 2 - subprocess Python 3 - subprocess","title":"6.\u5728Python\u4e2d\u8c03\u7528\u5916\u90e8\u547d\u4ee4"},{"location":"stackoverflow-python-top-qa/6/#6-python","text":"","title":"6. \u5728Python\u4e2d\u8c03\u7528\u5916\u90e8\u547d\u4ee4"},{"location":"stackoverflow-python-top-qa/6/#_1","text":"\u5982\u4f55\u4ecePython\u811a\u672c\u4e2d\u8c03\u7528\u5916\u90e8\u547d\u4ee4(\u5c31\u50cf\u6211\u5728Unix shell\u6216Windows\u547d\u4ee4\u63d0\u793a\u7b26\u4e2d\u6572\u5165\u5b83\u4e00\u6837)? \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/6/#_2","text":"\u67e5\u770b\u6807\u51c6\u5e93\u4e2d\u7684 \u5b50\u6d41\u7a0b(subprocess)\u6a21\u5757 : from subprocess import call call ([ \"ls\" , \"-l\" ]) \u5b50\u6d41\u7a0b( subprocess )vs\u7cfb\u7edf( system )\u7684\u4f18\u70b9\u662f\u5b83\u66f4\u7075\u6d3b\uff08\u60a8\u53ef\u4ee5\u83b7\u5f97stdout\u3001stderr\u3001\u201c\u771f\u6b63\u7684\u201d\u72b6\u6001\u4ee3\u7801\u3001\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u7b49\uff09\u3002 \u5b98\u65b9\u7684\u6587\u6863\u5efa\u8bae\u4f7f\u7528\u5b50\u6d41\u7a0b\u6a21\u5757,os.system()\u4f5c\u4e3a\u5907\u9009: \u5b50\u8fc7\u7a0b( subprocess )\u6a21\u5757\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u5de5\u5177\u6765\u751f\u6210\u65b0\u8fdb\u7a0b\u548c\u68c0\u7d22\u7ed3\u679c;\u76f8\u6bd4\u4f7f\u7528[os.system()]\u51fd\u6570\u66f4\u63a8\u8350\u4f7f\u7528\u8be5\u6a21\u5757\u3002 \u5728\u5b50\u8fc7\u7a0b( subprocess )\u6587\u6863\u4e2d \u7528\u5b50\u6d41\u7a0b\u6a21\u5757\u66ff\u6362\u65e7\u51fd\u6570\uff08Replacing Older Functions with the subprocess Module\uff09 \u201d\u53ef\u80fd\u6709\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u3002 \u5b50\u8fc7\u7a0b\u6a21\u5757\u7684\u5b98\u65b9\u6587\u4ef6: Python 2 - subprocess Python 3 - subprocess","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/7/","text":"7. \u5982\u4f55\u7528\u4e00\u884c\u4ee3\u7801\u5408\u5e762\u4e2a\u5b57\u5178 \u00b6 \u9898\u76ee \u00b6 \u67092\u4e2aPython\u5b57\u5178\uff0c\u60f3\u5199\u4e00\u884c\u4ee3\u7801\u80fd\u8fd4\u56de2\u4e2a\u5b57\u5178\u5408\u5e76\u540e\u7684\u7ed3\u679c\uff0c\u4f46\u662f update() \u5e76\u4e0d\u8fd4\u56de\u5408\u5e76\u540e\u7684\u7ed3\u679c\uff0c\u800c\u662f\u5c31\u5730\u4fee\u6539\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u5178\u3002 >>> x = { 'a' : 1 , 'b' : 2 } >>> y = { 'b' : 10 , 'c' : 11 } >>> z = x . update ( y ) >>> print ( z ) None >>> x { 'a' : 1 , 'b' : 10 , 'c' : 11 } \u600e\u6837\u624d\u80fd\u5728 z \u4e2d\u5f97\u5230\u5408\u5e76\u7ed3\u679c\uff0c\u800c\u4e0d\u662f\u5728 x \u4e2d \u53e6\u5916\uff0cdict.update()\u65b9\u6cd5\u9047\u5230\u51b2\u7a81\u65f6\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9\u4e5f\u662f\u6211\u6240\u671f\u671b\u7684\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u5982\u4f55\u7528\u4e00\u884c\u4ee3\u7801\u5408\u5e762\u4e2a\u5b57\u5178 \u5bf9\u4e8e\u5b57\u5178x, y, z\u662f\u5728x\u4e2d\u66ff\u6362\u5e76\u5408\u5e76\u4e86y\u4e2d\u7684\u503c\u7684\u5b57\u5178\u3002 Python3.5+ z = { ** x , ** y } Python2, (\u6216\u80053.4 \u6216\u66f4\u4f4e\u7248\u672c) \u53ef\u4ee5\u5199\u4e00\u4e2a\u51fd\u6570 def merge_two_dicts ( x , y ): z = x . copy () # z\u521d\u59cb\u5316\u4e3ax z . update ( y ) # \u7528y\u7684\u503c\u4fee\u6539z\uff0c\u8fd4\u56de\u503cNone return z \u63a5\u7740 z = merge_two_dicts ( x , y ) \u89e3\u91ca \u00b6 \u4f60\u67092\u4e2a\u5b57\u5178\uff0c\u60f3\u5408\u5e76\u8fd9\u4e24\u4e2a\u5b57\u5178\u5230\u4e00\u4e2a\u65b0\u5b57\u5178\u4e2d\uff0c\u800c\u4e0d\u6539\u53d8\u539f\u6709\u7684\u5b57\u5178\u3002 x = { 'a' : 1 , 'b' : 2 } y = { 'b' : 3 , 'c' : 4 } \u671f\u671b\u7684\u7ed3\u679c\u662f\u5f97\u5230\u4e00\u4e2a\u5408\u5e76\u540e\u65b0\u5b57\u5178\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u5178\u7684\u503c\u8986\u76d6\u7b2c\u4e00\u4e2a\u5b57\u5178\u7684\u503c\u3002 >>> z { 'a' : 1 , 'b' : 3 , 'c' : 4 } \u6709\u4e00\u4e2a\u65b0\u7684\u8bed\u6cd5\u80fd\u591f\u8fbe\u5230\u76ee\u7684\uff0c PEP 448 \u63d0\u51fa\uff0c Python 3.5\u4e2d\u53ef\u7528 \u3002 z = { ** x , ** y } \u8fd9\u7684\u786e\u662f\u5355\u884c\u8868\u8fbe\u5f0f\uff0c Python 3.5, PEP448 \u7684\u53d1\u5e03\u8ba1\u5212\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u800c\u4e14\u5df2\u7ecf\u5199\u5165\u4e86 What's New in Python 3.5 \u6587\u6863\u3002 \u7136\u800c\uff0c\u5f88\u6709\u7ec4\u7ec7\u4ecd\u5728\u4f7f\u7528Python2\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6709\u4e00\u79cd\u5411\u540e\u517c\u5bb9\u7684\u65b9\u5f0f\u3002Python2\uff0cPython3.0-3.4\u79cd\u6700Pythonic\u7684\u65b9\u5f0f\uff0c\u662f\u8fd92\u6b65\u3002 z = x . copy () z . update ( y ) # z\u88ab\u6539\u53d8\uff0c\u8fd4\u56de\u503c\u4e3aNone 2\u79cd\u65b9\u6cd5\u4e2d\uff0c y \u51fa\u73b0\u5728\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u503c\u5c06\u4f1a\u8986\u76d6 x \u7684\u503c\uff0c\u56e0\u6b64\u6700\u7ec8\u7684\u7ed3\u679c\uff0c b \u5c06\u4f1a\u53d8\u6210 3 \u6ca1\u7528Python3.5\uff0c\u4ecd\u65e7\u60f3\u4e00\u884c\u641e\u5b9a \u00b6 \u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528Python3.5\uff0c\u6216\u8005\u7684\u786e\u60f3\u5199\u5411\u540e\u517c\u5bb9\u7684\u4ee3\u7801\uff0c\u540c\u65f6\u60f3\u4e00\u884c\u8868\u8fbe\u5f0f\u641e\u5b9a\uff0c\u6700\u9ad8\u6548\u6b63\u786e\u7684\u65b9\u5f0f\u662f\u5199\u4e00\u4e2a\u51fd\u6570\u3002 def merge_two_dicts ( x , y ): \"\"\"Given two dicts, merge them into a new dict as a shallow copy.\"\"\" z = x . copy () z . update ( y ) return z \u7136\u540e\u5c31\u53ef\u4ee5\u5355\u884c\u641e\u5b9a\u4e86\u3002 z = merge_two_dicts ( x , y ) \u4f60\u4e5f\u80fd\u5199\u4e00\u4e2a\u51fd\u6570\u5408\u5e76\u4e0d\u5b9a\u6570\u91cf\u7684\u5b57\u5178\uff0c0\u5230N\u4e2a\u5b57\u5178 def merge_dicts ( * dict_args ): \"\"\" Given any number of dicts, shallow copy and merge into a new dict, precedence goes to key value pairs in latter dicts. \"\"\" result = {} for dictionary in dict_args : result . update ( dictionary ) return result \u8fd9\u4e2a\u51fd\u6570Python2\u548cPython3\u79cd\u90fd\u80fd\u8fd0\u884c\uff0c\u4f8b\u5982\u7ed9\u5b9a\u4ece a \u5230 g \u7684\u5b57\u5178\uff1a z = merge_dicts ( a , b , c , d , e , f , g ) g \u4e2d\u7684\u952e\u503c\u5bf9\u4f18\u5148\u7ea7\u6bd4 a \u5230 f \u8981\u9ad8\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u5bf9\u5176\u4ed6\u7b54\u6848\u7684\u6279\u8bc4 \u00b6 \u4e0d\u8981\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f z = dict ( x . items () + y . items ()) \u5728Python2\u4e2d\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u5206\u522b\u4e3a2\u4e2a\u5b57\u5178\u521b\u5efa2\u4e2a\u5217\u8868\uff0c\u7136\u540e\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u7b2c3\u4e2a\u5217\u8868\uff0c\u957f\u5ea6\u7b49\u4e8e\u524d\u4e24\u8005\u4e4b\u548c\uff0c\u7136\u540e\u4e22\u5f03\u8fd9\u4e09\u4e2a\u5217\u8868\u53bb\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u5178\u3002\u5728Python3\u79cd\uff0c\u8fd9\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a\u4f60\u60f3\u5408\u5e762\u4e2a dict_items \uff0c\u800c\u4e0d\u662f2\u4e2a\u5217\u8868 >>> c = dict ( a . items () + b . items ()) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : unsupported operand type ( s ) for + : 'dict_items' and 'dict_items' \u4f60\u9700\u8981\u663e\u5f0f\u5730\u628a\u5b83\u4eec\u8f6c\u6362\u6210\u5217\u8868\uff0c\u4f8b\u5982 z = dict(list(x.items()) + list(y.items())) \uff0c\u8fd9\u662f\u5bf9\u8d44\u6e90\u548c\u7b97\u529b\u7684\u4e00\u79cd\u6d6a\u8d39\u3002 \u76f8\u4f3c\u7684\uff0c\u5728Python3\u4e2d\u53d6 items() \u7684\u5e76\u96c6\uff08Python2.7\u79cd\u7684 viewitems() \uff09\u4e5f\u4f1a\u5931\u8d25\u5f53\u503c\u662f\u4e00\u4e9b\u4e0d\u53ef\u54c8\u5e0c\u7684\u5bf9\u8c61\u65f6\uff08\u4f8b\u5982\u5217\u8868\uff09\u3002\u53ca\u65f6\u503c\u90fd\u662f\u53ef\u54c8\u5e0c\u7684\uff0c \u7531\u4e8e\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u884c\u4e3a\u53d6\u51b3\u4e8e\u96c6\u5408\u5143\u7d20\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u6b64\u4e0d\u8981\u8fd9\u4e48\u505a >>> c = dict ( a . items () | b . items ()) \u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u5f53\u503c\u662f\u4e0d\u53efhash\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48 >>> x = { 'a' : []} >>> y = { 'b' : []} >>> dict ( x . items () | y . items ()) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : unhashable type : 'list' \u8fd9\u6709\u4e00\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u56e0\u96c6\u5408\u7684\u65e0\u5e8f\u6027\uff0c\u5bfc\u81f4y\u7684\u4f18\u5148\u7ea7\u5931\u6548\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u4fdd\u7559\u4e86x\u7684\u503c\u3002 >>> x = { 'a' : 2 } >>> y = { 'a' : 1 } >>> dict ( x . items () | y . items ()) { 'a' : 2 } \u53e6\u4e00\u79cd\u53d6\u5de7\u7684\u65b9\u6cd5\u4e5f\u4e0d\u5e94\u5f53\u4f7f\u7528 z = dict ( x , ** y ) \u8fd9\u79cd\u65b9\u6cd5\u4f7f\u7528\u4e86\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570\uff0c\u975e\u5e38\u5feb\uff0c\u5185\u5b58\u5360\u7528\u975e\u5e38\u5c0f\uff08\u4ec5\u6bd4\u6700\u5f00\u59cb\u76842\u6b65\u7684\u65b9\u6cd5\u591a\u4e00\u70b9\uff09\u3002\u4f46\u662f\u9664\u975e\u4f60\u51c6\u786e\u5730\u77e5\u9053\u5c06\u4f1a\u53d1\u751f\u4ec0\u4e48\uff08\u90a3\u5c31\u662f\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u5178\u5c06\u4f1a\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u7ed9\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570\uff09\uff0c\u8fd9\u5f88\u96be\u7406\u89e3\uff0c\u4e5f\u4e0d\u662f\u9884\u671f\u7684\u7528\u6cd5\uff0c\u8fd9\u4e0dPythonic\u3002 \u8fd9\u6709\u4e00\u4e2a\u8fd9\u79cd\u7528\u6cd5\u5728django\u4e2d\u88ab\u7ea0\u6b63\u7684\u4f8b\u5b50\u3002 remediated in django \u5b57\u5178\u671f\u671b\u63a5\u53d7\u53ef\u54c8\u5e0c\u7684\u952e\uff08\u4f8b\u5982\uff0c\u4e0d\u53ef\u53d8\u96c6\u5408(frozensets)\u548c\u5143\u7ec4\uff09,\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u5f53\u952e\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5728Python3\u4e2d\u4f1a\u5931\u8d25\u3002 >>> c = dict ( a , ** b ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : keyword arguments must be strings \u4ece \u90ae\u4ef6\u5217\u8868 \u4e2d\uff0cPython\u8bed\u8a00\u7684\u521b\u59cb\u4eba\uff0cGuido van Rossum \u5199\u9053\uff1a \u6211\u5ba3\u5e03 dict({}, **{1:3})\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u5b83\u6ee5\u7528\u4e86 ** \u7684\u673a\u5236 \u53e6\u4e00\u53e5 \u5f88\u660e\u663e\uff0cdict(x, **y) \u6bd4 \"call x.update(y) and return x\"\u66f4cool\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8d77cool\uff0c\u66f4despicable\uff08\u5351\u9119\uff09 \u6211\u7684\u7406\u89e3\uff08\u4e5f\u662f \u8bed\u8a00\u521b\u59cb\u4eba \u7684\u7406\u89e3\uff09\uff1adict(**y)\u7684\u76ee\u7684\u662f\u521b\u5efa\u5b57\u5178\u65f6\u589e\u5f3a\u53ef\u8bfb\u6027\u7684\uff0c\u4f8b\u5982 dict ( a = 1 , b = 10 , c = 11 ) \u800c\u4e0d\u662f { 'a' : 1 , 'b' : 10 , 'c' : 11 } \u5bf9\u8bc4\u8bba\u7684\u56de\u590d \u00b6 \u4e0d\u7ba1Guido\u6240\u8bf4\uff0cdict(x, **y)\u7b26\u5408\u8bed\u6cd5\u89c4\u8303\uff0c\u800c\u4e14\u5728Python2\u548cPython3\u4e2d\u90fd\u80fd\u5de5\u4f5c\uff0c\u8fd9\u53ea\u9002\u7528\u4e8e\u952e\u4e3a\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u662f\u5173\u952e\u5b57\u53c2\u6570\u7684\u5de5\u4f5c\u673a\u5236\u5bfc\u81f4\u7684\uff0c\u800c\u4e0d\u662f\u5b57\u5178\u7684\u4e00\u79cd\u7b80\u5199\u673a\u5236\u3002\u5728\u8fd9\u4e2a\u5730\u65b9\uff0c\u4f7f\u7528 ** \u64cd\u4f5c\u7b26\u4e5f\u6ca1\u6709\u6ee5\u7528\u673a\u5236\uff0c\u5b9e\u9645\u4e0a ** \u7684\u8bbe\u8ba1\u6070\u6070\u662f\u4e3a\u4e86\u5c06\u5173\u952e\u5b57\u4f20\u9012\u7ed9\u5b57\u5178\u3002 \u800c\u4e14\uff0c\u5f53\u952e\u4e0d\u662f\u5b57\u7b26\u4e32\u65f6\uff0cPython3\u4e2d\u4e0d\u5de5\u4f5c\u3002\u9690\u5f0f\u7684\u8c03\u7528\u7ea6\u5b9a\u662f\u547d\u540d\u7a7a\u95f4\u91c7\u7528\u666e\u901a\u7684\u5b57\u5178\uff0c\u7528\u6237\u5fc5\u987b\u53ea\u4f20\u9012\u5b57\u7b26\u4e32\u5173\u952e\u5b57\uff0c\u5176\u4ed6\u7c7b\u578b\u90fd\u662f\u8fdd\u80cc\u4e86\u8fd9\u4e00\u7ea6\u5b9a\u7684\u3002\u5728Python2\u4e2d dict \u6253\u7834\u4e86\u8fd9\u4e2a\u4e00\u81f4\u6027\u3002 >>> foo ( ** {( 'a' , 'b' ): None }) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : foo () keywords must be strings >>> dict ( ** {( 'a' , 'b' ): None }) {( 'a' , 'b' ): None } \u8fd9\u79cd\u4e0d\u4e00\u81f4\u6027\u5b58\u5728\u4e8ePython\u7684\u5176\u4ed6\u5b9e\u73b0(Pypy, Jython, IronPython)\uff0c\u5728Python3\u4e2d\u88ab\u4fee\u590d\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u662f\u4e2a\u7a81\u7834\u6027\u7684\u53d8\u5316\u3002 \u5411\u4f60\u6307\u51fa\uff0c\u6545\u610f\u7f16\u5199\u53ea\u80fd\u5728\u4e00\u79cd\u8bed\u8a00\u7248\u672c\u4e2d\u6216\u8005\u53ea\u5728\u7279\u5b9a\u7ea6\u675f\u6761\u4ef6\u4e0b\u624d\u80fd\u5de5\u4f5c\u7684\u4ee3\u7801\u662f\u65e0\u80fd\u7684\u4f53\u73b0\u3002 \u53e6\u5916\u4e00\u4e2a\u8bc4\u8bba dict(x.items() + y.items()) \u5728Python2\u4e2d\u4ecd\u662f\u53ef\u8bfb\u6027\u6700\u5f3a\u7684\u5199\u6cd5\uff0c\u53ef\u8bfb\u6027\u66f4\u91cd\u8981\u3002 \u6211\u7684\u56de\u590d\uff1a\u5bf9\u6211\u800c\u8a00 merge_two_dicts(x, y) \u53ef\u8bfb\u6027\u66f4\u597d\u3002\u5982\u679c\u4e0d\u662f\u524d\u5411\u517c\u5bb9\u7684\u95ee\u9898\uff0cPython2\u5c06\u4f1a\u52a0\u901f\u88ab\u5e9f\u5f03\u3002 \u6027\u80fd\u8f83\u5dee\u4f46\u6b63\u786e\u7684\u5199\u6cd5 \u00b6 \u4ee5\u4e0b\u5199\u6cd5\u6027\u80fd\u8f83\u5dee\uff0c\u4f46\u662f\u4e5f\u662f\u6b63\u786e\u7684\u65b9\u5f0f\u3002\u6bd4\u8d77 copy \u548c update \u65b9\u6cd5\u4ee5\u53ca\u65b0\u7684\u5c55\u5f00\u65b9\u6cd5\uff0c\u6027\u80fd\u4f1a\u5dee\u8ddf\u591a\uff0c\u539f\u56e0\u662f\u8fed\u4ee3\u4e86\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4f46\u662f\u4fdd\u8bc1\u4e86\u4f18\u5148\u7ea7\uff08\u540e\u9762\u7684\u5b57\u5178\u4f18\u5148\u7ea7\u9ad8\uff09 \u4f60\u4e5f\u7528\u4e00\u4e2a\u5b57\u5178\u63a8\u5bfc\u4e2d\u624b\u52a8\u5408\u5e76\u5b57\u5178\u3002 { k : v for d in dicts for k , v in d . items ()} # iteritems in Python 2.7 \u6216\u8005\u5728Python2.6\u4e2d\uff08\u6216\u8005\u66f4\u65e9\u52302.4\u7684\u7248\u672c\uff0c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u88ab\u5f15\u5165\uff09: dict (( k , v ) for d in dicts for k , v in d . items ()) itertools.chain \u4e5f\u4f1a\u901a\u8fc7\u952e\u503c\u5bf9\u8fed\u4ee3\u7684\u65b9\u5f0f\u6b63\u786e\u5408\u5e76\u3002 import itertools z = dict ( itertools . chain ( x . iteritems (), y . iteritems ())) \u6027\u80fd\u5206\u6790 \u00b6 \u7528\u4ee5\u4e0b\u65b9\u6cd5\u505a\u6027\u80fd\u5206\u6790 import timeit \u8fd0\u884c\u73af\u5883\uff1aUbuntu 14.04 Python 2.7 (system Python): >>> min ( timeit . repeat ( lambda : merge_two_dicts ( x , y ))) 0.5726828575134277 >>> min ( timeit . repeat ( lambda : { k : v for d in ( x , y ) for k , v in d . items ()} )) 1.163769006729126 >>> min ( timeit . repeat ( lambda : dict ( itertools . chain ( x . iteritems (), y . iteritems ())))) 1.1614501476287842 >>> min ( timeit . repeat ( lambda : dict (( k , v ) for d in ( x , y ) for k , v in d . items ()))) 2.2345519065856934 In Python 3.5 (deadsnakes PPA): >>> min ( timeit . repeat ( lambda : { ** x , ** y })) 0.4094954460160807 >>> min ( timeit . repeat ( lambda : merge_two_dicts ( x , y ))) 0.7881555100320838 >>> min ( timeit . repeat ( lambda : { k : v for d in ( x , y ) for k , v in d . items ()} )) 1.4525277839857154 >>> min ( timeit . repeat ( lambda : dict ( itertools . chain ( x . items (), y . items ())))) 2.3143140770262107 >>> min ( timeit . repeat ( lambda : dict (( k , v ) for d in ( x , y ) for k , v in d . items ()))) 3.2069112799945287 \u53c2\u8003\u8d44\u6e90 \u00b6 My explanation of Python's dictionary implementation , updated for 3.6. Answer on how to add new keys to a dictionary Mapping two lists into a dictionary The official Python docs on dictionaries The Dictionary Even Mightier - talk by Brandon Rhodes at Pycon 2017 Modern Python Dictionaries, A Confluence of Great Ideas - talk by Raymond Hettinger at Pycon 2017","title":"7.\u5982\u4f55\u7528\u4e00\u884c\u4ee3\u7801\u5408\u5e762\u4e2a\u5b57\u5178"},{"location":"stackoverflow-python-top-qa/7/#7-2","text":"","title":"7. \u5982\u4f55\u7528\u4e00\u884c\u4ee3\u7801\u5408\u5e762\u4e2a\u5b57\u5178"},{"location":"stackoverflow-python-top-qa/7/#_1","text":"\u67092\u4e2aPython\u5b57\u5178\uff0c\u60f3\u5199\u4e00\u884c\u4ee3\u7801\u80fd\u8fd4\u56de2\u4e2a\u5b57\u5178\u5408\u5e76\u540e\u7684\u7ed3\u679c\uff0c\u4f46\u662f update() \u5e76\u4e0d\u8fd4\u56de\u5408\u5e76\u540e\u7684\u7ed3\u679c\uff0c\u800c\u662f\u5c31\u5730\u4fee\u6539\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u5178\u3002 >>> x = { 'a' : 1 , 'b' : 2 } >>> y = { 'b' : 10 , 'c' : 11 } >>> z = x . update ( y ) >>> print ( z ) None >>> x { 'a' : 1 , 'b' : 10 , 'c' : 11 } \u600e\u6837\u624d\u80fd\u5728 z \u4e2d\u5f97\u5230\u5408\u5e76\u7ed3\u679c\uff0c\u800c\u4e0d\u662f\u5728 x \u4e2d \u53e6\u5916\uff0cdict.update()\u65b9\u6cd5\u9047\u5230\u51b2\u7a81\u65f6\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9\u4e5f\u662f\u6211\u6240\u671f\u671b\u7684\u3002 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/7/#_2","text":"\u5982\u4f55\u7528\u4e00\u884c\u4ee3\u7801\u5408\u5e762\u4e2a\u5b57\u5178 \u5bf9\u4e8e\u5b57\u5178x, y, z\u662f\u5728x\u4e2d\u66ff\u6362\u5e76\u5408\u5e76\u4e86y\u4e2d\u7684\u503c\u7684\u5b57\u5178\u3002 Python3.5+ z = { ** x , ** y } Python2, (\u6216\u80053.4 \u6216\u66f4\u4f4e\u7248\u672c) \u53ef\u4ee5\u5199\u4e00\u4e2a\u51fd\u6570 def merge_two_dicts ( x , y ): z = x . copy () # z\u521d\u59cb\u5316\u4e3ax z . update ( y ) # \u7528y\u7684\u503c\u4fee\u6539z\uff0c\u8fd4\u56de\u503cNone return z \u63a5\u7740 z = merge_two_dicts ( x , y )","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/7/#_3","text":"\u4f60\u67092\u4e2a\u5b57\u5178\uff0c\u60f3\u5408\u5e76\u8fd9\u4e24\u4e2a\u5b57\u5178\u5230\u4e00\u4e2a\u65b0\u5b57\u5178\u4e2d\uff0c\u800c\u4e0d\u6539\u53d8\u539f\u6709\u7684\u5b57\u5178\u3002 x = { 'a' : 1 , 'b' : 2 } y = { 'b' : 3 , 'c' : 4 } \u671f\u671b\u7684\u7ed3\u679c\u662f\u5f97\u5230\u4e00\u4e2a\u5408\u5e76\u540e\u65b0\u5b57\u5178\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u5178\u7684\u503c\u8986\u76d6\u7b2c\u4e00\u4e2a\u5b57\u5178\u7684\u503c\u3002 >>> z { 'a' : 1 , 'b' : 3 , 'c' : 4 } \u6709\u4e00\u4e2a\u65b0\u7684\u8bed\u6cd5\u80fd\u591f\u8fbe\u5230\u76ee\u7684\uff0c PEP 448 \u63d0\u51fa\uff0c Python 3.5\u4e2d\u53ef\u7528 \u3002 z = { ** x , ** y } \u8fd9\u7684\u786e\u662f\u5355\u884c\u8868\u8fbe\u5f0f\uff0c Python 3.5, PEP448 \u7684\u53d1\u5e03\u8ba1\u5212\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u800c\u4e14\u5df2\u7ecf\u5199\u5165\u4e86 What's New in Python 3.5 \u6587\u6863\u3002 \u7136\u800c\uff0c\u5f88\u6709\u7ec4\u7ec7\u4ecd\u5728\u4f7f\u7528Python2\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6709\u4e00\u79cd\u5411\u540e\u517c\u5bb9\u7684\u65b9\u5f0f\u3002Python2\uff0cPython3.0-3.4\u79cd\u6700Pythonic\u7684\u65b9\u5f0f\uff0c\u662f\u8fd92\u6b65\u3002 z = x . copy () z . update ( y ) # z\u88ab\u6539\u53d8\uff0c\u8fd4\u56de\u503c\u4e3aNone 2\u79cd\u65b9\u6cd5\u4e2d\uff0c y \u51fa\u73b0\u5728\u540e\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u503c\u5c06\u4f1a\u8986\u76d6 x \u7684\u503c\uff0c\u56e0\u6b64\u6700\u7ec8\u7684\u7ed3\u679c\uff0c b \u5c06\u4f1a\u53d8\u6210 3","title":"\u89e3\u91ca"},{"location":"stackoverflow-python-top-qa/7/#python35","text":"\u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528Python3.5\uff0c\u6216\u8005\u7684\u786e\u60f3\u5199\u5411\u540e\u517c\u5bb9\u7684\u4ee3\u7801\uff0c\u540c\u65f6\u60f3\u4e00\u884c\u8868\u8fbe\u5f0f\u641e\u5b9a\uff0c\u6700\u9ad8\u6548\u6b63\u786e\u7684\u65b9\u5f0f\u662f\u5199\u4e00\u4e2a\u51fd\u6570\u3002 def merge_two_dicts ( x , y ): \"\"\"Given two dicts, merge them into a new dict as a shallow copy.\"\"\" z = x . copy () z . update ( y ) return z \u7136\u540e\u5c31\u53ef\u4ee5\u5355\u884c\u641e\u5b9a\u4e86\u3002 z = merge_two_dicts ( x , y ) \u4f60\u4e5f\u80fd\u5199\u4e00\u4e2a\u51fd\u6570\u5408\u5e76\u4e0d\u5b9a\u6570\u91cf\u7684\u5b57\u5178\uff0c0\u5230N\u4e2a\u5b57\u5178 def merge_dicts ( * dict_args ): \"\"\" Given any number of dicts, shallow copy and merge into a new dict, precedence goes to key value pairs in latter dicts. \"\"\" result = {} for dictionary in dict_args : result . update ( dictionary ) return result \u8fd9\u4e2a\u51fd\u6570Python2\u548cPython3\u79cd\u90fd\u80fd\u8fd0\u884c\uff0c\u4f8b\u5982\u7ed9\u5b9a\u4ece a \u5230 g \u7684\u5b57\u5178\uff1a z = merge_dicts ( a , b , c , d , e , f , g ) g \u4e2d\u7684\u952e\u503c\u5bf9\u4f18\u5148\u7ea7\u6bd4 a \u5230 f \u8981\u9ad8\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u6ca1\u7528Python3.5\uff0c\u4ecd\u65e7\u60f3\u4e00\u884c\u641e\u5b9a"},{"location":"stackoverflow-python-top-qa/7/#_4","text":"\u4e0d\u8981\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f z = dict ( x . items () + y . items ()) \u5728Python2\u4e2d\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u5206\u522b\u4e3a2\u4e2a\u5b57\u5178\u521b\u5efa2\u4e2a\u5217\u8868\uff0c\u7136\u540e\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u7b2c3\u4e2a\u5217\u8868\uff0c\u957f\u5ea6\u7b49\u4e8e\u524d\u4e24\u8005\u4e4b\u548c\uff0c\u7136\u540e\u4e22\u5f03\u8fd9\u4e09\u4e2a\u5217\u8868\u53bb\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u5178\u3002\u5728Python3\u79cd\uff0c\u8fd9\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a\u4f60\u60f3\u5408\u5e762\u4e2a dict_items \uff0c\u800c\u4e0d\u662f2\u4e2a\u5217\u8868 >>> c = dict ( a . items () + b . items ()) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : unsupported operand type ( s ) for + : 'dict_items' and 'dict_items' \u4f60\u9700\u8981\u663e\u5f0f\u5730\u628a\u5b83\u4eec\u8f6c\u6362\u6210\u5217\u8868\uff0c\u4f8b\u5982 z = dict(list(x.items()) + list(y.items())) \uff0c\u8fd9\u662f\u5bf9\u8d44\u6e90\u548c\u7b97\u529b\u7684\u4e00\u79cd\u6d6a\u8d39\u3002 \u76f8\u4f3c\u7684\uff0c\u5728Python3\u4e2d\u53d6 items() \u7684\u5e76\u96c6\uff08Python2.7\u79cd\u7684 viewitems() \uff09\u4e5f\u4f1a\u5931\u8d25\u5f53\u503c\u662f\u4e00\u4e9b\u4e0d\u53ef\u54c8\u5e0c\u7684\u5bf9\u8c61\u65f6\uff08\u4f8b\u5982\u5217\u8868\uff09\u3002\u53ca\u65f6\u503c\u90fd\u662f\u53ef\u54c8\u5e0c\u7684\uff0c \u7531\u4e8e\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u884c\u4e3a\u53d6\u51b3\u4e8e\u96c6\u5408\u5143\u7d20\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u6b64\u4e0d\u8981\u8fd9\u4e48\u505a >>> c = dict ( a . items () | b . items ()) \u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u5f53\u503c\u662f\u4e0d\u53efhash\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48 >>> x = { 'a' : []} >>> y = { 'b' : []} >>> dict ( x . items () | y . items ()) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : unhashable type : 'list' \u8fd9\u6709\u4e00\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u56e0\u96c6\u5408\u7684\u65e0\u5e8f\u6027\uff0c\u5bfc\u81f4y\u7684\u4f18\u5148\u7ea7\u5931\u6548\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u4fdd\u7559\u4e86x\u7684\u503c\u3002 >>> x = { 'a' : 2 } >>> y = { 'a' : 1 } >>> dict ( x . items () | y . items ()) { 'a' : 2 } \u53e6\u4e00\u79cd\u53d6\u5de7\u7684\u65b9\u6cd5\u4e5f\u4e0d\u5e94\u5f53\u4f7f\u7528 z = dict ( x , ** y ) \u8fd9\u79cd\u65b9\u6cd5\u4f7f\u7528\u4e86\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570\uff0c\u975e\u5e38\u5feb\uff0c\u5185\u5b58\u5360\u7528\u975e\u5e38\u5c0f\uff08\u4ec5\u6bd4\u6700\u5f00\u59cb\u76842\u6b65\u7684\u65b9\u6cd5\u591a\u4e00\u70b9\uff09\u3002\u4f46\u662f\u9664\u975e\u4f60\u51c6\u786e\u5730\u77e5\u9053\u5c06\u4f1a\u53d1\u751f\u4ec0\u4e48\uff08\u90a3\u5c31\u662f\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u5178\u5c06\u4f1a\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u7ed9\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570\uff09\uff0c\u8fd9\u5f88\u96be\u7406\u89e3\uff0c\u4e5f\u4e0d\u662f\u9884\u671f\u7684\u7528\u6cd5\uff0c\u8fd9\u4e0dPythonic\u3002 \u8fd9\u6709\u4e00\u4e2a\u8fd9\u79cd\u7528\u6cd5\u5728django\u4e2d\u88ab\u7ea0\u6b63\u7684\u4f8b\u5b50\u3002 remediated in django \u5b57\u5178\u671f\u671b\u63a5\u53d7\u53ef\u54c8\u5e0c\u7684\u952e\uff08\u4f8b\u5982\uff0c\u4e0d\u53ef\u53d8\u96c6\u5408(frozensets)\u548c\u5143\u7ec4\uff09,\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u5f53\u952e\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5728Python3\u4e2d\u4f1a\u5931\u8d25\u3002 >>> c = dict ( a , ** b ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : keyword arguments must be strings \u4ece \u90ae\u4ef6\u5217\u8868 \u4e2d\uff0cPython\u8bed\u8a00\u7684\u521b\u59cb\u4eba\uff0cGuido van Rossum \u5199\u9053\uff1a \u6211\u5ba3\u5e03 dict({}, **{1:3})\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u5b83\u6ee5\u7528\u4e86 ** \u7684\u673a\u5236 \u53e6\u4e00\u53e5 \u5f88\u660e\u663e\uff0cdict(x, **y) \u6bd4 \"call x.update(y) and return x\"\u66f4cool\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8d77cool\uff0c\u66f4despicable\uff08\u5351\u9119\uff09 \u6211\u7684\u7406\u89e3\uff08\u4e5f\u662f \u8bed\u8a00\u521b\u59cb\u4eba \u7684\u7406\u89e3\uff09\uff1adict(**y)\u7684\u76ee\u7684\u662f\u521b\u5efa\u5b57\u5178\u65f6\u589e\u5f3a\u53ef\u8bfb\u6027\u7684\uff0c\u4f8b\u5982 dict ( a = 1 , b = 10 , c = 11 ) \u800c\u4e0d\u662f { 'a' : 1 , 'b' : 10 , 'c' : 11 }","title":"\u5bf9\u5176\u4ed6\u7b54\u6848\u7684\u6279\u8bc4"},{"location":"stackoverflow-python-top-qa/7/#_5","text":"\u4e0d\u7ba1Guido\u6240\u8bf4\uff0cdict(x, **y)\u7b26\u5408\u8bed\u6cd5\u89c4\u8303\uff0c\u800c\u4e14\u5728Python2\u548cPython3\u4e2d\u90fd\u80fd\u5de5\u4f5c\uff0c\u8fd9\u53ea\u9002\u7528\u4e8e\u952e\u4e3a\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u662f\u5173\u952e\u5b57\u53c2\u6570\u7684\u5de5\u4f5c\u673a\u5236\u5bfc\u81f4\u7684\uff0c\u800c\u4e0d\u662f\u5b57\u5178\u7684\u4e00\u79cd\u7b80\u5199\u673a\u5236\u3002\u5728\u8fd9\u4e2a\u5730\u65b9\uff0c\u4f7f\u7528 ** \u64cd\u4f5c\u7b26\u4e5f\u6ca1\u6709\u6ee5\u7528\u673a\u5236\uff0c\u5b9e\u9645\u4e0a ** \u7684\u8bbe\u8ba1\u6070\u6070\u662f\u4e3a\u4e86\u5c06\u5173\u952e\u5b57\u4f20\u9012\u7ed9\u5b57\u5178\u3002 \u800c\u4e14\uff0c\u5f53\u952e\u4e0d\u662f\u5b57\u7b26\u4e32\u65f6\uff0cPython3\u4e2d\u4e0d\u5de5\u4f5c\u3002\u9690\u5f0f\u7684\u8c03\u7528\u7ea6\u5b9a\u662f\u547d\u540d\u7a7a\u95f4\u91c7\u7528\u666e\u901a\u7684\u5b57\u5178\uff0c\u7528\u6237\u5fc5\u987b\u53ea\u4f20\u9012\u5b57\u7b26\u4e32\u5173\u952e\u5b57\uff0c\u5176\u4ed6\u7c7b\u578b\u90fd\u662f\u8fdd\u80cc\u4e86\u8fd9\u4e00\u7ea6\u5b9a\u7684\u3002\u5728Python2\u4e2d dict \u6253\u7834\u4e86\u8fd9\u4e2a\u4e00\u81f4\u6027\u3002 >>> foo ( ** {( 'a' , 'b' ): None }) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : foo () keywords must be strings >>> dict ( ** {( 'a' , 'b' ): None }) {( 'a' , 'b' ): None } \u8fd9\u79cd\u4e0d\u4e00\u81f4\u6027\u5b58\u5728\u4e8ePython\u7684\u5176\u4ed6\u5b9e\u73b0(Pypy, Jython, IronPython)\uff0c\u5728Python3\u4e2d\u88ab\u4fee\u590d\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u662f\u4e2a\u7a81\u7834\u6027\u7684\u53d8\u5316\u3002 \u5411\u4f60\u6307\u51fa\uff0c\u6545\u610f\u7f16\u5199\u53ea\u80fd\u5728\u4e00\u79cd\u8bed\u8a00\u7248\u672c\u4e2d\u6216\u8005\u53ea\u5728\u7279\u5b9a\u7ea6\u675f\u6761\u4ef6\u4e0b\u624d\u80fd\u5de5\u4f5c\u7684\u4ee3\u7801\u662f\u65e0\u80fd\u7684\u4f53\u73b0\u3002 \u53e6\u5916\u4e00\u4e2a\u8bc4\u8bba dict(x.items() + y.items()) \u5728Python2\u4e2d\u4ecd\u662f\u53ef\u8bfb\u6027\u6700\u5f3a\u7684\u5199\u6cd5\uff0c\u53ef\u8bfb\u6027\u66f4\u91cd\u8981\u3002 \u6211\u7684\u56de\u590d\uff1a\u5bf9\u6211\u800c\u8a00 merge_two_dicts(x, y) \u53ef\u8bfb\u6027\u66f4\u597d\u3002\u5982\u679c\u4e0d\u662f\u524d\u5411\u517c\u5bb9\u7684\u95ee\u9898\uff0cPython2\u5c06\u4f1a\u52a0\u901f\u88ab\u5e9f\u5f03\u3002","title":"\u5bf9\u8bc4\u8bba\u7684\u56de\u590d"},{"location":"stackoverflow-python-top-qa/7/#_6","text":"\u4ee5\u4e0b\u5199\u6cd5\u6027\u80fd\u8f83\u5dee\uff0c\u4f46\u662f\u4e5f\u662f\u6b63\u786e\u7684\u65b9\u5f0f\u3002\u6bd4\u8d77 copy \u548c update \u65b9\u6cd5\u4ee5\u53ca\u65b0\u7684\u5c55\u5f00\u65b9\u6cd5\uff0c\u6027\u80fd\u4f1a\u5dee\u8ddf\u591a\uff0c\u539f\u56e0\u662f\u8fed\u4ee3\u4e86\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4f46\u662f\u4fdd\u8bc1\u4e86\u4f18\u5148\u7ea7\uff08\u540e\u9762\u7684\u5b57\u5178\u4f18\u5148\u7ea7\u9ad8\uff09 \u4f60\u4e5f\u7528\u4e00\u4e2a\u5b57\u5178\u63a8\u5bfc\u4e2d\u624b\u52a8\u5408\u5e76\u5b57\u5178\u3002 { k : v for d in dicts for k , v in d . items ()} # iteritems in Python 2.7 \u6216\u8005\u5728Python2.6\u4e2d\uff08\u6216\u8005\u66f4\u65e9\u52302.4\u7684\u7248\u672c\uff0c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u88ab\u5f15\u5165\uff09: dict (( k , v ) for d in dicts for k , v in d . items ()) itertools.chain \u4e5f\u4f1a\u901a\u8fc7\u952e\u503c\u5bf9\u8fed\u4ee3\u7684\u65b9\u5f0f\u6b63\u786e\u5408\u5e76\u3002 import itertools z = dict ( itertools . chain ( x . iteritems (), y . iteritems ()))","title":"\u6027\u80fd\u8f83\u5dee\u4f46\u6b63\u786e\u7684\u5199\u6cd5"},{"location":"stackoverflow-python-top-qa/7/#_7","text":"\u7528\u4ee5\u4e0b\u65b9\u6cd5\u505a\u6027\u80fd\u5206\u6790 import timeit \u8fd0\u884c\u73af\u5883\uff1aUbuntu 14.04 Python 2.7 (system Python): >>> min ( timeit . repeat ( lambda : merge_two_dicts ( x , y ))) 0.5726828575134277 >>> min ( timeit . repeat ( lambda : { k : v for d in ( x , y ) for k , v in d . items ()} )) 1.163769006729126 >>> min ( timeit . repeat ( lambda : dict ( itertools . chain ( x . iteritems (), y . iteritems ())))) 1.1614501476287842 >>> min ( timeit . repeat ( lambda : dict (( k , v ) for d in ( x , y ) for k , v in d . items ()))) 2.2345519065856934 In Python 3.5 (deadsnakes PPA): >>> min ( timeit . repeat ( lambda : { ** x , ** y })) 0.4094954460160807 >>> min ( timeit . repeat ( lambda : merge_two_dicts ( x , y ))) 0.7881555100320838 >>> min ( timeit . repeat ( lambda : { k : v for d in ( x , y ) for k , v in d . items ()} )) 1.4525277839857154 >>> min ( timeit . repeat ( lambda : dict ( itertools . chain ( x . items (), y . items ())))) 2.3143140770262107 >>> min ( timeit . repeat ( lambda : dict (( k , v ) for d in ( x , y ) for k , v in d . items ()))) 3.2069112799945287","title":"\u6027\u80fd\u5206\u6790"},{"location":"stackoverflow-python-top-qa/7/#_8","text":"My explanation of Python's dictionary implementation , updated for 3.6. Answer on how to add new keys to a dictionary Mapping two lists into a dictionary The official Python docs on dictionaries The Dictionary Even Mightier - talk by Brandon Rhodes at Pycon 2017 Modern Python Dictionaries, A Confluence of Great Ideas - talk by Raymond Hettinger at Pycon 2017","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"stackoverflow-python-top-qa/8/","text":"8. \u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u76ee\u5f55 \u00b6 \u9898\u76ee \u00b6 \u5982\u4f55\u7528\u6700\u4f18\u96c5\u7684\u65b9\u5f0f\u68c0\u67e5\u4e00\u4e2a\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\u5c31\u521b\u5efa\u5b83\uff1f \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u5c1d\u8bd5\u7528 os.path.exists ,\u5e76\u4e14\u7528 os.makedirs \u6765\u521b\u5efa\u76ee\u5f55\uff1a import os if not os . path . exists ( directory ): os . makedirs ( directory ) \u5b9e\u9645\u4e0a\u8fd9\u91cc\u6709\u4e00\u4e2arace condition - \u5982\u679c\u76ee\u5f55\u5728 os.path.exists \u548c os.makedirs \u4e4b\u95f4\u88ab\u521b\u5efa\u4e86\uff0c\u90a3\u4e48 os.makedirs \u5c06\u4f1a\u5931\u8d25\u5e76\u4ea7\u751f OSError \u8fd9\u4e2a\u9519\u8bef\u3002\u7136\u800c\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u4ec5\u4ec5catch\u4f4f\u8fd9\u4e2a OSSError \u7136\u540e\u7ee7\u7eed\u7684\u8bdd\u5e76\u4e0d\u662f\u5341\u5206\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5ffd\u7565\u6389\u5176\u4ed6\u7684\u4e00\u4e9b\u9519\u8bef\u539f\u56e0\uff0c\u6bd4\u5982\u56e0\u4e3a\u6ca1\u6709\u6743\u9650\u6216\u8005\u78c1\u76d8\u5df2\u6ee1\u3002 \u6709\u4e00\u4e2a\u65b9\u6cd5\u662fcatch\u4f4f\u8fd9\u4e2aerror\u5e76\u4e14\u68c0\u67e5\u4ed6\u7684errorcode\uff08see Is there a cross-platform way of getting information from Python\u2019s OSError \uff09: import os , errno try : os . makedirs ( directory ) except OSError as e : if e . errno != errno . EEXIST : raise \u5f53\u7136\u4f60\u8fd8\u53ef\u4ee5\u7b2c\u4e8c\u6b21\u68c0\u67e5 os.path.exists \uff0c\u4f46\u662f\u5982\u679c\u6709\u4eba\u5728\u7b2c\u4e00\u6b21\u68c0\u67e5\u4e4b\u540e\u521b\u5efa\u76ee\u5f55\uff0c\u7136\u540e\u5728\u7b2c\u4e8c\u6b21\u68c0\u67e5\u4e4b\u524d\u53c8\u628a\u76ee\u5f55\u5220\u4e86\uff0c\u90a3\u6211\u4eec\u4ecd\u7136\u662f\u88ab\u800d\u4e86\u3002 \u7efc\u4e0a\uff0c\u5e94\u8be5\u4f9d\u636e\u5177\u4f53\u7684\u60c5\u51b5\u6765\u51b3\u5b9a\u91c7\u7528\u54ea\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"8.\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u76ee\u5f55"},{"location":"stackoverflow-python-top-qa/8/#8","text":"","title":"8. \u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u76ee\u5f55"},{"location":"stackoverflow-python-top-qa/8/#_1","text":"\u5982\u4f55\u7528\u6700\u4f18\u96c5\u7684\u65b9\u5f0f\u68c0\u67e5\u4e00\u4e2a\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\u5c31\u521b\u5efa\u5b83\uff1f \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/8/#_2","text":"\u5c1d\u8bd5\u7528 os.path.exists ,\u5e76\u4e14\u7528 os.makedirs \u6765\u521b\u5efa\u76ee\u5f55\uff1a import os if not os . path . exists ( directory ): os . makedirs ( directory ) \u5b9e\u9645\u4e0a\u8fd9\u91cc\u6709\u4e00\u4e2arace condition - \u5982\u679c\u76ee\u5f55\u5728 os.path.exists \u548c os.makedirs \u4e4b\u95f4\u88ab\u521b\u5efa\u4e86\uff0c\u90a3\u4e48 os.makedirs \u5c06\u4f1a\u5931\u8d25\u5e76\u4ea7\u751f OSError \u8fd9\u4e2a\u9519\u8bef\u3002\u7136\u800c\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u4ec5\u4ec5catch\u4f4f\u8fd9\u4e2a OSSError \u7136\u540e\u7ee7\u7eed\u7684\u8bdd\u5e76\u4e0d\u662f\u5341\u5206\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5ffd\u7565\u6389\u5176\u4ed6\u7684\u4e00\u4e9b\u9519\u8bef\u539f\u56e0\uff0c\u6bd4\u5982\u56e0\u4e3a\u6ca1\u6709\u6743\u9650\u6216\u8005\u78c1\u76d8\u5df2\u6ee1\u3002 \u6709\u4e00\u4e2a\u65b9\u6cd5\u662fcatch\u4f4f\u8fd9\u4e2aerror\u5e76\u4e14\u68c0\u67e5\u4ed6\u7684errorcode\uff08see Is there a cross-platform way of getting information from Python\u2019s OSError \uff09: import os , errno try : os . makedirs ( directory ) except OSError as e : if e . errno != errno . EEXIST : raise \u5f53\u7136\u4f60\u8fd8\u53ef\u4ee5\u7b2c\u4e8c\u6b21\u68c0\u67e5 os.path.exists \uff0c\u4f46\u662f\u5982\u679c\u6709\u4eba\u5728\u7b2c\u4e00\u6b21\u68c0\u67e5\u4e4b\u540e\u521b\u5efa\u76ee\u5f55\uff0c\u7136\u540e\u5728\u7b2c\u4e8c\u6b21\u68c0\u67e5\u4e4b\u524d\u53c8\u628a\u76ee\u5f55\u5220\u4e86\uff0c\u90a3\u6211\u4eec\u4ecd\u7136\u662f\u88ab\u800d\u4e86\u3002 \u7efc\u4e0a\uff0c\u5e94\u8be5\u4f9d\u636e\u5177\u4f53\u7684\u60c5\u51b5\u6765\u51b3\u5b9a\u91c7\u7528\u54ea\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/9/","text":"9. \u5982\u4f55\u6839\u636e\u503c\u5bf9\u5b57\u5178\u6392\u5e8f \u00b6 \u9898\u76ee \u00b6 \u6211\u6709\u4e00\u4e2a\u4ece\u6570\u636e\u5e93\u7684\u4e24\u4e2a\u5b57\u6bb5\u4e2d\u8bfb\u53d6\u503c\u7684\u5b57\u5178:\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u6bb5\u548c\u4e00\u4e2a\u6570\u5b57\u5b57\u6bb5\u3002\u5b57\u7b26\u4e32\u5b57\u6bb5\u662f\u60df\u4e00\u7684\uff0c\u6240\u4ee5\u8fd9\u662f\u5b57\u5178\u7684key\u3002 \u6211\u53ef\u4ee5\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\uff0c\u4f46\u662f\u5982\u4f55\u6839\u636e\u503c\u6392\u5e8f\u5462? \u6ce8\u610f:\u6211\u8bfb\u8fc7Stack Overflow\u7684\u95ee\u9898 \u6211\u5982\u4f55\u7528Python\u4e2d\u7684dictionary\u6765\u5bf9\u5b57\u5178\u6392\u5e8f ?\u800c\u4e14\u53ef\u80fd\u4f1a\u6539\u53d8\u6211\u7684\u4ee3\u7801\u6765\u62e5\u6709\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u4e0d\u9700\u8981\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u6240\u4ee5\u6211\u60f3\u77e5\u9053\u662f\u5426\u6709\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u94fe\u63a5 \u56de\u7b54\u4e00 \u00b6 \u5bf9\u5b57\u5178\u8fdb\u884c\u6392\u5e8f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u53ea\u662f\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u5b57\u5178\u7684\u8868\u793a\u3002\u5b57\u5178\u672c\u8eab\u662f\u6ca1\u6709\u987a\u5e8f\u7684\uff0c\u4f46\u662f\u5176\u4ed6\u7c7b\u578b\uff0c\u5982\u5217\u8868\u548c\u5143\u7ec4\uff0c\u5219\u4e0d\u662f\u3002\u56e0\u6b64\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u6392\u5e8f\u7684\u503c\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u5217\u8868\u2014\u2014\u53ef\u80fd\u662f\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u3002 \u4f8b\u5982: import operator x = { 1 : 2 , 3 : 4 , 4 : 3 , 2 : 1 , 0 : 0 } sorted_x = sorted ( x . items (), key = operator . itemgetter ( 1 )) sorted_x \u5c06\u662f\u7531\u6bcf\u4e2a\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6392\u5e8f\u7684\u5143\u7ec4\u5217\u8868\u3002 dict(sorted_x)== x \u3002 \u800c\u5bf9\u4e8e\u90a3\u4e9b\u5e0c\u671b\u6309\u952e\u800c\u4e0d\u662f\u503c\u7684\u4eba: import operator x = { 1 : 2 , 3 : 4 , 4 : 3 , 2 : 1 , 0 : 0 } sorted_x = sorted ( x . items (), key = operator . itemgetter ( 0 )) \u56de\u7b54\u4e8c \u00b6 \u548c**sorted(dict1, key=dict1.get)**\u4e00\u6837\u7b80\u5355 \u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u7684\u503c\u6765\u6392\u5e8f\u3002\u6700\u8fd1\u6211\u5728Stack Overflow\u4e0a\u4e00\u4e2a\u4ee3\u7801\u9ad8\u5c14\u592b (Code Golf: Word frequency chart) \u4e2d\u505a\u4e86\u8fd9\u4e2a\u5de5\u4f5c\u3002\u95ee\u9898\u662f\u8fd9\u6837\u7684:\u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u9047\u5230\u7684\u9891\u7387\uff0c\u5e76\u663e\u793a\u6700\u4e0a\u9762\u7684\u5355\u8bcd\u5217\u8868\uff0c\u6309\u51cf\u5c11\u9891\u7387\u6392\u5e8f\u3002 \u5982\u679c\u4f60\u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u628a\u5355\u8bcd\u4f5c\u4e3a\u952e\uff0c\u5e76\u5c06\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u4f5c\u4e3a\u503c\uff0c\u5728\u8fd9\u91cc\u7b80\u5316\u4e3a: from collections import defaultdict d = defaultdict ( int ) for w in text . split (): d [ w ] += 1 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u6309\u4f7f\u7528\u7684\u9891\u7387\u6392\u5e8f sorted(d, key=d.get) ----\u8be5\u6392\u5e8f\u904d\u5386\u5b57\u5178\u952e\uff0c\u4f7f\u7528\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3a\u6392\u5e8f\u952e\u3002 for w in sorted ( d , key = d . get , reverse = True ): print w , d [ w ] \u6211\u6b63\u5728\u5199\u8fd9\u4e2a\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u4ee5\u8bf4\u660e\u4eba\u4eec\u5e38\u8bf4\u7684\u201c\u6211\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6309\u5173\u952e\u5b57\u5206\u7c7b\u8bcd\u5178\uff0c\u4f46\u6211\u5982\u4f55\u6309\u4ef7\u503c\u6392\u5e8f\u201d\u2014\u2014\u6211\u8ba4\u4e3aOP\u8bd5\u56fe\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6848\u662f\u6309\u7167\u4e0a\u9762\u6240\u793a\u7684\u503c\uff0c\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\u3002 \u56de\u7b54\u4e09 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a sorted ( d . items (), key = lambda x : x [ 1 ]) \u8fd9\u5c06\u6839\u636e\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u7684\u503c\u6765\u5bf9\u5b57\u5178\u6392\u5e8f\uff0c\u4ece\u6700\u5c0f\u5230\u6700\u5927\u3002","title":"9.\u5982\u4f55\u6839\u636e\u503c\u5bf9\u5b57\u5178\u6392\u5e8f"},{"location":"stackoverflow-python-top-qa/9/#9","text":"","title":"9. \u5982\u4f55\u6839\u636e\u503c\u5bf9\u5b57\u5178\u6392\u5e8f"},{"location":"stackoverflow-python-top-qa/9/#_1","text":"\u6211\u6709\u4e00\u4e2a\u4ece\u6570\u636e\u5e93\u7684\u4e24\u4e2a\u5b57\u6bb5\u4e2d\u8bfb\u53d6\u503c\u7684\u5b57\u5178:\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u6bb5\u548c\u4e00\u4e2a\u6570\u5b57\u5b57\u6bb5\u3002\u5b57\u7b26\u4e32\u5b57\u6bb5\u662f\u60df\u4e00\u7684\uff0c\u6240\u4ee5\u8fd9\u662f\u5b57\u5178\u7684key\u3002 \u6211\u53ef\u4ee5\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\uff0c\u4f46\u662f\u5982\u4f55\u6839\u636e\u503c\u6392\u5e8f\u5462? \u6ce8\u610f:\u6211\u8bfb\u8fc7Stack Overflow\u7684\u95ee\u9898 \u6211\u5982\u4f55\u7528Python\u4e2d\u7684dictionary\u6765\u5bf9\u5b57\u5178\u6392\u5e8f ?\u800c\u4e14\u53ef\u80fd\u4f1a\u6539\u53d8\u6211\u7684\u4ee3\u7801\u6765\u62e5\u6709\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u4e0d\u9700\u8981\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u6240\u4ee5\u6211\u60f3\u77e5\u9053\u662f\u5426\u6709\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u94fe\u63a5","title":"\u9898\u76ee"},{"location":"stackoverflow-python-top-qa/9/#_2","text":"\u5bf9\u5b57\u5178\u8fdb\u884c\u6392\u5e8f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u53ea\u662f\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u5b57\u5178\u7684\u8868\u793a\u3002\u5b57\u5178\u672c\u8eab\u662f\u6ca1\u6709\u987a\u5e8f\u7684\uff0c\u4f46\u662f\u5176\u4ed6\u7c7b\u578b\uff0c\u5982\u5217\u8868\u548c\u5143\u7ec4\uff0c\u5219\u4e0d\u662f\u3002\u56e0\u6b64\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u6392\u5e8f\u7684\u503c\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u5217\u8868\u2014\u2014\u53ef\u80fd\u662f\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u3002 \u4f8b\u5982: import operator x = { 1 : 2 , 3 : 4 , 4 : 3 , 2 : 1 , 0 : 0 } sorted_x = sorted ( x . items (), key = operator . itemgetter ( 1 )) sorted_x \u5c06\u662f\u7531\u6bcf\u4e2a\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6392\u5e8f\u7684\u5143\u7ec4\u5217\u8868\u3002 dict(sorted_x)== x \u3002 \u800c\u5bf9\u4e8e\u90a3\u4e9b\u5e0c\u671b\u6309\u952e\u800c\u4e0d\u662f\u503c\u7684\u4eba: import operator x = { 1 : 2 , 3 : 4 , 4 : 3 , 2 : 1 , 0 : 0 } sorted_x = sorted ( x . items (), key = operator . itemgetter ( 0 ))","title":"\u56de\u7b54\u4e00"},{"location":"stackoverflow-python-top-qa/9/#_3","text":"\u548c**sorted(dict1, key=dict1.get)**\u4e00\u6837\u7b80\u5355 \u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u7684\u503c\u6765\u6392\u5e8f\u3002\u6700\u8fd1\u6211\u5728Stack Overflow\u4e0a\u4e00\u4e2a\u4ee3\u7801\u9ad8\u5c14\u592b (Code Golf: Word frequency chart) \u4e2d\u505a\u4e86\u8fd9\u4e2a\u5de5\u4f5c\u3002\u95ee\u9898\u662f\u8fd9\u6837\u7684:\u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u9047\u5230\u7684\u9891\u7387\uff0c\u5e76\u663e\u793a\u6700\u4e0a\u9762\u7684\u5355\u8bcd\u5217\u8868\uff0c\u6309\u51cf\u5c11\u9891\u7387\u6392\u5e8f\u3002 \u5982\u679c\u4f60\u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u628a\u5355\u8bcd\u4f5c\u4e3a\u952e\uff0c\u5e76\u5c06\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u4f5c\u4e3a\u503c\uff0c\u5728\u8fd9\u91cc\u7b80\u5316\u4e3a: from collections import defaultdict d = defaultdict ( int ) for w in text . split (): d [ w ] += 1 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u6309\u4f7f\u7528\u7684\u9891\u7387\u6392\u5e8f sorted(d, key=d.get) ----\u8be5\u6392\u5e8f\u904d\u5386\u5b57\u5178\u952e\uff0c\u4f7f\u7528\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3a\u6392\u5e8f\u952e\u3002 for w in sorted ( d , key = d . get , reverse = True ): print w , d [ w ] \u6211\u6b63\u5728\u5199\u8fd9\u4e2a\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u4ee5\u8bf4\u660e\u4eba\u4eec\u5e38\u8bf4\u7684\u201c\u6211\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6309\u5173\u952e\u5b57\u5206\u7c7b\u8bcd\u5178\uff0c\u4f46\u6211\u5982\u4f55\u6309\u4ef7\u503c\u6392\u5e8f\u201d\u2014\u2014\u6211\u8ba4\u4e3aOP\u8bd5\u56fe\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6848\u662f\u6309\u7167\u4e0a\u9762\u6240\u793a\u7684\u503c\uff0c\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u56de\u7b54\u4e8c"},{"location":"stackoverflow-python-top-qa/9/#_4","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a sorted ( d . items (), key = lambda x : x [ 1 ]) \u8fd9\u5c06\u6839\u636e\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u7684\u503c\u6765\u5bf9\u5b57\u5178\u6392\u5e8f\uff0c\u4ece\u6700\u5c0f\u5230\u6700\u5927\u3002","title":"\u56de\u7b54\u4e09"}]}